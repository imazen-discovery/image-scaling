!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AdvanceMetric	core/SkAdvancedTypefaceMetrics.h	/^    struct AdvanceMetric {$/;"	s	class:SkAdvancedTypefaceMetrics
Align	core/SkPaint.h	/^    enum Align {$/;"	g	class:SkPaint
Align	views/SkStackViewLayout.h	/^    enum Align {$/;"	g	class:SkStackViewLayout
Alloc	SkBitmap.cpp	/^    static MipMap* Alloc(int levelCount, size_t pixelSize) {$/;"	f	struct:SkBitmap::MipMap
Alloc	core/SkDescriptor.h	/^    static SkDescriptor* Alloc(size_t length)$/;"	f	class:SkDescriptor
AllocFailType	core/SkChunkAlloc.h	/^    enum AllocFailType {$/;"	g	class:SkChunkAlloc
Allocator	SkBitmap.h	/^    class Allocator : public SkRefCnt {$/;"	c	class:SkBitmap
Allocator	core/SkBitmap.h	/^    class Allocator : public SkRefCnt {$/;"	c	class:SkBitmap
AndroidKeycodeToSkKey	utils/android/AndroidKeyToSkKey.h	/^SkKey AndroidKeycodeToSkKey(int keycode) {$/;"	f
AnimaDir	views/SkWidget.h	/^    enum AnimaDir {$/;"	g	class:SkTextView
AntiFillRect	core/SkScan.h	/^    static void AntiFillRect(const SkRect& rect, const SkRasterClip& clip,$/;"	f	class:SkScan
AntiFillRect	core/SkScan.h	/^    static void AntiFillRect(const SkRect& rect, const SkRegion* clip,$/;"	f	class:SkScan
ApplyScale	core/SkUnPreMultiply.h	/^    static U8CPU ApplyScale(Scale scale, U8CPU component) {$/;"	f	class:SkUnPreMultiply
Array	utils/SkJSON.h	/^    class Array {$/;"	c	class:SkJSON
ArrayT	core/SkTDArray.h	/^    typedef T ArrayT[kDebugArraySize];$/;"	t	class:SkTDArray
Artist	views/SkView.h	/^    class Artist : public SkRefCnt {$/;"	c	class:SkView
Attr	views/SkWidget.h	/^    enum Attr {$/;"	g	class:SkGridView
Attr	views/SkWidget.h	/^    enum Attr {$/;"	g	class:SkListView
Attr	xml/SkDOM.h	/^    typedef SkDOMAttr Attr;$/;"	t	class:SkDOM
AttrIter	xml/SkDOM.h	/^    class AttrIter {$/;"	c	class:SkDOM
AutoContextRestore	gpu/SkMesaGLContext.h	/^    class AutoContextRestore {$/;"	c	class:SkMesaGLContext
AutoContextRestore	gpu/SkNativeGLContext.h	/^    class AutoContextRestore {$/;"	c	class:SkNativeGLContext
AutoFinish	gpu/GrTextContext.h	/^    class AutoFinish {$/;"	c	class:GrTextContext
AutoFinish	gpu/GrTextContext.h	/^inline GrTextContext::AutoFinish::AutoFinish(GrTextContext* textContext,$/;"	f	class:GrTextContext::AutoFinish
AutoRenderTarget	gpu/GrContext.h	/^        AutoRenderTarget(GrContext* context, GrRenderTarget* target) {$/;"	f	class:GrContext::AutoRenderTarget
AutoRenderTarget	gpu/GrContext.h	/^    class AutoRenderTarget : ::GrNoncopyable {$/;"	c	class:GrContext
AutoValidateClip	core/SkCanvas.h	/^        explicit AutoValidateClip(SkCanvas* canvas) : fCanvas(canvas) {$/;"	f	class:SkCanvas::AutoValidateClip
AutoValidateClip	core/SkCanvas.h	/^    class AutoValidateClip : ::SkNoncopyable {$/;"	c	class:SkCanvas
Axis	effects/SkColorMatrix.h	/^    enum Axis {$/;"	g	class:SkColorMatrix
B2FIter	core/SkClipStack.h	/^    class B2FIter {$/;"	c	class:SkClipStack
B2FIter	views/SkView.h	/^    class B2FIter {$/;"	c	class:SkView
BASE_CLASS	svg/SkSVGPaintState.h	/^    typedef SkSVGPaint BASE_CLASS;$/;"	t	class:SkSVGPaint
BML_WXMLParser	xml/SkBML_WXMLParser.h	/^class BML_WXMLParser : public SkXMLParser {$/;"	c
BML_XMLParser	xml/SkBML_XMLParser.h	/^class BML_XMLParser {$/;"	c
BMPImageDecoder	images/SkImageDecoder.h	/^DECLARE_DECODER_CREATOR(BMPImageDecoder);$/;"	v
BitFlags	effects/SkLayerDrawLooper.h	/^    typedef int32_t BitFlags;$/;"	t	class:SkLayerDrawLooper
Bitmap2PixelConfig	gpu/SkGr.h	/^    static GrPixelConfig Bitmap2PixelConfig(const SkBitmap& bm) {$/;"	f	class:SkGr
BitmapType	core/SkShader.h	/^    enum BitmapType {$/;"	g	class:SkShader
Bits	effects/SkLayerDrawLooper.h	/^    enum Bits {$/;"	g	class:SkLayerDrawLooper
BlurFlags	effects/SkBlurDrawLooper.h	/^    enum BlurFlags {$/;"	g	class:SkBlurDrawLooper
BlurFlags	effects/SkBlurMaskFilter.h	/^    enum BlurFlags {$/;"	g	class:SkBlurMaskFilter
BlurInfo	core/SkMaskFilter.h	/^    struct BlurInfo {$/;"	s	class:SkMaskFilter
BlurStyle	effects/SkBlurMaskFilter.h	/^    enum BlurStyle {$/;"	g	class:SkBlurMaskFilter
BlurType	core/SkMaskFilter.h	/^    enum BlurType {$/;"	g	class:SkMaskFilter
BootStrap	core/SkGlobals.h	/^    struct BootStrap {$/;"	s	class:SkGlobals
CHECK_FOR_565_OVERFLOW	SkColorPriv.h	/^    #define CHECK_FOR_565_OVERFLOW$/;"	d
CHECK_FOR_565_OVERFLOW	core/SkColorPriv.h	/^    #define CHECK_FOR_565_OVERFLOW$/;"	d
CanCallShadeSpan16	core/SkShader.h	/^    static bool CanCallShadeSpan16(uint32_t flags) {$/;"	f	class:SkShader
CanNormalize	core/SkPoint.h	/^    static bool CanNormalize(SkScalar dx, SkScalar dy)$/;"	f	struct:SkPoint
Cap	core/SkPaint.h	/^    enum Cap {$/;"	g	class:SkPaint
Capabilities	core/SkDevice.h	/^    enum Capabilities {$/;"	g	class:SkDevice
CheckState	views/SkWidgetViews.h	/^    enum CheckState {$/;"	g	class:SkCheckButtonView
Choose	core/SkBlitter.h	/^    static SkBlitter* Choose(const SkBitmap& device,$/;"	f	class:SkBlitter
ChoosePixelFormatProc	utils/SkWGL.h	/^    typedef BOOL (WINAPI *ChoosePixelFormatProc)(HDC hdc, const int *, const FLOAT *, UINT, int *, UINT *);$/;"	t	class:SkWGLExtensions
Chooser	images/SkImageDecoder.h	/^    class Chooser : public SkRefCnt {$/;"	c	class:SkImageDecoder
Click	views/SkView.h	/^    class Click {$/;"	c	class:SkView
Clip	core/SkClipStack.h	/^            Clip() : fRect(NULL), fPath(NULL), fOp(SkRegion::kIntersect_Op), $/;"	f	struct:SkClipStack::B2FIter::Clip
Clip	core/SkClipStack.h	/^        struct Clip {$/;"	s	class:SkClipStack::B2FIter
ClipType	core/SkCanvas.h	/^    enum ClipType {$/;"	g	class:SkCanvas
ClipVisitor	core/SkCanvas.h	/^    class ClipVisitor {$/;"	c	class:SkCanvas
Cliperator	core/SkRegion.h	/^    class SK_API Cliperator {$/;"	c	class:SkRegion
Coeff	core/SkXfermode.h	/^    enum Coeff {$/;"	g	class:SkXfermode
ColorProc	core/SkBlitRow.h	/^   typedef void (*ColorProc)(SkPMColor* dst, const SkPMColor* src, int count,$/;"	t	class:SkBlitRow
ColorRectProc	core/SkBlitRow.h	/^    typedef void (*ColorRectProc)(SkPMColor* dst, int width, int height,$/;"	t	class:SkBlitRow
ComputeBytesPerPixel	SkBitmap.cpp	/^int SkBitmap::ComputeBytesPerPixel(SkBitmap::Config config) {$/;"	f	class:SkBitmap
ComputeChecksum	core/SkDescriptor.h	/^    static uint32_t ComputeChecksum(const SkDescriptor* desc)$/;"	f	class:SkDescriptor
ComputeMipLevel	SkBitmap.cpp	/^SkFixed SkBitmap::ComputeMipLevel(SkFixed sx, SkFixed sy) {$/;"	f	class:SkBitmap
ComputeOverhead	core/SkDescriptor.h	/^    static size_t ComputeOverhead(int entryCount)$/;"	f	class:SkDescriptor
ComputeRowBytes	SkBitmap.cpp	/^int SkBitmap::ComputeRowBytes(Config c, int width) {$/;"	f	class:SkBitmap
ComputeRowBytes	core/SkScalerContext.h	/^    static unsigned ComputeRowBytes(unsigned width, SkMask::Format format) {$/;"	f	struct:SkGlyph
ComputeSafeSize	SkBitmap.cpp	/^size_t SkBitmap::ComputeSafeSize(Config config,$/;"	f	class:SkBitmap
ComputeSafeSize64	SkBitmap.cpp	/^Sk64 SkBitmap::ComputeSafeSize64(Config config,$/;"	f	class:SkBitmap
ComputeShiftPerPixel	SkBitmap.h	/^    static int ComputeShiftPerPixel(Config c) {$/;"	f	class:SkBitmap
ComputeShiftPerPixel	core/SkBitmap.h	/^    static int ComputeShiftPerPixel(Config c) {$/;"	f	class:SkBitmap
ComputeSize	SkBitmap.cpp	/^size_t SkBitmap::ComputeSize(Config c, int width, int height) {$/;"	f	class:SkBitmap
ComputeSize64	SkBitmap.cpp	/^Sk64 SkBitmap::ComputeSize64(Config c, int width, int height) {$/;"	f	class:SkBitmap
Config	SkBitmap.h	/^    enum Config {$/;"	g	class:SkBitmap
Config	core/SkBitmap.h	/^    enum Config {$/;"	g	class:SkBitmap
Config8888	core/SkCanvas.h	/^    enum Config8888 {$/;"	g	class:SkCanvas
Context	gpu/SkMesaGLContext.h	/^    typedef intptr_t Context;$/;"	t	class:SkMesaGLContext
Convexity	core/SkPath.h	/^    enum Convexity {$/;"	g	class:SkPath
CreateClip	effects/SkTableMaskFilter.h	/^    static SkTableMaskFilter* CreateClip(uint8_t min, uint8_t max) {$/;"	f	class:SkTableMaskFilter
CreateContextAttribsProc	utils/SkWGL.h	/^    typedef HGLRC (WINAPI *CreateContextAttribsProc)(HDC hDC, HGLRC, const int *);$/;"	t	class:SkWGLExtensions
CreateGamma	effects/SkTableMaskFilter.h	/^    static SkTableMaskFilter* CreateGamma(SkScalar gamma) {$/;"	f	class:SkTableMaskFilter
CreateMode	core/SkMask.h	/^    enum CreateMode {$/;"	g	struct:SkMask
CrossProduct	core/SkPoint.h	/^    static SkScalar CrossProduct(const SkPoint& a, const SkPoint& b) {$/;"	f	struct:SkPoint
CrossProduct	core/SkPoint.h	/^    static int32_t CrossProduct(const SkIPoint& a, const SkIPoint& b) {$/;"	f	struct:SkIPoint
DEBUG_CLIENTBLOCK	core/SkPostConfig.h	/^    #define DEBUG_CLIENTBLOCK /;"	d
DECLARE_DECODER_CREATOR	images/SkImageDecoder.h	/^#define DECLARE_DECODER_CREATOR(/;"	d
DECLARE_ENCODER_CREATOR	images/SkImageEncoder.h	/^#define DECLARE_ENCODER_CREATOR(/;"	d
DECLARE_INSTANCE_COUNTER	gpu/GrInstanceCounter.h	/^#define DECLARE_INSTANCE_COUNTER(/;"	d
DEFINE_DECODER_CREATOR	images/SkImageDecoder.h	/^#define DEFINE_DECODER_CREATOR(/;"	d
DEFINE_ENCODER_CREATOR	images/SkImageEncoder.h	/^#define DEFINE_ENCODER_CREATOR(/;"	d
DITHER_4444_SCAN	core/SkDither.h	/^    #define DITHER_4444_SCAN(/;"	d
DITHER_565_SCAN	core/SkDither.h	/^    #define DITHER_565_SCAN(/;"	d
DITHER_INC_X	core/SkDither.h	/^#define DITHER_INC_X(/;"	d
DITHER_VALUE	core/SkDither.h	/^    #define DITHER_VALUE(/;"	d
DateTime	core/SkTime.h	/^    struct DateTime {$/;"	s	class:SkTime
DecodeFile	images/SkImageDecoder.h	/^    static bool DecodeFile(const char file[], SkBitmap* bitmap) {$/;"	f	class:SkImageDecoder
DecodeMemory	images/SkImageDecoder.h	/^    static bool DecodeMemory(const void* buffer, size_t size, SkBitmap* bitmap){$/;"	f	class:SkImageDecoder
DecodeStream	images/SkImageDecoder.h	/^    static bool DecodeStream(SkStream* stream, SkBitmap* bitmap) {$/;"	f	class:SkImageDecoder
DeferredDevice	utils/SkDeferredCanvas.h	/^    class DeferredDevice : public SkDevice {$/;"	c	class:SkDeferredCanvas
DeviceContext	utils/SkDeferredCanvas.h	/^    class DeviceContext : public SkRefCnt {$/;"	c	class:SkDeferredCanvas
DifferenceType	animator/SkAnimator.h	/^    enum DifferenceType {$/;"	g	class:SkAnimator
Direction	core/SkPath.h	/^    enum Direction {$/;"	g	class:SkPath
DirtyFlags	views/SkWidgetViews.h	/^    enum DirtyFlags {$/;"	g	class:SkListView
Distance	core/SkPoint.h	/^    static SkScalar Distance(const SkPoint& a, const SkPoint& b) {$/;"	f	struct:SkPoint
DivOptions	core/Sk64.h	/^    enum DivOptions {$/;"	g	struct:Sk64
DotProduct	core/SkPoint.h	/^    static SkScalar DotProduct(const SkPoint& a, const SkPoint& b) {$/;"	f	struct:SkPoint
DotProduct	core/SkPoint.h	/^    static int32_t DotProduct(const SkIPoint& a, const SkIPoint& b) {$/;"	f	struct:SkIPoint
DrawCategory	gpu/GrContext.h	/^    enum DrawCategory {$/;"	g	class:GrContext
DrawingArea	pdf/SkPDFDevice.h	/^    enum DrawingArea {$/;"	g	class:SkPDFDevice
Dumper	utils/SkDumpCanvas.h	/^    class Dumper : public SkRefCnt {$/;"	c	class:SkDumpCanvas
Edge	utils/SkBoundaryPatch.h	/^    enum Edge {$/;"	g	class:SkBoundary
EdgeType	core/SkCanvas.h	/^    enum EdgeType {$/;"	g	class:SkCanvas
Elem	xml/SkXMLWriter.h	/^    struct Elem {$/;"	s	class:SkXMLWriter
Element	gpu/GrClip.h	/^    struct Element {$/;"	s	class:GrClip
EmptyIRect	SkRect.h	/^    static const SkIRect& SK_WARN_UNUSED_RESULT EmptyIRect() {$/;"	f	struct:SkIRect
EmptyIRect	core/SkRect.h	/^    static const SkIRect& SK_WARN_UNUSED_RESULT EmptyIRect() {$/;"	f	struct:SkIRect
Entry	core/SkDescriptor.h	/^    struct Entry {$/;"	s	class:SkDescriptor
ErrorCode	xml/SkXMLParser.h	/^    enum ErrorCode {$/;"	g	class:SkXMLParserError
EventResult	views/SkEventSink.h	/^    enum EventResult {$/;"	g	class:SkEventSink
ExtractSubPixelBitsFromFixed	gpu/GrGlyph.h	/^    static inline unsigned ExtractSubPixelBitsFromFixed(GrFixed pos) {$/;"	f	struct:GrGlyph
F2BIter	core/SkDeque.h	/^    class F2BIter {$/;"	c	class:SkDeque
F2BIter	pdf/SkPDFFont.h	/^    class F2BIter {$/;"	c	class:SkPDFGlyphSetMap
F2BIter	views/SkView.h	/^    class F2BIter {$/;"	c	class:SkView
Factory	core/SkFlattenable.h	/^    typedef SkFlattenable* (*Factory)(SkFlattenableReadBuffer&);$/;"	t	class:SkFlattenable
Factory	core/SkTRegistry.h	/^    typedef T (*Factory)(P);$/;"	t	class:SkTRegistry
FallbackScripts	ports/SkTypeface_android.h	/^enum FallbackScripts {$/;"	g
Field	svg/SkSVGPaintState.h	/^    enum Field {$/;"	g	class:SkSVGPaint
FillRect	core/SkScan.h	/^    static void FillRect(const SkRect& rect, const SkRasterClip& clip,$/;"	f	class:SkScan
FillRect	core/SkScan.h	/^    static void FillRect(const SkRect& rect, const SkRegion* clip,$/;"	f	class:SkScan
FillType	core/SkPath.h	/^    enum FillType {$/;"	g	class:SkPath
Filter	gpu/GrSamplerState.h	/^    enum Filter {$/;"	g	class:GrSamplerState
FilterDirection	gpu/GrSamplerState.h	/^    enum FilterDirection {$/;"	g	class:GrSamplerState
FixedToSub	core/SkScalerContext.h	/^    static unsigned FixedToSub(SkFixed n) {$/;"	f	struct:SkGlyph
Flag_Mask	views/SkView.h	/^    enum Flag_Mask {$/;"	g	class:SkView
Flag_Shift	views/SkView.h	/^    enum Flag_Shift {$/;"	g	class:SkView
Flags	SkBitmap.h	/^    enum Flags {$/;"	g	class:SkBitmap
Flags	SkBitmap.h	/^    enum Flags {$/;"	g	class:SkColorTable
Flags	core/SkBitmap.h	/^    enum Flags {$/;"	g	class:SkBitmap
Flags	core/SkBitmap.h	/^    enum Flags {$/;"	g	class:SkColorTable
Flags	core/SkColorFilter.h	/^    enum Flags {$/;"	g	class:SkColorFilter
Flags	core/SkFlattenable.h	/^    enum Flags {$/;"	g	class:SkFlattenableWriteBuffer
Flags	core/SkPaint.h	/^    enum Flags {$/;"	g	class:SkPaint
Flags	core/SkScalerContext.h	/^    enum Flags {$/;"	g	class:SkScalerContext
Flags	core/SkShader.h	/^    enum Flags {$/;"	g	class:SkShader
Flags	pdf/SkPDFDocument.h	/^    enum Flags {$/;"	g	class:SkPDFDocument
Flags	pipe/SkGPipe.h	/^    enum Flags {$/;"	g	class:SkGPipeWriter
Flags	utils/SkInterpolator.h	/^    enum Flags {$/;"	g	class:SkInterpolatorBase
Flags	utils/SkLayer.h	/^    enum Flags {$/;"	g	class:SkLayer
Flags16	core/SkBlitRow.h	/^    enum Flags16 {$/;"	g	class:SkBlitRow
Flags32	core/SkBlitRow.h	/^    enum Flags32 {$/;"	g	class:SkBlitRow
FlushBits	gpu/GrContext.h	/^    enum FlushBits {$/;"	g	class:GrContext
FocusDirection	views/SkView.h	/^    enum FocusDirection {$/;"	g	class:SkView
FontGlyphSetPair	pdf/SkPDFFont.h	/^    struct FontGlyphSetPair {$/;"	s	class:SkPDFGlyphSetMap
FontHintLevel	core/SkDeviceProfile.h	/^    enum FontHintLevel {$/;"	g	class:SkDeviceProfile
FontMetrics	core/SkPaint.h	/^    struct FontMetrics {$/;"	s	class:SkPaint
FontRec	pdf/SkPDFFont.h	/^    class FontRec {$/;"	c	class:SkPDFFont
FontType	core/SkAdvancedTypefaceMetrics.h	/^    enum FontType {$/;"	g	class:SkAdvancedTypefaceMetrics
Format	core/SkMask.h	/^    enum Format {$/;"	g	struct:SkMask
Format	images/SkImageDecoder.h	/^    enum Format {$/;"	g	class:SkImageDecoder
Free	core/SkDescriptor.h	/^    static void Free(SkDescriptor* desc)$/;"	f	class:SkDescriptor
GEN_ID_INC	core/SkPath.h	/^#define GEN_ID_INC /;"	d
GEN_ID_INC	core/SkPath.h	/^#define GEN_ID_INC$/;"	d
GEN_ID_PTR_INC	core/SkPath.h	/^#define GEN_ID_PTR_INC(/;"	d
GIFImageDecoder	images/SkImageDecoder.h	/^DECLARE_DECODER_CREATOR(GIFImageDecoder);$/;"	v
GLContextType	gpu/GrContextFactory.h	/^    enum GLContextType {$/;"	g	class:GrContextFactory
GLProgramStage	gpu/GrProgramStageFactory.h	/^    typedef typename StageClass::GLProgramStage GLProgramStage; $/;"	t	class:GrTProgramStageFactory
GPUContext	gpu/GrContextFactory.h	/^    struct GPUContext {$/;"	s	class:GrContextFactory
GR_AGGRESSIVE_SHADER_OPTS	gpu/GrConfig.h	/^    #define GR_AGGRESSIVE_SHADER_OPTS /;"	d
GR_ALWAYSASSERT	gpu/GrConfig.h	/^    #define GR_ALWAYSASSERT(/;"	d
GR_ALWAYSBREAK	gpu/GrConfig.h	/^        #define GR_ALWAYSBREAK /;"	d
GR_ANDROID_BUILD	gpu/GrConfig.h	/^        #define GR_ANDROID_BUILD /;"	d
GR_ANDROID_BUILD	gpu/GrConfig.h	/^        #undef GR_ANDROID_BUILD$/;"	d
GR_ANDROID_BUILD	gpu/GrConfig.h	/^    #define GR_ANDROID_BUILD /;"	d
GR_API	gpu/GrConfig.h	/^            #define GR_API /;"	d
GR_API	gpu/GrConfig.h	/^        #define GR_API /;"	d
GR_API	gpu/GrConfig.h	/^    #define GR_API$/;"	d
GR_ARRAY_COUNT	gpu/GrTypes.h	/^#define GR_ARRAY_COUNT(/;"	d
GR_BUILD_SUM	gpu/GrConfig.h	/^#define GR_BUILD_SUM /;"	d
GR_COLLECT_STATS	gpu/GrConfig.h	/^    #define GR_COLLECT_STATS /;"	d
GR_CONCAT	gpu/GrConfig.h	/^#define GR_CONCAT(/;"	d
GR_CONCAT_IMPL	gpu/GrConfig.h	/^#define GR_CONCAT_IMPL(/;"	d
GR_CT_MAX	gpu/GrTypes.h	/^#define GR_CT_MAX(/;"	d
GR_CT_MIN	gpu/GrTypes.h	/^#define GR_CT_MIN(/;"	d
GR_DEBUG	gpu/GrConfig.h	/^            #define GR_DEBUG /;"	d
GR_DEBUG	gpu/GrConfig.h	/^        #define GR_DEBUG /;"	d
GR_DEBUGASSERT	gpu/GrConfig.h	/^        #define GR_DEBUGASSERT(/;"	d
GR_DEBUGBREAK	gpu/GrConfig.h	/^        #define GR_DEBUGBREAK /;"	d
GR_DEBUGBREAK	gpu/GrConfig.h	/^        #define GR_DEBUGBREAK$/;"	d
GR_DEBUGCODE	gpu/GrConfig.h	/^        #define GR_DEBUGCODE(/;"	d
GR_DECL_BITFIELD_OPS_FRIENDS	gpu/GrTypes.h	/^#define GR_DECL_BITFIELD_OPS_FRIENDS(/;"	d
GR_DLL	gpu/GrConfig.h	/^    #define GR_DLL /;"	d
GR_DUMP_TEXTURE_UPLOAD	gpu/GrConfig.h	/^    #define GR_DUMP_TEXTURE_UPLOAD /;"	d
GR_FILE_AND_LINE_STR	gpu/GrConfig.h	/^#define GR_FILE_AND_LINE_STR /;"	d
GR_Fixed1	gpu/GrScalar.h	/^#define GR_Fixed1 /;"	d
GR_FixedHalf	gpu/GrScalar.h	/^#define GR_FixedHalf /;"	d
GR_GEOM_BUFFER_LOCK_THRESHOLD	gpu/GrConfig.h	/^    #define GR_GEOM_BUFFER_LOCK_THRESHOLD /;"	d
GR_GLSL_VER	gpu/GrGLInterface.h	/^#define GR_GLSL_VER(/;"	d
GR_GL_ACTIVE_ATTRIBUTES	gpu/GrGLDefines.h	/^#define GR_GL_ACTIVE_ATTRIBUTES /;"	d
GR_GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	gpu/GrGLDefines.h	/^#define GR_GL_ACTIVE_ATTRIBUTE_MAX_LENGTH /;"	d
GR_GL_ACTIVE_TEXTURE	gpu/GrGLDefines.h	/^#define GR_GL_ACTIVE_TEXTURE /;"	d
GR_GL_ACTIVE_UNIFORMS	gpu/GrGLDefines.h	/^#define GR_GL_ACTIVE_UNIFORMS /;"	d
GR_GL_ACTIVE_UNIFORM_MAX_LENGTH	gpu/GrGLDefines.h	/^#define GR_GL_ACTIVE_UNIFORM_MAX_LENGTH /;"	d
GR_GL_ADD_SIGNED	gpu/GrGLDefines.h	/^#define GR_GL_ADD_SIGNED /;"	d
GR_GL_ALIASED_LINE_WIDTH_RANGE	gpu/GrGLDefines.h	/^#define GR_GL_ALIASED_LINE_WIDTH_RANGE /;"	d
GR_GL_ALIASED_POINT_SIZE_RANGE	gpu/GrGLDefines.h	/^#define GR_GL_ALIASED_POINT_SIZE_RANGE /;"	d
GR_GL_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_ALPHA /;"	d
GR_GL_ALPHA8	gpu/GrGLDefines.h	/^#define GR_GL_ALPHA8 /;"	d
GR_GL_ALPHA_BITS	gpu/GrGLDefines.h	/^#define GR_GL_ALPHA_BITS /;"	d
GR_GL_ALWAYS	gpu/GrGLDefines.h	/^#define GR_GL_ALWAYS /;"	d
GR_GL_AMBIENT	gpu/GrGLDefines.h	/^#define GR_GL_AMBIENT /;"	d
GR_GL_AMBIENT_AND_DIFFUSE	gpu/GrGLDefines.h	/^#define GR_GL_AMBIENT_AND_DIFFUSE /;"	d
GR_GL_ANY_SAMPLES_PASSED	gpu/GrGLDefines.h	/^#define GR_GL_ANY_SAMPLES_PASSED /;"	d
GR_GL_ARRAY_BUFFER	gpu/GrGLDefines.h	/^#define GR_GL_ARRAY_BUFFER /;"	d
GR_GL_ARRAY_BUFFER_BINDING	gpu/GrGLDefines.h	/^#define GR_GL_ARRAY_BUFFER_BINDING /;"	d
GR_GL_ATTACHED_SHADERS	gpu/GrGLDefines.h	/^#define GR_GL_ATTACHED_SHADERS /;"	d
GR_GL_ATTRIBUTE_MATRICES	gpu/GrGLConfig.h	/^    #define GR_GL_ATTRIBUTE_MATRICES /;"	d
GR_GL_BACK	gpu/GrGLDefines.h	/^#define GR_GL_BACK /;"	d
GR_GL_BGRA	gpu/GrGLDefines.h	/^#define GR_GL_BGRA /;"	d
GR_GL_BGRA8	gpu/GrGLDefines.h	/^#define GR_GL_BGRA8 /;"	d
GR_GL_BLEND	gpu/GrGLDefines.h	/^#define GR_GL_BLEND /;"	d
GR_GL_BLEND_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_BLEND_COLOR /;"	d
GR_GL_BLEND_DST_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_BLEND_DST_ALPHA /;"	d
GR_GL_BLEND_DST_RGB	gpu/GrGLDefines.h	/^#define GR_GL_BLEND_DST_RGB /;"	d
GR_GL_BLEND_EQUATION	gpu/GrGLDefines.h	/^#define GR_GL_BLEND_EQUATION /;"	d
GR_GL_BLEND_EQUATION_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_BLEND_EQUATION_ALPHA /;"	d
GR_GL_BLEND_EQUATION_RGB	gpu/GrGLDefines.h	/^#define GR_GL_BLEND_EQUATION_RGB /;"	d
GR_GL_BLEND_SRC_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_BLEND_SRC_ALPHA /;"	d
GR_GL_BLEND_SRC_RGB	gpu/GrGLDefines.h	/^#define GR_GL_BLEND_SRC_RGB /;"	d
GR_GL_BLUE	gpu/GrGLDefines.h	/^#define GR_GL_BLUE /;"	d
GR_GL_BLUE_BITS	gpu/GrGLDefines.h	/^#define GR_GL_BLUE_BITS /;"	d
GR_GL_BOOL	gpu/GrGLDefines.h	/^#define GR_GL_BOOL /;"	d
GR_GL_BOOL_VEC2	gpu/GrGLDefines.h	/^#define GR_GL_BOOL_VEC2 /;"	d
GR_GL_BOOL_VEC3	gpu/GrGLDefines.h	/^#define GR_GL_BOOL_VEC3 /;"	d
GR_GL_BOOL_VEC4	gpu/GrGLDefines.h	/^#define GR_GL_BOOL_VEC4 /;"	d
GR_GL_BUFFER_MAPPED	gpu/GrGLDefines.h	/^#define GR_GL_BUFFER_MAPPED /;"	d
GR_GL_BUFFER_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_BUFFER_SIZE /;"	d
GR_GL_BUFFER_USAGE	gpu/GrGLDefines.h	/^#define GR_GL_BUFFER_USAGE /;"	d
GR_GL_BYTE	gpu/GrGLDefines.h	/^#define GR_GL_BYTE /;"	d
GR_GL_C3F_V3F	gpu/GrGLDefines.h	/^#define GR_GL_C3F_V3F /;"	d
GR_GL_C4F_N3F_V3F	gpu/GrGLDefines.h	/^#define GR_GL_C4F_N3F_V3F /;"	d
GR_GL_C4UB_V2F	gpu/GrGLDefines.h	/^#define GR_GL_C4UB_V2F /;"	d
GR_GL_C4UB_V3F	gpu/GrGLDefines.h	/^#define GR_GL_C4UB_V3F /;"	d
GR_GL_CALL	gpu/GrGLConfig.h	/^#define GR_GL_CALL(/;"	d
GR_GL_CALLBACK_IMPL	gpu/GrGLConfig.h	/^    #define GR_GL_CALLBACK_IMPL(/;"	d
GR_GL_CALL_NOERRCHECK	gpu/GrGLConfig.h	/^#define GR_GL_CALL_NOERRCHECK(/;"	d
GR_GL_CALL_RET	gpu/GrGLConfig.h	/^#define GR_GL_CALL_RET(/;"	d
GR_GL_CALL_RET_NOERRCHECK	gpu/GrGLConfig.h	/^#define GR_GL_CALL_RET_NOERRCHECK(/;"	d
GR_GL_CCW	gpu/GrGLDefines.h	/^#define GR_GL_CCW /;"	d
GR_GL_CHECK_ERROR	gpu/GrGLConfig.h	/^    #define GR_GL_CHECK_ERROR /;"	d
GR_GL_CHECK_ERROR_IMPL	gpu/GrGLConfig.h	/^    #define GR_GL_CHECK_ERROR_IMPL(/;"	d
GR_GL_CHECK_ERROR_START	gpu/GrGLConfig.h	/^    #define GR_GL_CHECK_ERROR_START /;"	d
GR_GL_CHECK_ERROR_START	gpu/GrGLConfig_chrome.h	/^#define GR_GL_CHECK_ERROR_START /;"	d
GR_GL_CLAMP	gpu/GrGLDefines.h	/^#define GR_GL_CLAMP /;"	d
GR_GL_CLAMP_TO_EDGE	gpu/GrGLDefines.h	/^#define GR_GL_CLAMP_TO_EDGE /;"	d
GR_GL_COLOR_ARRAY	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_ARRAY /;"	d
GR_GL_COLOR_ARRAY_POINTER	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_ARRAY_POINTER /;"	d
GR_GL_COLOR_ARRAY_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_ARRAY_SIZE /;"	d
GR_GL_COLOR_ARRAY_STRIDE	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_ARRAY_STRIDE /;"	d
GR_GL_COLOR_ARRAY_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_ARRAY_TYPE /;"	d
GR_GL_COLOR_ATTACHMENT0	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_ATTACHMENT0 /;"	d
GR_GL_COLOR_BUFFER_BIT	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_BUFFER_BIT /;"	d
GR_GL_COLOR_CLEAR_VALUE	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_CLEAR_VALUE /;"	d
GR_GL_COLOR_INDEXES	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_INDEXES /;"	d
GR_GL_COLOR_MATERIAL	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_MATERIAL /;"	d
GR_GL_COLOR_MATERIAL_FACE	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_MATERIAL_FACE /;"	d
GR_GL_COLOR_MATERIAL_PARAMETER	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_MATERIAL_PARAMETER /;"	d
GR_GL_COLOR_WRITEMASK	gpu/GrGLDefines.h	/^#define GR_GL_COLOR_WRITEMASK /;"	d
GR_GL_COMBINE	gpu/GrGLDefines.h	/^#define GR_GL_COMBINE /;"	d
GR_GL_COMBINE_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_COMBINE_ALPHA /;"	d
GR_GL_COMBINE_RGB	gpu/GrGLDefines.h	/^#define GR_GL_COMBINE_RGB /;"	d
GR_GL_COMPILE_STATUS	gpu/GrGLDefines.h	/^#define GR_GL_COMPILE_STATUS /;"	d
GR_GL_COMPRESSED_TEXTURE_FORMATS	gpu/GrGLDefines.h	/^#define GR_GL_COMPRESSED_TEXTURE_FORMATS /;"	d
GR_GL_CONSTANT	gpu/GrGLDefines.h	/^#define GR_GL_CONSTANT /;"	d
GR_GL_CONSTANT_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_CONSTANT_ALPHA /;"	d
GR_GL_CONSTANT_ATTENUATION	gpu/GrGLDefines.h	/^#define GR_GL_CONSTANT_ATTENUATION /;"	d
GR_GL_CONSTANT_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_CONSTANT_COLOR /;"	d
GR_GL_CONTEXT_LOST	gpu/GrGLDefines.h	/^#define GR_GL_CONTEXT_LOST /;"	d
GR_GL_CULL_FACE	gpu/GrGLDefines.h	/^#define GR_GL_CULL_FACE /;"	d
GR_GL_CULL_FACE_MODE	gpu/GrGLDefines.h	/^#define GR_GL_CULL_FACE_MODE /;"	d
GR_GL_CURRENT_PROGRAM	gpu/GrGLDefines.h	/^#define GR_GL_CURRENT_PROGRAM /;"	d
GR_GL_CURRENT_QUERY	gpu/GrGLDefines.h	/^#define GR_GL_CURRENT_QUERY /;"	d
GR_GL_CURRENT_VERTEX_ATTRIB	gpu/GrGLDefines.h	/^#define GR_GL_CURRENT_VERTEX_ATTRIB /;"	d
GR_GL_CW	gpu/GrGLDefines.h	/^#define GR_GL_CW /;"	d
GR_GL_DECAL	gpu/GrGLDefines.h	/^#define GR_GL_DECAL /;"	d
GR_GL_DECR	gpu/GrGLDefines.h	/^#define GR_GL_DECR /;"	d
GR_GL_DECR_WRAP	gpu/GrGLDefines.h	/^#define GR_GL_DECR_WRAP /;"	d
GR_GL_DELETE_STATUS	gpu/GrGLDefines.h	/^#define GR_GL_DELETE_STATUS /;"	d
GR_GL_DEPTH24_STENCIL8	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH24_STENCIL8 /;"	d
GR_GL_DEPTH_ATTACHMENT	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_ATTACHMENT /;"	d
GR_GL_DEPTH_BITS	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_BITS /;"	d
GR_GL_DEPTH_BUFFER_BIT	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_BUFFER_BIT /;"	d
GR_GL_DEPTH_CLEAR_VALUE	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_CLEAR_VALUE /;"	d
GR_GL_DEPTH_COMPONENT	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_COMPONENT /;"	d
GR_GL_DEPTH_COMPONENT16	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_COMPONENT16 /;"	d
GR_GL_DEPTH_FUNC	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_FUNC /;"	d
GR_GL_DEPTH_RANGE	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_RANGE /;"	d
GR_GL_DEPTH_STENCIL	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_STENCIL /;"	d
GR_GL_DEPTH_STENCIL_ATTACHMENT	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_STENCIL_ATTACHMENT /;"	d
GR_GL_DEPTH_TEST	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_TEST /;"	d
GR_GL_DEPTH_WRITEMASK	gpu/GrGLDefines.h	/^#define GR_GL_DEPTH_WRITEMASK /;"	d
GR_GL_DIFFUSE	gpu/GrGLDefines.h	/^#define GR_GL_DIFFUSE /;"	d
GR_GL_DITHER	gpu/GrGLDefines.h	/^#define GR_GL_DITHER /;"	d
GR_GL_DONT_CARE	gpu/GrGLDefines.h	/^#define GR_GL_DONT_CARE /;"	d
GR_GL_DRAW_FRAMEBUFFER	gpu/GrGLDefines.h	/^#define GR_GL_DRAW_FRAMEBUFFER /;"	d
GR_GL_DST_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_DST_ALPHA /;"	d
GR_GL_DST_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_DST_COLOR /;"	d
GR_GL_DYNAMIC_DRAW	gpu/GrGLDefines.h	/^#define GR_GL_DYNAMIC_DRAW /;"	d
GR_GL_EDGE_FLAG_ARRAY	gpu/GrGLDefines.h	/^#define GR_GL_EDGE_FLAG_ARRAY /;"	d
GR_GL_EDGE_FLAG_ARRAY_POINTER	gpu/GrGLDefines.h	/^#define GR_GL_EDGE_FLAG_ARRAY_POINTER /;"	d
GR_GL_EDGE_FLAG_ARRAY_STRIDE	gpu/GrGLDefines.h	/^#define GR_GL_EDGE_FLAG_ARRAY_STRIDE /;"	d
GR_GL_ELEMENT_ARRAY_BUFFER	gpu/GrGLDefines.h	/^#define GR_GL_ELEMENT_ARRAY_BUFFER /;"	d
GR_GL_ELEMENT_ARRAY_BUFFER_BINDING	gpu/GrGLDefines.h	/^#define GR_GL_ELEMENT_ARRAY_BUFFER_BINDING /;"	d
GR_GL_EMISSION	gpu/GrGLDefines.h	/^#define GR_GL_EMISSION /;"	d
GR_GL_EQUAL	gpu/GrGLDefines.h	/^#define GR_GL_EQUAL /;"	d
GR_GL_EXTENSIONS	gpu/GrGLDefines.h	/^#define GR_GL_EXTENSIONS /;"	d
GR_GL_EYE_LINEAR	gpu/GrGLDefines.h	/^#define GR_GL_EYE_LINEAR /;"	d
GR_GL_EYE_PLANE	gpu/GrGLDefines.h	/^#define GR_GL_EYE_PLANE /;"	d
GR_GL_FALSE	gpu/GrGLDefines.h	/^#define GR_GL_FALSE /;"	d
GR_GL_FASTEST	gpu/GrGLDefines.h	/^#define GR_GL_FASTEST /;"	d
GR_GL_FIXED	gpu/GrGLDefines.h	/^#define GR_GL_FIXED /;"	d
GR_GL_FLAT	gpu/GrGLDefines.h	/^#define GR_GL_FLAT /;"	d
GR_GL_FLOAT	gpu/GrGLDefines.h	/^#define GR_GL_FLOAT /;"	d
GR_GL_FLOAT_MAT2	gpu/GrGLDefines.h	/^#define GR_GL_FLOAT_MAT2 /;"	d
GR_GL_FLOAT_MAT3	gpu/GrGLDefines.h	/^#define GR_GL_FLOAT_MAT3 /;"	d
GR_GL_FLOAT_MAT4	gpu/GrGLDefines.h	/^#define GR_GL_FLOAT_MAT4 /;"	d
GR_GL_FLOAT_VEC2	gpu/GrGLDefines.h	/^#define GR_GL_FLOAT_VEC2 /;"	d
GR_GL_FLOAT_VEC3	gpu/GrGLDefines.h	/^#define GR_GL_FLOAT_VEC3 /;"	d
GR_GL_FLOAT_VEC4	gpu/GrGLDefines.h	/^#define GR_GL_FLOAT_VEC4 /;"	d
GR_GL_FRAGMENT_SHADER	gpu/GrGLDefines.h	/^#define GR_GL_FRAGMENT_SHADER /;"	d
GR_GL_FRAMEBUFFER	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER /;"	d
GR_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL /;"	d
GR_GL_FRAMEBUFFER_BINDING	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_BINDING /;"	d
GR_GL_FRAMEBUFFER_COMPLETE	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_COMPLETE /;"	d
GR_GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT /;"	d
GR_GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS /;"	d
GR_GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT /;"	d
GR_GL_FRAMEBUFFER_UNSUPPORTED	gpu/GrGLDefines.h	/^#define GR_GL_FRAMEBUFFER_UNSUPPORTED /;"	d
GR_GL_FRONT	gpu/GrGLDefines.h	/^#define GR_GL_FRONT /;"	d
GR_GL_FRONT_AND_BACK	gpu/GrGLDefines.h	/^#define GR_GL_FRONT_AND_BACK /;"	d
GR_GL_FRONT_FACE	gpu/GrGLDefines.h	/^#define GR_GL_FRONT_FACE /;"	d
GR_GL_FULL_READPIXELS_FASTER_THAN_PARTIAL	gpu/GrGLConfig.h	/^    #define GR_GL_FULL_READPIXELS_FASTER_THAN_PARTIAL /;"	d
GR_GL_FULL_READPIXELS_FASTER_THAN_PARTIAL	gpu/GrGLConfig_chrome.h	/^#define GR_GL_FULL_READPIXELS_FASTER_THAN_PARTIAL /;"	d
GR_GL_FUNCTION_TYPE	gpu/GrGLConfig.h	/^    #define GR_GL_FUNCTION_TYPE$/;"	d
GR_GL_FUNCTION_TYPE	gpu/GrGLInterface.h	/^    #define GR_GL_FUNCTION_TYPE$/;"	d
GR_GL_FUNC_ADD	gpu/GrGLDefines.h	/^#define GR_GL_FUNC_ADD /;"	d
GR_GL_FUNC_REVERSE_SUBTRACT	gpu/GrGLDefines.h	/^#define GR_GL_FUNC_REVERSE_SUBTRACT /;"	d
GR_GL_FUNC_SUBTRACT	gpu/GrGLDefines.h	/^#define GR_GL_FUNC_SUBTRACT /;"	d
GR_GL_GENERATE_MIPMAP_HINT	gpu/GrGLDefines.h	/^#define GR_GL_GENERATE_MIPMAP_HINT /;"	d
GR_GL_GEOMETRY_SHADER	gpu/GrGLDefines.h	/^#define GR_GL_GEOMETRY_SHADER /;"	d
GR_GL_GEQUAL	gpu/GrGLDefines.h	/^#define GR_GL_GEQUAL /;"	d
GR_GL_GET_ERROR	gpu/GrGLConfig.h	/^#define GR_GL_GET_ERROR(/;"	d
GR_GL_GREATER	gpu/GrGLDefines.h	/^#define GR_GL_GREATER /;"	d
GR_GL_GREEN	gpu/GrGLDefines.h	/^#define GR_GL_GREEN /;"	d
GR_GL_GREEN_BITS	gpu/GrGLDefines.h	/^#define GR_GL_GREEN_BITS /;"	d
GR_GL_GetFramebufferAttachmentParameteriv	gpu/GrGLConfig.h	/^#define GR_GL_GetFramebufferAttachmentParameteriv(/;"	d
GR_GL_GetIntegerv	gpu/GrGLConfig.h	/^#define GR_GL_GetIntegerv(/;"	d
GR_GL_GetRenderbufferParameteriv	gpu/GrGLConfig.h	/^#define GR_GL_GetRenderbufferParameteriv(/;"	d
GR_GL_GetTexLevelParameteriv	gpu/GrGLConfig.h	/^#define GR_GL_GetTexLevelParameteriv(/;"	d
GR_GL_HIGH_FLOAT	gpu/GrGLDefines.h	/^#define GR_GL_HIGH_FLOAT /;"	d
GR_GL_HIGH_INT	gpu/GrGLDefines.h	/^#define GR_GL_HIGH_INT /;"	d
GR_GL_IMPLEMENTATION_COLOR_READ_FORMAT	gpu/GrGLDefines.h	/^#define GR_GL_IMPLEMENTATION_COLOR_READ_FORMAT /;"	d
GR_GL_IMPLEMENTATION_COLOR_READ_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_IMPLEMENTATION_COLOR_READ_TYPE /;"	d
GR_GL_INCR	gpu/GrGLDefines.h	/^#define GR_GL_INCR /;"	d
GR_GL_INCR_WRAP	gpu/GrGLDefines.h	/^#define GR_GL_INCR_WRAP /;"	d
GR_GL_INDEX_ARRAY	gpu/GrGLDefines.h	/^#define GR_GL_INDEX_ARRAY /;"	d
GR_GL_INDEX_ARRAY_POINTER	gpu/GrGLDefines.h	/^#define GR_GL_INDEX_ARRAY_POINTER /;"	d
GR_GL_INDEX_ARRAY_STRIDE	gpu/GrGLDefines.h	/^#define GR_GL_INDEX_ARRAY_STRIDE /;"	d
GR_GL_INDEX_ARRAY_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_INDEX_ARRAY_TYPE /;"	d
GR_GL_INFO_LOG_LENGTH	gpu/GrGLDefines.h	/^#define GR_GL_INFO_LOG_LENGTH /;"	d
GR_GL_INIT_ZERO	gpu/GrGLConfig.h	/^#define GR_GL_INIT_ZERO /;"	d
GR_GL_INT	gpu/GrGLDefines.h	/^#define GR_GL_INT /;"	d
GR_GL_INTERPOLATE	gpu/GrGLDefines.h	/^#define GR_GL_INTERPOLATE /;"	d
GR_GL_INT_VEC2	gpu/GrGLDefines.h	/^#define GR_GL_INT_VEC2 /;"	d
GR_GL_INT_VEC3	gpu/GrGLDefines.h	/^#define GR_GL_INT_VEC3 /;"	d
GR_GL_INT_VEC4	gpu/GrGLDefines.h	/^#define GR_GL_INT_VEC4 /;"	d
GR_GL_INVALID_ENUM	gpu/GrGLDefines.h	/^#define GR_GL_INVALID_ENUM /;"	d
GR_GL_INVALID_FRAMEBUFFER_OPERATION	gpu/GrGLDefines.h	/^#define GR_GL_INVALID_FRAMEBUFFER_OPERATION /;"	d
GR_GL_INVALID_OPERATION	gpu/GrGLDefines.h	/^#define GR_GL_INVALID_OPERATION /;"	d
GR_GL_INVALID_VALUE	gpu/GrGLDefines.h	/^#define GR_GL_INVALID_VALUE /;"	d
GR_GL_INVERT	gpu/GrGLDefines.h	/^#define GR_GL_INVERT /;"	d
GR_GL_KEEP	gpu/GrGLDefines.h	/^#define GR_GL_KEEP /;"	d
GR_GL_LEQUAL	gpu/GrGLDefines.h	/^#define GR_GL_LEQUAL /;"	d
GR_GL_LESS	gpu/GrGLDefines.h	/^#define GR_GL_LESS /;"	d
GR_GL_LIGHT0	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT0 /;"	d
GR_GL_LIGHT1	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT1 /;"	d
GR_GL_LIGHT2	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT2 /;"	d
GR_GL_LIGHT3	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT3 /;"	d
GR_GL_LIGHT4	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT4 /;"	d
GR_GL_LIGHT5	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT5 /;"	d
GR_GL_LIGHT6	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT6 /;"	d
GR_GL_LIGHT7	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT7 /;"	d
GR_GL_LIGHTING	gpu/GrGLDefines.h	/^#define GR_GL_LIGHTING /;"	d
GR_GL_LIGHT_MODEL_AMBIENT	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT_MODEL_AMBIENT /;"	d
GR_GL_LIGHT_MODEL_LOCAL_VIEWER	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT_MODEL_LOCAL_VIEWER /;"	d
GR_GL_LIGHT_MODEL_TWO_SIDE	gpu/GrGLDefines.h	/^#define GR_GL_LIGHT_MODEL_TWO_SIDE /;"	d
GR_GL_LINEAR	gpu/GrGLDefines.h	/^#define GR_GL_LINEAR /;"	d
GR_GL_LINEAR_ATTENUATION	gpu/GrGLDefines.h	/^#define GR_GL_LINEAR_ATTENUATION /;"	d
GR_GL_LINEAR_MIPMAP_LINEAR	gpu/GrGLDefines.h	/^#define GR_GL_LINEAR_MIPMAP_LINEAR /;"	d
GR_GL_LINEAR_MIPMAP_NEAREST	gpu/GrGLDefines.h	/^#define GR_GL_LINEAR_MIPMAP_NEAREST /;"	d
GR_GL_LINES	gpu/GrGLDefines.h	/^#define GR_GL_LINES /;"	d
GR_GL_LINE_LOOP	gpu/GrGLDefines.h	/^#define GR_GL_LINE_LOOP /;"	d
GR_GL_LINE_SMOOTH	gpu/GrGLDefines.h	/^#define GR_GL_LINE_SMOOTH /;"	d
GR_GL_LINE_STIPPLE	gpu/GrGLDefines.h	/^#define GR_GL_LINE_STIPPLE /;"	d
GR_GL_LINE_STIPPLE_PATTERN	gpu/GrGLDefines.h	/^#define GR_GL_LINE_STIPPLE_PATTERN /;"	d
GR_GL_LINE_STIPPLE_REPEAT	gpu/GrGLDefines.h	/^#define GR_GL_LINE_STIPPLE_REPEAT /;"	d
GR_GL_LINE_STRIP	gpu/GrGLDefines.h	/^#define GR_GL_LINE_STRIP /;"	d
GR_GL_LINE_WIDTH	gpu/GrGLDefines.h	/^#define GR_GL_LINE_WIDTH /;"	d
GR_GL_LINE_WIDTH_GRANULARITY	gpu/GrGLDefines.h	/^#define GR_GL_LINE_WIDTH_GRANULARITY /;"	d
GR_GL_LINE_WIDTH_RANGE	gpu/GrGLDefines.h	/^#define GR_GL_LINE_WIDTH_RANGE /;"	d
GR_GL_LINK_STATUS	gpu/GrGLDefines.h	/^#define GR_GL_LINK_STATUS /;"	d
GR_GL_LOG_CALLS	gpu/GrGLConfig.h	/^    #define GR_GL_LOG_CALLS /;"	d
GR_GL_LOG_CALLS_IMPL	gpu/GrGLConfig.h	/^    #define GR_GL_LOG_CALLS_IMPL(/;"	d
GR_GL_LOG_CALLS_START	gpu/GrGLConfig.h	/^    #define GR_GL_LOG_CALLS_START /;"	d
GR_GL_LOW_FLOAT	gpu/GrGLDefines.h	/^#define GR_GL_LOW_FLOAT /;"	d
GR_GL_LOW_INT	gpu/GrGLDefines.h	/^#define GR_GL_LOW_INT /;"	d
GR_GL_LUMINANCE	gpu/GrGLDefines.h	/^#define GR_GL_LUMINANCE /;"	d
GR_GL_LUMINANCE_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_LUMINANCE_ALPHA /;"	d
GR_GL_MATRIX_MODE	gpu/GrGLDefines.h	/^#define GR_GL_MATRIX_MODE /;"	d
GR_GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS /;"	d
GR_GL_MAX_CUBE_MAP_TEXTURE_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_MAX_CUBE_MAP_TEXTURE_SIZE /;"	d
GR_GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_FRAGMENT_UNIFORM_COMPONENTS /;"	d
GR_GL_MAX_FRAGMENT_UNIFORM_VECTORS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_FRAGMENT_UNIFORM_VECTORS /;"	d
GR_GL_MAX_RENDERBUFFER_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_MAX_RENDERBUFFER_SIZE /;"	d
GR_GL_MAX_SAMPLES	gpu/GrGLDefines.h	/^#define GR_GL_MAX_SAMPLES /;"	d
GR_GL_MAX_TEXTURE_IMAGE_UNITS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_TEXTURE_IMAGE_UNITS /;"	d
GR_GL_MAX_TEXTURE_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_MAX_TEXTURE_SIZE /;"	d
GR_GL_MAX_TEXTURE_UNITS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_TEXTURE_UNITS /;"	d
GR_GL_MAX_VARYING_VECTORS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_VARYING_VECTORS /;"	d
GR_GL_MAX_VERTEX_ATTRIBS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_VERTEX_ATTRIBS /;"	d
GR_GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS /;"	d
GR_GL_MAX_VERTEX_UNIFORM_COMPONENTS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_VERTEX_UNIFORM_COMPONENTS /;"	d
GR_GL_MAX_VERTEX_UNIFORM_VECTORS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_VERTEX_UNIFORM_VECTORS /;"	d
GR_GL_MAX_VIEWPORT_DIMS	gpu/GrGLDefines.h	/^#define GR_GL_MAX_VIEWPORT_DIMS /;"	d
GR_GL_MEDIUM_FLOAT	gpu/GrGLDefines.h	/^#define GR_GL_MEDIUM_FLOAT /;"	d
GR_GL_MEDIUM_INT	gpu/GrGLDefines.h	/^#define GR_GL_MEDIUM_INT /;"	d
GR_GL_MIRRORED_REPEAT	gpu/GrGLDefines.h	/^#define GR_GL_MIRRORED_REPEAT /;"	d
GR_GL_MODELVIEW	gpu/GrGLDefines.h	/^#define GR_GL_MODELVIEW /;"	d
GR_GL_MODULATE	gpu/GrGLDefines.h	/^#define GR_GL_MODULATE /;"	d
GR_GL_MULTISAMPLE	gpu/GrGLDefines.h	/^#define GR_GL_MULTISAMPLE /;"	d
GR_GL_N3F_V3F	gpu/GrGLDefines.h	/^#define GR_GL_N3F_V3F /;"	d
GR_GL_NEAREST	gpu/GrGLDefines.h	/^#define GR_GL_NEAREST /;"	d
GR_GL_NEAREST_MIPMAP_LINEAR	gpu/GrGLDefines.h	/^#define GR_GL_NEAREST_MIPMAP_LINEAR /;"	d
GR_GL_NEAREST_MIPMAP_NEAREST	gpu/GrGLDefines.h	/^#define GR_GL_NEAREST_MIPMAP_NEAREST /;"	d
GR_GL_NEVER	gpu/GrGLDefines.h	/^#define GR_GL_NEVER /;"	d
GR_GL_NICEST	gpu/GrGLDefines.h	/^#define GR_GL_NICEST /;"	d
GR_GL_NONE	gpu/GrGLDefines.h	/^#define GR_GL_NONE /;"	d
GR_GL_NORMALIZE	gpu/GrGLDefines.h	/^#define GR_GL_NORMALIZE /;"	d
GR_GL_NORMAL_ARRAY	gpu/GrGLDefines.h	/^#define GR_GL_NORMAL_ARRAY /;"	d
GR_GL_NORMAL_ARRAY_POINTER	gpu/GrGLDefines.h	/^#define GR_GL_NORMAL_ARRAY_POINTER /;"	d
GR_GL_NORMAL_ARRAY_STRIDE	gpu/GrGLDefines.h	/^#define GR_GL_NORMAL_ARRAY_STRIDE /;"	d
GR_GL_NORMAL_ARRAY_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_NORMAL_ARRAY_TYPE /;"	d
GR_GL_NOTEQUAL	gpu/GrGLDefines.h	/^#define GR_GL_NOTEQUAL /;"	d
GR_GL_NO_CONSTANT_ATTRIBUTES	gpu/GrGLConfig.h	/^    #define GR_GL_NO_CONSTANT_ATTRIBUTES /;"	d
GR_GL_NO_CONSTANT_ATTRIBUTES	gpu/GrGLConfig_chrome.h	/^#define GR_GL_NO_CONSTANT_ATTRIBUTES /;"	d
GR_GL_NO_ERROR	gpu/GrGLDefines.h	/^#define GR_GL_NO_ERROR /;"	d
GR_GL_NUM_COMPRESSED_TEXTURE_FORMATS	gpu/GrGLDefines.h	/^#define GR_GL_NUM_COMPRESSED_TEXTURE_FORMATS /;"	d
GR_GL_NUM_SHADER_BINARY_FORMATS	gpu/GrGLDefines.h	/^#define GR_GL_NUM_SHADER_BINARY_FORMATS /;"	d
GR_GL_OBJECT_LINEAR	gpu/GrGLDefines.h	/^#define GR_GL_OBJECT_LINEAR /;"	d
GR_GL_OBJECT_PLANE	gpu/GrGLDefines.h	/^#define GR_GL_OBJECT_PLANE /;"	d
GR_GL_ONE	gpu/GrGLDefines.h	/^#define GR_GL_ONE /;"	d
GR_GL_ONE_MINUS_CONSTANT_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_ONE_MINUS_CONSTANT_ALPHA /;"	d
GR_GL_ONE_MINUS_CONSTANT_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_ONE_MINUS_CONSTANT_COLOR /;"	d
GR_GL_ONE_MINUS_DST_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_ONE_MINUS_DST_ALPHA /;"	d
GR_GL_ONE_MINUS_DST_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_ONE_MINUS_DST_COLOR /;"	d
GR_GL_ONE_MINUS_SRC1_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_ONE_MINUS_SRC1_ALPHA /;"	d
GR_GL_ONE_MINUS_SRC1_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_ONE_MINUS_SRC1_COLOR /;"	d
GR_GL_ONE_MINUS_SRC_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_ONE_MINUS_SRC_ALPHA /;"	d
GR_GL_ONE_MINUS_SRC_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_ONE_MINUS_SRC_COLOR /;"	d
GR_GL_OPERAND0_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_OPERAND0_ALPHA /;"	d
GR_GL_OPERAND0_RGB	gpu/GrGLDefines.h	/^#define GR_GL_OPERAND0_RGB /;"	d
GR_GL_OPERAND1_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_OPERAND1_ALPHA /;"	d
GR_GL_OPERAND1_RGB	gpu/GrGLDefines.h	/^#define GR_GL_OPERAND1_RGB /;"	d
GR_GL_OPERAND2_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_OPERAND2_ALPHA /;"	d
GR_GL_OPERAND2_RGB	gpu/GrGLDefines.h	/^#define GR_GL_OPERAND2_RGB /;"	d
GR_GL_OUT_OF_MEMORY	gpu/GrGLDefines.h	/^#define GR_GL_OUT_OF_MEMORY /;"	d
GR_GL_PACK_ALIGNMENT	gpu/GrGLDefines.h	/^#define GR_GL_PACK_ALIGNMENT /;"	d
GR_GL_PACK_REVERSE_ROW_ORDER	gpu/GrGLDefines.h	/^#define GR_GL_PACK_REVERSE_ROW_ORDER /;"	d
GR_GL_PACK_ROW_LENGTH	gpu/GrGLDefines.h	/^#define GR_GL_PACK_ROW_LENGTH /;"	d
GR_GL_PALETTE8_RGBA8	gpu/GrGLDefines.h	/^#define GR_GL_PALETTE8_RGBA8 /;"	d
GR_GL_PER_GL_FUNC_CALLBACK	gpu/GrGLConfig.h	/^    #define GR_GL_PER_GL_FUNC_CALLBACK /;"	d
GR_GL_PER_GL_FUNC_CALLBACK	gpu/GrGLConfig_chrome.h	/^#define GR_GL_PER_GL_FUNC_CALLBACK /;"	d
GR_GL_POINTS	gpu/GrGLDefines.h	/^#define GR_GL_POINTS /;"	d
GR_GL_POINT_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_POINT_SIZE /;"	d
GR_GL_POINT_SIZE_GRANULARITY	gpu/GrGLDefines.h	/^#define GR_GL_POINT_SIZE_GRANULARITY /;"	d
GR_GL_POINT_SIZE_RANGE	gpu/GrGLDefines.h	/^#define GR_GL_POINT_SIZE_RANGE /;"	d
GR_GL_POINT_SMOOTH	gpu/GrGLDefines.h	/^#define GR_GL_POINT_SMOOTH /;"	d
GR_GL_POLYGON_OFFSET_FACTOR	gpu/GrGLDefines.h	/^#define GR_GL_POLYGON_OFFSET_FACTOR /;"	d
GR_GL_POLYGON_OFFSET_FILL	gpu/GrGLDefines.h	/^#define GR_GL_POLYGON_OFFSET_FILL /;"	d
GR_GL_POLYGON_OFFSET_UNITS	gpu/GrGLDefines.h	/^#define GR_GL_POLYGON_OFFSET_UNITS /;"	d
GR_GL_POSITION	gpu/GrGLDefines.h	/^#define GR_GL_POSITION /;"	d
GR_GL_PREVIOUS	gpu/GrGLDefines.h	/^#define GR_GL_PREVIOUS /;"	d
GR_GL_PRIMARY_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_PRIMARY_COLOR /;"	d
GR_GL_PRIMITIVES_GENERATED	gpu/GrGLDefines.h	/^#define GR_GL_PRIMITIVES_GENERATED /;"	d
GR_GL_PROJECTION	gpu/GrGLDefines.h	/^#define GR_GL_PROJECTION /;"	d
GR_GL_Q	gpu/GrGLDefines.h	/^#define GR_GL_Q /;"	d
GR_GL_QUADRATIC_ATTENUATION	gpu/GrGLDefines.h	/^#define GR_GL_QUADRATIC_ATTENUATION /;"	d
GR_GL_QUERY_COUNTER_BITS	gpu/GrGLDefines.h	/^#define GR_GL_QUERY_COUNTER_BITS /;"	d
GR_GL_QUERY_RESULT	gpu/GrGLDefines.h	/^#define GR_GL_QUERY_RESULT /;"	d
GR_GL_QUERY_RESULT_AVAILABLE	gpu/GrGLDefines.h	/^#define GR_GL_QUERY_RESULT_AVAILABLE /;"	d
GR_GL_R	gpu/GrGLDefines.h	/^#define GR_GL_R /;"	d
GR_GL_READ_FRAMEBUFFER	gpu/GrGLDefines.h	/^#define GR_GL_READ_FRAMEBUFFER /;"	d
GR_GL_RED	gpu/GrGLDefines.h	/^#define GR_GL_RED /;"	d
GR_GL_RED_BITS	gpu/GrGLDefines.h	/^#define GR_GL_RED_BITS /;"	d
GR_GL_RENDERBUFFER	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER /;"	d
GR_GL_RENDERBUFFER_ALPHA_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_ALPHA_SIZE /;"	d
GR_GL_RENDERBUFFER_BINDING	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_BINDING /;"	d
GR_GL_RENDERBUFFER_BLUE_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_BLUE_SIZE /;"	d
GR_GL_RENDERBUFFER_DEPTH_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_DEPTH_SIZE /;"	d
GR_GL_RENDERBUFFER_GREEN_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_GREEN_SIZE /;"	d
GR_GL_RENDERBUFFER_HEIGHT	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_HEIGHT /;"	d
GR_GL_RENDERBUFFER_INTERNAL_FORMAT	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_INTERNAL_FORMAT /;"	d
GR_GL_RENDERBUFFER_RED_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_RED_SIZE /;"	d
GR_GL_RENDERBUFFER_STENCIL_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_STENCIL_SIZE /;"	d
GR_GL_RENDERBUFFER_WIDTH	gpu/GrGLDefines.h	/^#define GR_GL_RENDERBUFFER_WIDTH /;"	d
GR_GL_RENDERER	gpu/GrGLDefines.h	/^#define GR_GL_RENDERER /;"	d
GR_GL_REPEAT	gpu/GrGLDefines.h	/^#define GR_GL_REPEAT /;"	d
GR_GL_REPLACE	gpu/GrGLDefines.h	/^#define GR_GL_REPLACE /;"	d
GR_GL_RGB	gpu/GrGLDefines.h	/^#define GR_GL_RGB /;"	d
GR_GL_RGB565	gpu/GrGLDefines.h	/^#define GR_GL_RGB565 /;"	d
GR_GL_RGB5_A1	gpu/GrGLDefines.h	/^#define GR_GL_RGB5_A1 /;"	d
GR_GL_RGB8	gpu/GrGLDefines.h	/^#define GR_GL_RGB8 /;"	d
GR_GL_RGBA	gpu/GrGLDefines.h	/^#define GR_GL_RGBA /;"	d
GR_GL_RGBA4	gpu/GrGLDefines.h	/^#define GR_GL_RGBA4 /;"	d
GR_GL_RGBA8	gpu/GrGLDefines.h	/^#define GR_GL_RGBA8 /;"	d
GR_GL_RGBA_8888_PIXEL_OPS_SLOW	gpu/GrGLConfig.h	/^    #define GR_GL_RGBA_8888_PIXEL_OPS_SLOW /;"	d
GR_GL_RGBA_8888_PIXEL_OPS_SLOW	gpu/GrGLConfig_chrome.h	/^#define GR_GL_RGBA_8888_PIXEL_OPS_SLOW /;"	d
GR_GL_RGB_SCALE	gpu/GrGLDefines.h	/^#define GR_GL_RGB_SCALE /;"	d
GR_GL_S	gpu/GrGLDefines.h	/^#define GR_GL_S /;"	d
GR_GL_SAMPLER_2D	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLER_2D /;"	d
GR_GL_SAMPLER_CUBE	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLER_CUBE /;"	d
GR_GL_SAMPLES	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLES /;"	d
GR_GL_SAMPLES_PASSED	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLES_PASSED /;"	d
GR_GL_SAMPLE_ALPHA_TO_COVERAGE	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLE_ALPHA_TO_COVERAGE /;"	d
GR_GL_SAMPLE_BUFFERS	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLE_BUFFERS /;"	d
GR_GL_SAMPLE_COVERAGE	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLE_COVERAGE /;"	d
GR_GL_SAMPLE_COVERAGE_INVERT	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLE_COVERAGE_INVERT /;"	d
GR_GL_SAMPLE_COVERAGE_VALUE	gpu/GrGLDefines.h	/^#define GR_GL_SAMPLE_COVERAGE_VALUE /;"	d
GR_GL_SCISSOR_BOX	gpu/GrGLDefines.h	/^#define GR_GL_SCISSOR_BOX /;"	d
GR_GL_SCISSOR_TEST	gpu/GrGLDefines.h	/^#define GR_GL_SCISSOR_TEST /;"	d
GR_GL_SHADER_BINARY_FORMATS	gpu/GrGLDefines.h	/^#define GR_GL_SHADER_BINARY_FORMATS /;"	d
GR_GL_SHADER_COMPILER	gpu/GrGLDefines.h	/^#define GR_GL_SHADER_COMPILER /;"	d
GR_GL_SHADER_SOURCE_LENGTH	gpu/GrGLDefines.h	/^#define GR_GL_SHADER_SOURCE_LENGTH /;"	d
GR_GL_SHADER_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_SHADER_TYPE /;"	d
GR_GL_SHADE_MODEL	gpu/GrGLDefines.h	/^#define GR_GL_SHADE_MODEL /;"	d
GR_GL_SHADING_LANGUAGE_VERSION	gpu/GrGLDefines.h	/^#define GR_GL_SHADING_LANGUAGE_VERSION /;"	d
GR_GL_SHININESS	gpu/GrGLDefines.h	/^#define GR_GL_SHININESS /;"	d
GR_GL_SHORT	gpu/GrGLDefines.h	/^#define GR_GL_SHORT /;"	d
GR_GL_SMOOTH	gpu/GrGLDefines.h	/^#define GR_GL_SMOOTH /;"	d
GR_GL_SOURCE0_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_SOURCE0_ALPHA /;"	d
GR_GL_SOURCE0_RGB	gpu/GrGLDefines.h	/^#define GR_GL_SOURCE0_RGB /;"	d
GR_GL_SOURCE1_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_SOURCE1_ALPHA /;"	d
GR_GL_SOURCE1_RGB	gpu/GrGLDefines.h	/^#define GR_GL_SOURCE1_RGB /;"	d
GR_GL_SOURCE2_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_SOURCE2_ALPHA /;"	d
GR_GL_SOURCE2_RGB	gpu/GrGLDefines.h	/^#define GR_GL_SOURCE2_RGB /;"	d
GR_GL_SPECULAR	gpu/GrGLDefines.h	/^#define GR_GL_SPECULAR /;"	d
GR_GL_SPHERE_MAP	gpu/GrGLDefines.h	/^#define GR_GL_SPHERE_MAP /;"	d
GR_GL_SPOT_CUTOFF	gpu/GrGLDefines.h	/^#define GR_GL_SPOT_CUTOFF /;"	d
GR_GL_SPOT_DIRECTION	gpu/GrGLDefines.h	/^#define GR_GL_SPOT_DIRECTION /;"	d
GR_GL_SPOT_EXPONENT	gpu/GrGLDefines.h	/^#define GR_GL_SPOT_EXPONENT /;"	d
GR_GL_SRC0_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_SRC0_ALPHA /;"	d
GR_GL_SRC0_RGB	gpu/GrGLDefines.h	/^#define GR_GL_SRC0_RGB /;"	d
GR_GL_SRC1_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_SRC1_ALPHA /;"	d
GR_GL_SRC1_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_SRC1_COLOR /;"	d
GR_GL_SRC1_RGB	gpu/GrGLDefines.h	/^#define GR_GL_SRC1_RGB /;"	d
GR_GL_SRC2_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_SRC2_ALPHA /;"	d
GR_GL_SRC2_RGB	gpu/GrGLDefines.h	/^#define GR_GL_SRC2_RGB /;"	d
GR_GL_SRC_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_SRC_ALPHA /;"	d
GR_GL_SRC_ALPHA_SATURATE	gpu/GrGLDefines.h	/^#define GR_GL_SRC_ALPHA_SATURATE /;"	d
GR_GL_SRC_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_SRC_COLOR /;"	d
GR_GL_SRGB	gpu/GrGLDefines.h	/^#define GR_GL_SRGB /;"	d
GR_GL_SRGB8	gpu/GrGLDefines.h	/^#define GR_GL_SRGB8 /;"	d
GR_GL_SRGB8_ALPHA8	gpu/GrGLDefines.h	/^#define GR_GL_SRGB8_ALPHA8 /;"	d
GR_GL_SRGB_ALPHA	gpu/GrGLDefines.h	/^#define GR_GL_SRGB_ALPHA /;"	d
GR_GL_STATIC_DRAW	gpu/GrGLDefines.h	/^#define GR_GL_STATIC_DRAW /;"	d
GR_GL_STENCIL_ATTACHMENT	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_ATTACHMENT /;"	d
GR_GL_STENCIL_BACK_FAIL	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BACK_FAIL /;"	d
GR_GL_STENCIL_BACK_FUNC	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BACK_FUNC /;"	d
GR_GL_STENCIL_BACK_PASS_DEPTH_FAIL	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BACK_PASS_DEPTH_FAIL /;"	d
GR_GL_STENCIL_BACK_PASS_DEPTH_PASS	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BACK_PASS_DEPTH_PASS /;"	d
GR_GL_STENCIL_BACK_REF	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BACK_REF /;"	d
GR_GL_STENCIL_BACK_VALUE_MASK	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BACK_VALUE_MASK /;"	d
GR_GL_STENCIL_BACK_WRITEMASK	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BACK_WRITEMASK /;"	d
GR_GL_STENCIL_BITS	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BITS /;"	d
GR_GL_STENCIL_BUFFER_BIT	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_BUFFER_BIT /;"	d
GR_GL_STENCIL_CLEAR_VALUE	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_CLEAR_VALUE /;"	d
GR_GL_STENCIL_FAIL	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_FAIL /;"	d
GR_GL_STENCIL_FUNC	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_FUNC /;"	d
GR_GL_STENCIL_INDEX	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_INDEX /;"	d
GR_GL_STENCIL_INDEX16	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_INDEX16 /;"	d
GR_GL_STENCIL_INDEX4	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_INDEX4 /;"	d
GR_GL_STENCIL_INDEX8	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_INDEX8 /;"	d
GR_GL_STENCIL_PASS_DEPTH_FAIL	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_PASS_DEPTH_FAIL /;"	d
GR_GL_STENCIL_PASS_DEPTH_PASS	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_PASS_DEPTH_PASS /;"	d
GR_GL_STENCIL_REF	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_REF /;"	d
GR_GL_STENCIL_TEST	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_TEST /;"	d
GR_GL_STENCIL_VALUE_MASK	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_VALUE_MASK /;"	d
GR_GL_STENCIL_WRITEMASK	gpu/GrGLDefines.h	/^#define GR_GL_STENCIL_WRITEMASK /;"	d
GR_GL_STREAM_DRAW	gpu/GrGLDefines.h	/^#define GR_GL_STREAM_DRAW /;"	d
GR_GL_SUBPIXEL_BITS	gpu/GrGLDefines.h	/^#define GR_GL_SUBPIXEL_BITS /;"	d
GR_GL_SUBTRACT	gpu/GrGLDefines.h	/^#define GR_GL_SUBTRACT /;"	d
GR_GL_T	gpu/GrGLDefines.h	/^#define GR_GL_T /;"	d
GR_GL_T2F_C3F_V3F	gpu/GrGLDefines.h	/^#define GR_GL_T2F_C3F_V3F /;"	d
GR_GL_T2F_C4F_N3F_V3F	gpu/GrGLDefines.h	/^#define GR_GL_T2F_C4F_N3F_V3F /;"	d
GR_GL_T2F_C4UB_V3F	gpu/GrGLDefines.h	/^#define GR_GL_T2F_C4UB_V3F /;"	d
GR_GL_T2F_N3F_V3F	gpu/GrGLDefines.h	/^#define GR_GL_T2F_N3F_V3F /;"	d
GR_GL_T2F_V3F	gpu/GrGLDefines.h	/^#define GR_GL_T2F_V3F /;"	d
GR_GL_T4F_C4F_N3F_V4F	gpu/GrGLDefines.h	/^#define GR_GL_T4F_C4F_N3F_V4F /;"	d
GR_GL_T4F_V4F	gpu/GrGLDefines.h	/^#define GR_GL_T4F_V4F /;"	d
GR_GL_TEXTURE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE /;"	d
GR_GL_TEXTURE0	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE0 /;"	d
GR_GL_TEXTURE1	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE1 /;"	d
GR_GL_TEXTURE10	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE10 /;"	d
GR_GL_TEXTURE11	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE11 /;"	d
GR_GL_TEXTURE12	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE12 /;"	d
GR_GL_TEXTURE13	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE13 /;"	d
GR_GL_TEXTURE14	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE14 /;"	d
GR_GL_TEXTURE15	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE15 /;"	d
GR_GL_TEXTURE16	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE16 /;"	d
GR_GL_TEXTURE17	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE17 /;"	d
GR_GL_TEXTURE18	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE18 /;"	d
GR_GL_TEXTURE19	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE19 /;"	d
GR_GL_TEXTURE2	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE2 /;"	d
GR_GL_TEXTURE20	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE20 /;"	d
GR_GL_TEXTURE21	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE21 /;"	d
GR_GL_TEXTURE22	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE22 /;"	d
GR_GL_TEXTURE23	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE23 /;"	d
GR_GL_TEXTURE24	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE24 /;"	d
GR_GL_TEXTURE25	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE25 /;"	d
GR_GL_TEXTURE26	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE26 /;"	d
GR_GL_TEXTURE27	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE27 /;"	d
GR_GL_TEXTURE28	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE28 /;"	d
GR_GL_TEXTURE29	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE29 /;"	d
GR_GL_TEXTURE3	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE3 /;"	d
GR_GL_TEXTURE30	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE30 /;"	d
GR_GL_TEXTURE31	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE31 /;"	d
GR_GL_TEXTURE4	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE4 /;"	d
GR_GL_TEXTURE5	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE5 /;"	d
GR_GL_TEXTURE6	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE6 /;"	d
GR_GL_TEXTURE7	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE7 /;"	d
GR_GL_TEXTURE8	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE8 /;"	d
GR_GL_TEXTURE9	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE9 /;"	d
GR_GL_TEXTURE_1D	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_1D /;"	d
GR_GL_TEXTURE_2D	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_2D /;"	d
GR_GL_TEXTURE_ALPHA_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_ALPHA_SIZE /;"	d
GR_GL_TEXTURE_BINDING_2D	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_BINDING_2D /;"	d
GR_GL_TEXTURE_BINDING_CUBE_MAP	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_BINDING_CUBE_MAP /;"	d
GR_GL_TEXTURE_BLUE_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_BLUE_SIZE /;"	d
GR_GL_TEXTURE_BORDER	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_BORDER /;"	d
GR_GL_TEXTURE_BORDER_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_BORDER_COLOR /;"	d
GR_GL_TEXTURE_COMPONENTS	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_COMPONENTS /;"	d
GR_GL_TEXTURE_COORD_ARRAY	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_COORD_ARRAY /;"	d
GR_GL_TEXTURE_COORD_ARRAY_POINTER	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_COORD_ARRAY_POINTER /;"	d
GR_GL_TEXTURE_COORD_ARRAY_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_COORD_ARRAY_SIZE /;"	d
GR_GL_TEXTURE_COORD_ARRAY_STRIDE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_COORD_ARRAY_STRIDE /;"	d
GR_GL_TEXTURE_COORD_ARRAY_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_COORD_ARRAY_TYPE /;"	d
GR_GL_TEXTURE_CUBE_MAP	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_CUBE_MAP /;"	d
GR_GL_TEXTURE_CUBE_MAP_NEGATIVE_X	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_CUBE_MAP_NEGATIVE_X /;"	d
GR_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y /;"	d
GR_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z /;"	d
GR_GL_TEXTURE_CUBE_MAP_POSITIVE_X	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_CUBE_MAP_POSITIVE_X /;"	d
GR_GL_TEXTURE_CUBE_MAP_POSITIVE_Y	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_CUBE_MAP_POSITIVE_Y /;"	d
GR_GL_TEXTURE_CUBE_MAP_POSITIVE_Z	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_CUBE_MAP_POSITIVE_Z /;"	d
GR_GL_TEXTURE_ENV	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_ENV /;"	d
GR_GL_TEXTURE_ENV_COLOR	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_ENV_COLOR /;"	d
GR_GL_TEXTURE_ENV_MODE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_ENV_MODE /;"	d
GR_GL_TEXTURE_GEN_MODE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_GEN_MODE /;"	d
GR_GL_TEXTURE_GEN_Q	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_GEN_Q /;"	d
GR_GL_TEXTURE_GEN_R	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_GEN_R /;"	d
GR_GL_TEXTURE_GEN_S	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_GEN_S /;"	d
GR_GL_TEXTURE_GEN_T	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_GEN_T /;"	d
GR_GL_TEXTURE_GREEN_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_GREEN_SIZE /;"	d
GR_GL_TEXTURE_HEIGHT	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_HEIGHT /;"	d
GR_GL_TEXTURE_INTENSITY_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_INTENSITY_SIZE /;"	d
GR_GL_TEXTURE_INTERNAL_FORMAT	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_INTERNAL_FORMAT /;"	d
GR_GL_TEXTURE_LUMINANCE_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_LUMINANCE_SIZE /;"	d
GR_GL_TEXTURE_MAG_FILTER	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_MAG_FILTER /;"	d
GR_GL_TEXTURE_MIN_FILTER	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_MIN_FILTER /;"	d
GR_GL_TEXTURE_RED_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_RED_SIZE /;"	d
GR_GL_TEXTURE_SWIZZLE_A	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_SWIZZLE_A /;"	d
GR_GL_TEXTURE_SWIZZLE_B	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_SWIZZLE_B /;"	d
GR_GL_TEXTURE_SWIZZLE_G	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_SWIZZLE_G /;"	d
GR_GL_TEXTURE_SWIZZLE_R	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_SWIZZLE_R /;"	d
GR_GL_TEXTURE_SWIZZLE_RGBA	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_SWIZZLE_RGBA /;"	d
GR_GL_TEXTURE_USAGE	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_USAGE /;"	d
GR_GL_TEXTURE_WIDTH	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_WIDTH /;"	d
GR_GL_TEXTURE_WRAP_S	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_WRAP_S /;"	d
GR_GL_TEXTURE_WRAP_T	gpu/GrGLDefines.h	/^#define GR_GL_TEXTURE_WRAP_T /;"	d
GR_GL_TEXT_TEXTURE_NORMALIZED	gpu/GrGLConfig.h	/^    #define GR_GL_TEXT_TEXTURE_NORMALIZED /;"	d
GR_GL_TIMESTAMP	gpu/GrGLDefines.h	/^#define GR_GL_TIMESTAMP /;"	d
GR_GL_TIME_ELAPSED	gpu/GrGLDefines.h	/^#define GR_GL_TIME_ELAPSED /;"	d
GR_GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	gpu/GrGLDefines.h	/^#define GR_GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN /;"	d
GR_GL_TRIANGLES	gpu/GrGLDefines.h	/^#define GR_GL_TRIANGLES /;"	d
GR_GL_TRIANGLE_FAN	gpu/GrGLDefines.h	/^#define GR_GL_TRIANGLE_FAN /;"	d
GR_GL_TRIANGLE_STRIP	gpu/GrGLDefines.h	/^#define GR_GL_TRIANGLE_STRIP /;"	d
GR_GL_TRUE	gpu/GrGLDefines.h	/^#define GR_GL_TRUE /;"	d
GR_GL_UNPACK_ALIGNMENT	gpu/GrGLDefines.h	/^#define GR_GL_UNPACK_ALIGNMENT /;"	d
GR_GL_UNPACK_FLIP_Y	gpu/GrGLDefines.h	/^#define GR_GL_UNPACK_FLIP_Y /;"	d
GR_GL_UNPACK_ROW_LENGTH	gpu/GrGLDefines.h	/^#define GR_GL_UNPACK_ROW_LENGTH /;"	d
GR_GL_UNSIGNED_BYTE	gpu/GrGLDefines.h	/^#define GR_GL_UNSIGNED_BYTE /;"	d
GR_GL_UNSIGNED_INT	gpu/GrGLDefines.h	/^#define GR_GL_UNSIGNED_INT /;"	d
GR_GL_UNSIGNED_SHORT	gpu/GrGLDefines.h	/^#define GR_GL_UNSIGNED_SHORT /;"	d
GR_GL_UNSIGNED_SHORT_4_4_4_4	gpu/GrGLDefines.h	/^#define GR_GL_UNSIGNED_SHORT_4_4_4_4 /;"	d
GR_GL_UNSIGNED_SHORT_5_5_5_1	gpu/GrGLDefines.h	/^#define GR_GL_UNSIGNED_SHORT_5_5_5_1 /;"	d
GR_GL_UNSIGNED_SHORT_5_6_5	gpu/GrGLDefines.h	/^#define GR_GL_UNSIGNED_SHORT_5_6_5 /;"	d
GR_GL_USE_BUFFER_DATA_NULL_HINT	gpu/GrGLConfig.h	/^    #define GR_GL_USE_BUFFER_DATA_NULL_HINT /;"	d
GR_GL_USE_BUFFER_DATA_NULL_HINT	gpu/GrGLConfig_chrome.h	/^#define GR_GL_USE_BUFFER_DATA_NULL_HINT /;"	d
GR_GL_V2F	gpu/GrGLDefines.h	/^#define GR_GL_V2F /;"	d
GR_GL_V3F	gpu/GrGLDefines.h	/^#define GR_GL_V3F /;"	d
GR_GL_VALIDATE_STATUS	gpu/GrGLDefines.h	/^#define GR_GL_VALIDATE_STATUS /;"	d
GR_GL_VENDOR	gpu/GrGLDefines.h	/^#define GR_GL_VENDOR /;"	d
GR_GL_VER	gpu/GrGLInterface.h	/^#define GR_GL_VER(/;"	d
GR_GL_VERSION	gpu/GrGLDefines.h	/^#define GR_GL_VERSION /;"	d
GR_GL_VERTEX_ARRAY	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ARRAY /;"	d
GR_GL_VERTEX_ARRAY_POINTER	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ARRAY_POINTER /;"	d
GR_GL_VERTEX_ARRAY_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ARRAY_SIZE /;"	d
GR_GL_VERTEX_ARRAY_STRIDE	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ARRAY_STRIDE /;"	d
GR_GL_VERTEX_ARRAY_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ARRAY_TYPE /;"	d
GR_GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING /;"	d
GR_GL_VERTEX_ATTRIB_ARRAY_ENABLED	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ATTRIB_ARRAY_ENABLED /;"	d
GR_GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ATTRIB_ARRAY_NORMALIZED /;"	d
GR_GL_VERTEX_ATTRIB_ARRAY_POINTER	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ATTRIB_ARRAY_POINTER /;"	d
GR_GL_VERTEX_ATTRIB_ARRAY_SIZE	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ATTRIB_ARRAY_SIZE /;"	d
GR_GL_VERTEX_ATTRIB_ARRAY_STRIDE	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ATTRIB_ARRAY_STRIDE /;"	d
GR_GL_VERTEX_ATTRIB_ARRAY_TYPE	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_ATTRIB_ARRAY_TYPE /;"	d
GR_GL_VERTEX_SHADER	gpu/GrGLDefines.h	/^#define GR_GL_VERTEX_SHADER /;"	d
GR_GL_VIEWPORT	gpu/GrGLDefines.h	/^#define GR_GL_VIEWPORT /;"	d
GR_GL_WRITE_ONLY	gpu/GrGLDefines.h	/^#define GR_GL_WRITE_ONLY /;"	d
GR_GL_ZERO	gpu/GrGLDefines.h	/^#define GR_GL_ZERO /;"	d
GR_IMPLEMENTATION	gpu/GrConfig.h	/^    #define GR_IMPLEMENTATION /;"	d
GR_IOS_BUILD	gpu/GrConfig.h	/^        #define GR_IOS_BUILD /;"	d
GR_IOS_BUILD	gpu/GrConfig.h	/^        #undef GR_IOS_BUILD$/;"	d
GR_IOS_BUILD	gpu/GrConfig.h	/^    #define GR_IOS_BUILD /;"	d
GR_Int32Max	gpu/GrScalar.h	/^#define GR_Int32Max /;"	d
GR_Int32Min	gpu/GrScalar.h	/^#define GR_Int32Min /;"	d
GR_LINUX_BUILD	gpu/GrConfig.h	/^        #define GR_LINUX_BUILD /;"	d
GR_LINUX_BUILD	gpu/GrConfig.h	/^        #undef GR_LINUX_BUILD$/;"	d
GR_LINUX_BUILD	gpu/GrConfig.h	/^    #define GR_LINUX_BUILD /;"	d
GR_MAC_BUILD	gpu/GrConfig.h	/^        #define GR_MAC_BUILD /;"	d
GR_MAC_BUILD	gpu/GrConfig.h	/^        #undef GR_MAC_BUILD$/;"	d
GR_MAC_BUILD	gpu/GrConfig.h	/^    #define GR_MAC_BUILD /;"	d
GR_MAKE_BITFIELD_OPS	gpu/GrTypes.h	/^#define GR_MAKE_BITFIELD_OPS(/;"	d
GR_QNX_BUILD	gpu/GrConfig.h	/^        #define GR_QNX_BUILD /;"	d
GR_QNX_BUILD	gpu/GrConfig.h	/^        #undef GR_QNX_BUILD$/;"	d
GR_QNX_BUILD	gpu/GrConfig.h	/^    #define GR_QNX_BUILD /;"	d
GR_RELEASE	gpu/GrConfig.h	/^    #define GR_RELEASE /;"	d
GR_SCALAR_IS_FIXED	gpu/GrConfig.h	/^    #define GR_SCALAR_IS_FIXED /;"	d
GR_SCALAR_IS_FIXED	gpu/GrUserConfig.h	/^#define GR_SCALAR_IS_FIXED /;"	d
GR_SCALAR_IS_FLOAT	gpu/GrConfig.h	/^    #define GR_SCALAR_IS_FLOAT /;"	d
GR_SCALAR_IS_FLOAT	gpu/GrConfig.h	/^    #undef  GR_SCALAR_IS_FLOAT$/;"	d
GR_SCALAR_IS_FLOAT	gpu/GrUserConfig.h	/^#define GR_SCALAR_IS_FLOAT /;"	d
GR_STATIC_ASSERT	gpu/GrConfig.h	/^        #define GR_STATIC_ASSERT(/;"	d
GR_STATIC_ASSERT_FAILURE	gpu/GrConfig.h	/^        template <> class GR_STATIC_ASSERT_FAILURE<true> {};$/;"	c
GR_STATIC_RECT_VB	gpu/GrConfig.h	/^    #define GR_STATIC_RECT_VB /;"	d
GR_STRING	gpu/GrConfig.h	/^#define GR_STRING(/;"	d
GR_STRING_IMPL	gpu/GrConfig.h	/^#define GR_STRING_IMPL(/;"	d
GR_Scalar1	gpu/GrScalar.h	/^#define GR_Scalar1 /;"	d
GR_ScalarHalf	gpu/GrScalar.h	/^#define GR_ScalarHalf /;"	d
GR_ScalarMax	gpu/GrScalar.h	/^#define GR_ScalarMax /;"	d
GR_ScalarMin	gpu/GrScalar.h	/^#define GR_ScalarMin /;"	d
GR_TEXT_SCALAR_IS_FIXED	gpu/GrUserConfig.h	/^#define GR_TEXT_SCALAR_IS_FIXED /;"	d
GR_TEXT_SCALAR_IS_FLOAT	gpu/GrConfig.h	/^    #define GR_TEXT_SCALAR_IS_FLOAT /;"	d
GR_TEXT_SCALAR_IS_FLOAT	gpu/GrConfig.h	/^    #undef  GR_TEXT_SCALAR_IS_FLOAT$/;"	d
GR_TEXT_SCALAR_IS_FLOAT	gpu/GrUserConfig.h	/^#define GR_TEXT_SCALAR_IS_FLOAT /;"	d
GR_TEXT_SCALAR_IS_USHORT	gpu/GrUserConfig.h	/^#define GR_TEXT_SCALAR_IS_USHORT /;"	d
GR_TEXT_SCALAR_TYPE_IS_FIXED	gpu/GrConfig.h	/^    #define GR_TEXT_SCALAR_TYPE_IS_FIXED /;"	d
GR_TEXT_SCALAR_TYPE_IS_FLOAT	gpu/GrConfig.h	/^    #define GR_TEXT_SCALAR_TYPE_IS_FLOAT /;"	d
GR_TEXT_SCALAR_TYPE_IS_USHORT	gpu/GrConfig.h	/^    #define GR_TEXT_SCALAR_TYPE_IS_USHORT /;"	d
GR_WARN	gpu/GrConfig.h	/^    #define GR_WARN(/;"	d
GR_WIN32_BUILD	gpu/GrConfig.h	/^        #define GR_WIN32_BUILD /;"	d
GR_WIN32_BUILD	gpu/GrConfig.h	/^        #undef GR_WIN32_BUILD$/;"	d
GR_WIN32_BUILD	gpu/GrConfig.h	/^    #define GR_WIN32_BUILD /;"	d
GSCanonicalEntry	pdf/SkPDFGraphicState.h	/^        explicit GSCanonicalEntry(SkPDFGraphicState* gs)$/;"	f	class:SkPDFGraphicState::GSCanonicalEntry
GSCanonicalEntry	pdf/SkPDFGraphicState.h	/^        explicit GSCanonicalEntry(const SkPaint* paint)$/;"	f	class:SkPDFGraphicState::GSCanonicalEntry
GSCanonicalEntry	pdf/SkPDFGraphicState.h	/^    class GSCanonicalEntry {$/;"	c	class:SkPDFGraphicState
GenID	gpu/GrProgramStageFactory.h	/^    static StageKey GenID() {$/;"	f	class:GrProgramStageFactory
Get	core/SkGlobals.h	/^    static Rec* Get(uint32_t tag)$/;"	f	class:SkGlobals
GetBitmapAlpha	SkBitmap.cpp	/^static bool GetBitmapAlpha(const SkBitmap& src, uint8_t* SK_RESTRICT alpha,$/;"	f	file:
GetExtensionsStringProc	utils/SkWGL.h	/^    typedef const char* (WINAPI *GetExtensionsStringProc)(HDC hdc);$/;"	t	class:SkWGLExtensions
GetMapPtsProc	core/SkMatrix.h	/^    static MapPtsProc GetMapPtsProc(TypeMask mask) {$/;"	f	class:SkMatrix
GetMapXYProc	core/SkMatrix.h	/^    static MapXYProc GetMapXYProc(TypeMask mask) {$/;"	f	class:SkMatrix
GetPixelFormatAttribfvProc	utils/SkWGL.h	/^    typedef BOOL (WINAPI *GetPixelFormatAttribfvProc)(HDC hdc, int, int, UINT, const int*, FLOAT*);$/;"	t	class:SkWGLExtensions
GetPixelFormatAttribivProc	utils/SkWGL.h	/^    typedef BOOL (WINAPI *GetPixelFormatAttribivProc)(HDC, int, int, UINT, const int*, int*);$/;"	t	class:SkWGLExtensions
GetScale	core/SkUnPreMultiply.h	/^    static Scale GetScale(U8CPU alpha) {$/;"	f	class:SkUnPreMultiply
GetScaleTable	core/SkUnPreMultiply.h	/^    static const Scale* GetScaleTable() {$/;"	f	class:SkUnPreMultiply
GlyphRec	core/SkBounder.h	/^    struct GlyphRec {$/;"	s	class:SkBounder
GrALIGN4	gpu/GrTypes.h	/^#define GrALIGN4(/;"	d
GrAlwaysAssert	gpu/GrConfig.h	/^#define GrAlwaysAssert(/;"	d
GrAssert	gpu/GrConfig.h	/^#define GrAssert(/;"	d
GrAutoMatrix	gpu/GrContext.h	/^    GrAutoMatrix() : fContext(NULL) {}$/;"	f	class:GrAutoMatrix
GrAutoMatrix	gpu/GrContext.h	/^    GrAutoMatrix(GrContext* ctx) : fContext(ctx) {$/;"	f	class:GrAutoMatrix
GrAutoMatrix	gpu/GrContext.h	/^    GrAutoMatrix(GrContext* ctx, const GrMatrix& matrix) : fContext(ctx) {$/;"	f	class:GrAutoMatrix
GrAutoMatrix	gpu/GrContext.h	/^class GrAutoMatrix : GrNoncopyable {$/;"	c
GrAutoRef	gpu/GrRefCnt.h	/^typedef SkAutoRef GrAutoRef;$/;"	t
GrAutoScratchTexture	gpu/GrContext.h	/^    GrAutoScratchTexture()$/;"	f	class:GrAutoScratchTexture
GrAutoScratchTexture	gpu/GrContext.h	/^    GrAutoScratchTexture(GrContext* context,$/;"	f	class:GrAutoScratchTexture
GrAutoScratchTexture	gpu/GrContext.h	/^class GrAutoScratchTexture : ::GrNoncopyable {$/;"	c
GrAutoTPtrValueRestore	gpu/GrTemplates.h	/^    GrAutoTPtrValueRestore() : fPtr(NULL), fVal() {}$/;"	f	class:GrAutoTPtrValueRestore
GrAutoTPtrValueRestore	gpu/GrTemplates.h	/^    GrAutoTPtrValueRestore(T* ptr) {$/;"	f	class:GrAutoTPtrValueRestore
GrAutoTPtrValueRestore	gpu/GrTemplates.h	/^template <typename T> class GrAutoTPtrValueRestore : public GrNoncopyable {$/;"	c
GrAutoUnref	gpu/GrRefCnt.h	/^typedef SkAutoUnref GrAutoUnref;$/;"	t
GrBlendCoeff	gpu/GrTypes.h	/^enum GrBlendCoeff {$/;"	g
GrBytesPerPixel	gpu/GrTypes.h	/^static inline size_t GrBytesPerPixel(GrPixelConfig config) {$/;"	f
GrClip	gpu/GrClip.h	/^class GrClip {$/;"	c
GrClipIterator	gpu/GrClipIterator.h	/^class GrClipIterator {$/;"	c
GrClipIterator_DEFINED	gpu/GrClipIterator.h	/^#define GrClipIterator_DEFINED$/;"	d
GrClipType	gpu/GrTypes.h	/^enum GrClipType {$/;"	g
GrClip_DEFINED	gpu/GrClip.h	/^#define GrClip_DEFINED$/;"	d
GrColor	gpu/GrColor.h	/^typedef uint32_t GrColor;$/;"	t
GrColorPackRGBA	gpu/GrColor.h	/^static inline GrColor GrColorPackRGBA(unsigned r, unsigned g,$/;"	f
GrColorUnpackA	gpu/GrColor.h	/^#define GrColorUnpackA(/;"	d
GrColorUnpackB	gpu/GrColor.h	/^#define GrColorUnpackB(/;"	d
GrColorUnpackG	gpu/GrColor.h	/^#define GrColorUnpackG(/;"	d
GrColorUnpackR	gpu/GrColor.h	/^#define GrColorUnpackR(/;"	d
GrColor_DEFINED	gpu/GrColor.h	/^#define GrColor_DEFINED$/;"	d
GrColor_ILLEGAL	gpu/GrColor.h	/^#define GrColor_ILLEGAL /;"	d
GrColor_SHIFT_A	gpu/GrColor.h	/^#define GrColor_SHIFT_A /;"	d
GrColor_SHIFT_B	gpu/GrColor.h	/^#define GrColor_SHIFT_B /;"	d
GrColor_SHIFT_G	gpu/GrColor.h	/^#define GrColor_SHIFT_G /;"	d
GrColor_SHIFT_R	gpu/GrColor.h	/^#define GrColor_SHIFT_R /;"	d
GrConfig_DEFINED	gpu/GrConfig.h	/^#define GrConfig_DEFINED$/;"	d
GrContext	gpu/GrContext.h	/^class GR_API GrContext : public GrRefCnt {$/;"	c
GrContextFactory	gpu/GrContextFactory.h	/^    GrContextFactory() {$/;"	f	class:GrContextFactory
GrContextFactory	gpu/GrContextFactory.h	/^class GrContextFactory  : GrNoncopyable {$/;"	c
GrContextFactory_DEFINED	gpu/GrContextFactory.h	/^#define GrContextFactory_DEFINED$/;"	d
GrContext_DEFINED	gpu/GrContext.h	/^#define GrContext_DEFINED$/;"	d
GrCrash	gpu/GrConfig.h	/^inline void GrCrash() { GrAlwaysAssert(false); }$/;"	f
GrCrash	gpu/GrConfig.h	/^inline void GrCrash(const char* msg) { GrPrintf(msg); GrAlwaysAssert(false); }$/;"	f
GrCustomStage	gpu/GrCustomStage.h	/^class GrCustomStage : public GrRefCnt {$/;"	c
GrCustomStage_DEFINED	gpu/GrCustomStage.h	/^#define GrCustomStage_DEFINED$/;"	d
GrEngine	gpu/GrTypes.h	/^enum GrEngine {$/;"	g
GrFixed	gpu/GrTypes.h	/^typedef int32_t GrFixed;$/;"	t
GrFixedFloorToInt	gpu/GrScalar.h	/^#define GrFixedFloorToInt(/;"	d
GrFixedToFloat	gpu/GrScalar.h	/^#define GrFixedToFloat(/;"	d
GrFixedToScalar	gpu/GrScalar.h	/^#define GrFixedToScalar(/;"	d
GrFloatToScalar	gpu/GrScalar.h	/^#define GrFloatToScalar(/;"	d
GrFontScaler	gpu/GrFontScaler.h	/^class GrFontScaler : public GrRefCnt {$/;"	c
GrFontScaler_DEFINED	gpu/GrFontScaler.h	/^#define GrFontScaler_DEFINED$/;"	d
GrGLActiveTextureProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLActiveTextureProc)(GrGLenum texture);$/;"	t
GrGLAttachShaderProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLAttachShaderProc)(GrGLuint program, GrGLuint shader);$/;"	t
GrGLBeginQueryProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBeginQueryProc)(GrGLenum target, GrGLuint id);$/;"	t
GrGLBindAttribLocationProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBindAttribLocationProc)(GrGLuint program, GrGLuint index, const char* name);$/;"	t
GrGLBindBufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBindBufferProc)(GrGLenum target, GrGLuint buffer);$/;"	t
GrGLBindFragDataLocationIndexedProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBindFragDataLocationIndexedProc)(GrGLuint program, GrGLuint colorNumber, GrGLuint index, const GrGLchar * name);$/;"	t
GrGLBindFragDataLocationProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBindFragDataLocationProc)(GrGLuint program, GrGLuint colorNumber, const GrGLchar* name);$/;"	t
GrGLBindFramebufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBindFramebufferProc)(GrGLenum target, GrGLuint framebuffer);$/;"	t
GrGLBindRenderbufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBindRenderbufferProc)(GrGLenum target, GrGLuint renderbuffer);$/;"	t
GrGLBindTextureProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBindTextureProc)(GrGLenum target, GrGLuint texture);$/;"	t
GrGLBinding	gpu/GrGLInterface.h	/^enum GrGLBinding {$/;"	g
GrGLBlendColorProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBlendColorProc)(GrGLclampf red, GrGLclampf green, GrGLclampf blue, GrGLclampf alpha);$/;"	t
GrGLBlendFuncProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBlendFuncProc)(GrGLenum sfactor, GrGLenum dfactor);$/;"	t
GrGLBlitFramebufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBlitFramebufferProc)(GrGLint srcX0, GrGLint srcY0, GrGLint srcX1, GrGLint srcY1, GrGLint dstX0, GrGLint dstY0, GrGLint dstX1, GrGLint dstY1, GrGLbitfield mask, GrGLenum filter);$/;"	t
GrGLBufferDataProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBufferDataProc)(GrGLenum target, GrGLsizeiptr size, const GrGLvoid* data, GrGLenum usage);$/;"	t
GrGLBufferSubDataProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLBufferSubDataProc)(GrGLenum target, GrGLintptr offset, GrGLsizeiptr size, const GrGLvoid* data);$/;"	t
GrGLCapability	gpu/GrGLInterface.h	/^enum GrGLCapability {$/;"	g
GrGLCheckFramebufferStatusProc	gpu/GrGLInterface.h	/^    typedef GrGLenum (GR_GL_FUNCTION_TYPE *GrGLCheckFramebufferStatusProc)(GrGLenum target);$/;"	t
GrGLClearColorProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLClearColorProc)(GrGLclampf red, GrGLclampf green, GrGLclampf blue, GrGLclampf alpha);$/;"	t
GrGLClearProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLClearProc)(GrGLbitfield mask);$/;"	t
GrGLClearStencilProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLClearStencilProc)(GrGLint s);$/;"	t
GrGLColorMaskProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLColorMaskProc)(GrGLboolean red, GrGLboolean green, GrGLboolean blue, GrGLboolean alpha);$/;"	t
GrGLColorPointerProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLColorPointerProc)(GrGLint size, GrGLenum type, GrGLsizei stride, const GrGLvoid* pointer);$/;"	t
GrGLCompileShaderProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLCompileShaderProc)(GrGLuint shader);$/;"	t
GrGLCompressedTexImage2DProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLCompressedTexImage2DProc)(GrGLenum target, GrGLint level, GrGLenum internalformat, GrGLsizei width, GrGLsizei height, GrGLint border, GrGLsizei imageSize, const GrGLvoid* data);$/;"	t
GrGLConfig_DEFINED	gpu/GrGLConfig.h	/^#define GrGLConfig_DEFINED$/;"	d
GrGLConfig_chrome_DEFINED	gpu/GrGLConfig_chrome.h	/^#define GrGLConfig_chrome_DEFINED$/;"	d
GrGLCreateProgramProc	gpu/GrGLInterface.h	/^    typedef GrGLuint (GR_GL_FUNCTION_TYPE *GrGLCreateProgramProc)(void);$/;"	t
GrGLCreateShaderProc	gpu/GrGLInterface.h	/^    typedef GrGLuint (GR_GL_FUNCTION_TYPE *GrGLCreateShaderProc)(GrGLenum type);$/;"	t
GrGLCullFaceProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLCullFaceProc)(GrGLenum mode);$/;"	t
GrGLDefines_DEFINED	gpu/GrGLDefines.h	/^#define GrGLDefines_DEFINED$/;"	d
GrGLDeleteBuffersProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDeleteBuffersProc)(GrGLsizei n, const GrGLuint* buffers);$/;"	t
GrGLDeleteFramebuffersProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDeleteFramebuffersProc)(GrGLsizei n, const GrGLuint *framebuffers);$/;"	t
GrGLDeleteProgramProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDeleteProgramProc)(GrGLuint program);$/;"	t
GrGLDeleteQueriesProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDeleteQueriesProc)(GrGLsizei n, const GrGLuint *ids);$/;"	t
GrGLDeleteRenderbuffersProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDeleteRenderbuffersProc)(GrGLsizei n, const GrGLuint *renderbuffers);$/;"	t
GrGLDeleteShaderProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDeleteShaderProc)(GrGLuint shader);$/;"	t
GrGLDeleteTexturesProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDeleteTexturesProc)(GrGLsizei n, const GrGLuint* textures);$/;"	t
GrGLDepthMaskProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDepthMaskProc)(GrGLboolean flag);$/;"	t
GrGLDisableProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDisableProc)(GrGLenum cap);$/;"	t
GrGLDisableVertexAttribArrayProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDisableVertexAttribArrayProc)(GrGLuint index);$/;"	t
GrGLDrawArraysProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDrawArraysProc)(GrGLenum mode, GrGLint first, GrGLsizei count);$/;"	t
GrGLDrawBufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDrawBufferProc)(GrGLenum mode);$/;"	t
GrGLDrawBuffersProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDrawBuffersProc)(GrGLsizei n, const GrGLenum* bufs);$/;"	t
GrGLDrawElementsProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLDrawElementsProc)(GrGLenum mode, GrGLsizei count, GrGLenum type, const GrGLvoid* indices);$/;"	t
GrGLEnableProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLEnableProc)(GrGLenum cap);$/;"	t
GrGLEnableVertexAttribArrayProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLEnableVertexAttribArrayProc)(GrGLuint index);$/;"	t
GrGLEndQueryProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLEndQueryProc)(GrGLenum target);$/;"	t
GrGLFinishProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLFinishProc)();$/;"	t
GrGLFlushProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLFlushProc)();$/;"	t
GrGLFramebufferRenderbufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLFramebufferRenderbufferProc)(GrGLenum target, GrGLenum attachment, GrGLenum renderbuffertarget, GrGLuint renderbuffer);$/;"	t
GrGLFramebufferTexture2DProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLFramebufferTexture2DProc)(GrGLenum target, GrGLenum attachment, GrGLenum textarget, GrGLuint texture, GrGLint level);$/;"	t
GrGLFrontFaceProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLFrontFaceProc)(GrGLenum mode);$/;"	t
GrGLGenBuffersProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGenBuffersProc)(GrGLsizei n, GrGLuint* buffers);$/;"	t
GrGLGenFramebuffersProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGenFramebuffersProc)(GrGLsizei n, GrGLuint *framebuffers);$/;"	t
GrGLGenQueriesProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGenQueriesProc)(GrGLsizei n, GrGLuint *ids);$/;"	t
GrGLGenRenderbuffersProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGenRenderbuffersProc)(GrGLsizei n, GrGLuint *renderbuffers);$/;"	t
GrGLGenTexturesProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGenTexturesProc)(GrGLsizei n, GrGLuint* textures);$/;"	t
GrGLGetBufferParameterivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetBufferParameterivProc)(GrGLenum target, GrGLenum pname, GrGLint* params);$/;"	t
GrGLGetErrorProc	gpu/GrGLInterface.h	/^    typedef GrGLenum (GR_GL_FUNCTION_TYPE *GrGLGetErrorProc)();$/;"	t
GrGLGetFramebufferAttachmentParameterivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetFramebufferAttachmentParameterivProc)(GrGLenum target, GrGLenum attachment, GrGLenum pname, GrGLint* params);$/;"	t
GrGLGetIntegervProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetIntegervProc)(GrGLenum pname, GrGLint* params);$/;"	t
GrGLGetProgramInfoLogProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetProgramInfoLogProc)(GrGLuint program, GrGLsizei bufsize, GrGLsizei* length, char* infolog);$/;"	t
GrGLGetProgramivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetProgramivProc)(GrGLuint program, GrGLenum pname, GrGLint* params);$/;"	t
GrGLGetQueryObjecti64vProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetQueryObjecti64vProc)(GrGLuint id, GrGLenum pname, GrGLint64 *params);$/;"	t
GrGLGetQueryObjectivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetQueryObjectivProc)(GrGLuint id, GrGLenum pname, GrGLint *params);$/;"	t
GrGLGetQueryObjectui64vProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetQueryObjectui64vProc)(GrGLuint id, GrGLenum pname, GrGLuint64 *params);$/;"	t
GrGLGetQueryObjectuivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetQueryObjectuivProc)(GrGLuint id, GrGLenum pname, GrGLuint *params);    $/;"	t
GrGLGetQueryivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetQueryivProc)(GrGLenum GLtarget, GrGLenum pname, GrGLint *params);$/;"	t
GrGLGetRenderbufferParameterivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetRenderbufferParameterivProc)(GrGLenum target, GrGLenum pname, GrGLint* params);$/;"	t
GrGLGetShaderInfoLogProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetShaderInfoLogProc)(GrGLuint shader, GrGLsizei bufsize, GrGLsizei* length, char* infolog);$/;"	t
GrGLGetShaderivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetShaderivProc)(GrGLuint shader, GrGLenum pname, GrGLint* params);$/;"	t
GrGLGetStringProc	gpu/GrGLInterface.h	/^    typedef const GrGLubyte* (GR_GL_FUNCTION_TYPE *GrGLGetStringProc)(GrGLenum name);$/;"	t
GrGLGetTexLevelParameterivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLGetTexLevelParameterivProc)(GrGLenum target, GrGLint level, GrGLenum pname, GrGLint* params);$/;"	t
GrGLGetUniformLocationProc	gpu/GrGLInterface.h	/^    typedef GrGLint (GR_GL_FUNCTION_TYPE *GrGLGetUniformLocationProc)(GrGLuint program, const char* name);$/;"	t
GrGLInterface	gpu/GrGLInterface.h	/^struct GR_API GrGLInterface : public GrRefCnt {$/;"	s
GrGLInterfaceCallbackData	gpu/GrGLInterface.h	/^typedef intptr_t GrGLInterfaceCallbackData;$/;"	t
GrGLInterfaceCallbackProc	gpu/GrGLInterface.h	/^typedef void (*GrGLInterfaceCallbackProc)(const GrGLInterface*);$/;"	t
GrGLInterface_DEFINED	gpu/GrGLInterface.h	/^#define GrGLInterface_DEFINED$/;"	d
GrGLLineWidthProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLLineWidthProc)(GrGLfloat width);$/;"	t
GrGLLinkProgramProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLLinkProgramProc)(GrGLuint program);$/;"	t
GrGLMapBufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid* (GR_GL_FUNCTION_TYPE *GrGLMapBufferProc)(GrGLenum target, GrGLenum access);$/;"	t
GrGLPixelStoreiProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLPixelStoreiProc)(GrGLenum pname, GrGLint param);$/;"	t
GrGLQueryCounterProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLQueryCounterProc)(GrGLuint id, GrGLenum target);$/;"	t
GrGLReadBufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLReadBufferProc)(GrGLenum src);$/;"	t
GrGLReadPixelsProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLReadPixelsProc)(GrGLint x, GrGLint y, GrGLsizei width, GrGLsizei height, GrGLenum format, GrGLenum type, GrGLvoid* pixels);$/;"	t
GrGLRenderbufferStorageMultisampleProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLRenderbufferStorageMultisampleProc)(GrGLenum target, GrGLsizei samples, GrGLenum internalformat, GrGLsizei width, GrGLsizei height);$/;"	t
GrGLRenderbufferStorageProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLRenderbufferStorageProc)(GrGLenum target, GrGLenum internalformat, GrGLsizei width, GrGLsizei height);$/;"	t
GrGLResolveMultisampleFramebufferProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLResolveMultisampleFramebufferProc)();$/;"	t
GrGLSLVersion	gpu/GrGLInterface.h	/^typedef uint32_t GrGLSLVersion;$/;"	t
GrGLScissorProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLScissorProc)(GrGLint x, GrGLint y, GrGLsizei width, GrGLsizei height);$/;"	t
GrGLShaderSourceProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLShaderSourceProc)(GrGLuint shader, GrGLsizei count, const char** str, const GrGLint* length);$/;"	t
GrGLStencilFuncProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLStencilFuncProc)(GrGLenum func, GrGLint ref, GrGLuint mask);$/;"	t
GrGLStencilFuncSeparateProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLStencilFuncSeparateProc)(GrGLenum face, GrGLenum func, GrGLint ref, GrGLuint mask);$/;"	t
GrGLStencilMaskProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLStencilMaskProc)(GrGLuint mask);$/;"	t
GrGLStencilMaskSeparateProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLStencilMaskSeparateProc)(GrGLenum face, GrGLuint mask);$/;"	t
GrGLStencilOpProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLStencilOpProc)(GrGLenum fail, GrGLenum zfail, GrGLenum zpass);$/;"	t
GrGLStencilOpSeparateProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLStencilOpSeparateProc)(GrGLenum face, GrGLenum fail, GrGLenum zfail, GrGLenum zpass);$/;"	t
GrGLTexImage2DProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLTexImage2DProc)(GrGLenum target, GrGLint level, GrGLint internalformat, GrGLsizei width, GrGLsizei height, GrGLint border, GrGLenum format, GrGLenum type, const GrGLvoid* pixels);$/;"	t
GrGLTexParameteriProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLTexParameteriProc)(GrGLenum target, GrGLenum pname, GrGLint param);$/;"	t
GrGLTexStorage2DProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLTexStorage2DProc)(GrGLenum target, GrGLsizei levels, GrGLenum internalformat, GrGLsizei width, GrGLsizei height);$/;"	t
GrGLTexSubImage2DProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLTexSubImage2DProc)(GrGLenum target, GrGLint level, GrGLint xoffset, GrGLint yoffset, GrGLsizei width, GrGLsizei height, GrGLenum format, GrGLenum type, const GrGLvoid* pixels);$/;"	t
GrGLTextType	gpu/GrGLConfig.h	/^    #define GrGLTextType /;"	d
GrGLType	gpu/GrGLConfig.h	/^    #define GrGLType /;"	d
GrGLUniform1fProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform1fProc)(GrGLint location, GrGLfloat v0);$/;"	t
GrGLUniform1fvProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform1fvProc)(GrGLint location, GrGLsizei count, const GrGLfloat* v);$/;"	t
GrGLUniform1iProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform1iProc)(GrGLint location, GrGLint v0);$/;"	t
GrGLUniform1ivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform1ivProc)(GrGLint location, GrGLsizei count, const GrGLint* v);$/;"	t
GrGLUniform2fProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform2fProc)(GrGLint location, GrGLfloat v0, GrGLfloat v1);$/;"	t
GrGLUniform2fvProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform2fvProc)(GrGLint location, GrGLsizei count, const GrGLfloat* v);$/;"	t
GrGLUniform2iProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform2iProc)(GrGLint location, GrGLint v0, GrGLint v1);$/;"	t
GrGLUniform2ivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform2ivProc)(GrGLint location, GrGLsizei count, const GrGLint* v);$/;"	t
GrGLUniform3fProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform3fProc)(GrGLint location, GrGLfloat v0, GrGLfloat v1, GrGLfloat v2);$/;"	t
GrGLUniform3fvProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform3fvProc)(GrGLint location, GrGLsizei count, const GrGLfloat* v);$/;"	t
GrGLUniform3iProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform3iProc)(GrGLint location, GrGLint v0, GrGLint v1, GrGLint v2);$/;"	t
GrGLUniform3ivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform3ivProc)(GrGLint location, GrGLsizei count, const GrGLint* v);$/;"	t
GrGLUniform4fProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform4fProc)(GrGLint location, GrGLfloat v0, GrGLfloat v1, GrGLfloat v2, GrGLfloat v3);$/;"	t
GrGLUniform4fvProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform4fvProc)(GrGLint location, GrGLsizei count, const GrGLfloat* v);$/;"	t
GrGLUniform4iProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform4iProc)(GrGLint location, GrGLint v0, GrGLint v1, GrGLint v2, GrGLint v3);$/;"	t
GrGLUniform4ivProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniform4ivProc)(GrGLint location, GrGLsizei count, const GrGLint* v);$/;"	t
GrGLUniformMatrix2fvProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniformMatrix2fvProc)(GrGLint location, GrGLsizei count, GrGLboolean transpose, const GrGLfloat* value);$/;"	t
GrGLUniformMatrix3fvProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniformMatrix3fvProc)(GrGLint location, GrGLsizei count, GrGLboolean transpose, const GrGLfloat* value);$/;"	t
GrGLUniformMatrix4fvProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUniformMatrix4fvProc)(GrGLint location, GrGLsizei count, GrGLboolean transpose, const GrGLfloat* value);$/;"	t
GrGLUnmapBufferProc	gpu/GrGLInterface.h	/^    typedef GrGLboolean (GR_GL_FUNCTION_TYPE *GrGLUnmapBufferProc)(GrGLenum target);$/;"	t
GrGLUseProgramProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLUseProgramProc)(GrGLuint program);$/;"	t
GrGLVersion	gpu/GrGLInterface.h	/^typedef uint32_t GrGLVersion;$/;"	t
GrGLVertexAttrib4fvProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLVertexAttrib4fvProc)(GrGLuint indx, const GrGLfloat* values);$/;"	t
GrGLVertexAttribPointerProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLVertexAttribPointerProc)(GrGLuint indx, GrGLint size, GrGLenum type, GrGLboolean normalized, GrGLsizei stride, const GrGLvoid* ptr);$/;"	t
GrGLViewportProc	gpu/GrGLInterface.h	/^    typedef GrGLvoid (GR_GL_FUNCTION_TYPE *GrGLViewportProc)(GrGLint x, GrGLint y, GrGLsizei width, GrGLsizei height);$/;"	t
GrGLbitfield	gpu/GrGLInterface.h	/^typedef unsigned int GrGLbitfield;$/;"	t
GrGLboolean	gpu/GrGLInterface.h	/^typedef unsigned char GrGLboolean;$/;"	t
GrGLbyte	gpu/GrGLInterface.h	/^typedef signed char GrGLbyte;$/;"	t
GrGLchar	gpu/GrGLInterface.h	/^typedef char GrGLchar;$/;"	t
GrGLclampd	gpu/GrGLInterface.h	/^typedef double GrGLclampd;$/;"	t
GrGLclampf	gpu/GrGLInterface.h	/^typedef float GrGLclampf;$/;"	t
GrGLdouble	gpu/GrGLInterface.h	/^typedef double GrGLdouble;$/;"	t
GrGLenum	gpu/GrGLInterface.h	/^typedef unsigned int GrGLenum;$/;"	t
GrGLfloat	gpu/GrGLInterface.h	/^typedef float GrGLfloat;$/;"	t
GrGLint	gpu/GrGLInterface.h	/^typedef int GrGLint;$/;"	t
GrGLint64	gpu/GrGLInterface.h	/^typedef int64_t GrGLint64;$/;"	t
GrGLintptr	gpu/GrGLInterface.h	/^typedef long GrGLintptr;$/;"	t
GrGLshort	gpu/GrGLInterface.h	/^typedef short GrGLshort;$/;"	t
GrGLsizei	gpu/GrGLInterface.h	/^typedef int GrGLsizei;$/;"	t
GrGLsizeiptr	gpu/GrGLInterface.h	/^typedef long GrGLsizeiptr;$/;"	t
GrGLubyte	gpu/GrGLInterface.h	/^typedef unsigned char GrGLubyte;$/;"	t
GrGLuint	gpu/GrGLInterface.h	/^typedef unsigned int GrGLuint;$/;"	t
GrGLuint64	gpu/GrGLInterface.h	/^typedef uint64_t GrGLuint64;$/;"	t
GrGLushort	gpu/GrGLInterface.h	/^typedef unsigned short GrGLushort;$/;"	t
GrGLvoid	gpu/GrGLInterface.h	/^typedef void GrGLvoid;$/;"	t
GrGlyph	gpu/GrGlyph.h	/^struct GrGlyph {$/;"	s
GrGlyph_DEFINED	gpu/GrGlyph.h	/^#define GrGlyph_DEFINED$/;"	d
GrIDivRoundUp	gpu/GrTypes.h	/^static inline int32_t GrIDivRoundUp(int x, int y) {$/;"	f
GrIPoint16	gpu/GrPoint.h	/^struct GrIPoint16 {$/;"	s
GrIRect	gpu/GrRect.h	/^typedef SkIRect GrIRect;$/;"	t
GrIRect16	gpu/GrRect.h	/^struct GrIRect16 {$/;"	s
GrInstanceCounter	gpu/GrInstanceCounter.h	/^    GrInstanceCounter() {$/;"	f	class:GrInstanceCounter
GrInstanceCounter	gpu/GrInstanceCounter.h	/^template <typename T> class GrInstanceCounter {$/;"	c
GrInstanceCounter_DEFINED	gpu/GrInstanceCounter.h	/^#define GrInstanceCounter_DEFINED$/;"	d
GrIntToFixed	gpu/GrScalar.h	/^#define GrIntToFixed(/;"	d
GrIntToScalar	gpu/GrScalar.h	/^#define GrIntToScalar(/;"	d
GrIsALIGN4	gpu/GrTypes.h	/^#define GrIsALIGN4(/;"	d
GrIsFillInverted	gpu/GrTypes.h	/^static inline bool GrIsFillInverted(GrPathFill fill) {$/;"	f
GrIsPow2	gpu/GrTypes.h	/^static inline bool GrIsPow2(unsigned n) {$/;"	f
GrIsPrimTypeLines	gpu/GrTypes.h	/^static inline bool GrIsPrimTypeLines(GrPrimitiveType type) {$/;"	f
GrIsPrimTypeTris	gpu/GrTypes.h	/^static inline bool GrIsPrimTypeTris(GrPrimitiveType type) {$/;"	f
GrKey	gpu/GrKey.h	/^    explicit GrKey(Hash hash) : fHash(hash) {}$/;"	f	class:GrKey
GrKey	gpu/GrKey.h	/^class GrKey : public GrRefCnt {$/;"	c
GrKey_DEFINED	gpu/GrKey.h	/^#define GrKey_DEFINED$/;"	d
GrMaskFormat	gpu/GrTypes.h	/^enum GrMaskFormat {$/;"	g
GrMaskFormatBytesPerPixel	gpu/GrTypes.h	/^static inline int GrMaskFormatBytesPerPixel(GrMaskFormat format) {$/;"	f
GrMatrix	gpu/GrMatrix.h	/^typedef SkMatrix GrMatrix;$/;"	t
GrMatrix_DEFINED	gpu/GrMatrix.h	/^#define GrMatrix_DEFINED$/;"	d
GrMax	gpu/GrTypes.h	/^template <typename T> const T& GrMax(const T& a, const T& b) {$/;"	f
GrMin	gpu/GrTypes.h	/^template <typename T> const T& GrMin(const T& a, const T& b) {$/;"	f
GrMul	gpu/GrScalar.h	/^#define GrMul(/;"	d
GrNextPow2	gpu/GrTypes.h	/^static inline int GrNextPow2(int n) {$/;"	f
GrNextPow2	gpu/GrTypes.h	/^static inline uint32_t GrNextPow2(uint32_t n) {$/;"	f
GrNonInvertedFill	gpu/GrTypes.h	/^static inline GrPathFill GrNonInvertedFill(GrPathFill fill) {$/;"	f
GrNoncopyable	gpu/GrNoncopyable.h	/^    GrNoncopyable() {}$/;"	f	class:GrNoncopyable
GrNoncopyable	gpu/GrNoncopyable.h	/^class GR_API GrNoncopyable {$/;"	c
GrNoncopyable_DEFINED	gpu/GrNoncopyable.h	/^#define GrNoncopyable_DEFINED$/;"	d
GrPaint	gpu/GrPaint.h	/^    GrPaint() {$/;"	f	class:GrPaint
GrPaint	gpu/GrPaint.h	/^    GrPaint(const GrPaint& paint) {$/;"	f	class:GrPaint
GrPaint	gpu/GrPaint.h	/^class GrPaint {$/;"	c
GrPaint_DEFINED	gpu/GrPaint.h	/^#define GrPaint_DEFINED$/;"	d
GrPath	gpu/GrPath.h	/^typedef SkPath GrPath;$/;"	t
GrPathCmd	gpu/GrTypes.h	/^enum GrPathCmd {$/;"	g
GrPathFill	gpu/GrTypes.h	/^enum GrPathFill {$/;"	g
GrPath_DEFINED	gpu/GrPath.h	/^#define GrPath_DEFINED$/;"	d
GrPixelConfig	gpu/GrTypes.h	/^enum GrPixelConfig {$/;"	g
GrPixelConfigIs32Bit	gpu/GrTypes.h	/^static inline bool GrPixelConfigIs32Bit(GrPixelConfig config) {$/;"	f
GrPixelConfigIsAlphaOnly	gpu/GrTypes.h	/^static inline bool GrPixelConfigIsAlphaOnly(GrPixelConfig config) {$/;"	f
GrPixelConfigIsBGRA8888	gpu/GrTypes.h	/^static inline bool GrPixelConfigIsBGRA8888(GrPixelConfig config) {$/;"	f
GrPixelConfigIsOpaque	gpu/GrTypes.h	/^static inline bool GrPixelConfigIsOpaque(GrPixelConfig config) {$/;"	f
GrPixelConfigIsRGBA8888	gpu/GrTypes.h	/^static inline bool GrPixelConfigIsRGBA8888(GrPixelConfig config) {$/;"	f
GrPixelConfigIsUnpremultiplied	gpu/GrTypes.h	/^static inline bool GrPixelConfigIsUnpremultiplied(GrPixelConfig config) {$/;"	f
GrPixelConfigSwapRAndB	gpu/GrTypes.h	/^static inline GrPixelConfig GrPixelConfigSwapRAndB(GrPixelConfig config) {$/;"	f
GrPlatform3DContext	gpu/GrTypes.h	/^typedef intptr_t GrPlatform3DContext;$/;"	t
GrPlatform3DObject	gpu/GrTypes.h	/^typedef intptr_t GrPlatform3DObject;$/;"	t
GrPlatformRenderTargetDesc	gpu/GrTypes.h	/^    GrPlatformRenderTargetDesc() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:GrPlatformRenderTargetDesc
GrPlatformRenderTargetDesc	gpu/GrTypes.h	/^struct GrPlatformRenderTargetDesc {$/;"	s
GrPlatformTextureDesc	gpu/GrTypes.h	/^    GrPlatformTextureDesc() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:GrPlatformTextureDesc
GrPlatformTextureDesc	gpu/GrTypes.h	/^struct GrPlatformTextureDesc {$/;"	s
GrPlatformTextureFlags	gpu/GrTypes.h	/^enum GrPlatformTextureFlags {$/;"	g
GrPoint	gpu/GrPoint.h	/^#define GrPoint /;"	d
GrPoint_DEFINED	gpu/GrPoint.h	/^#define GrPoint_DEFINED$/;"	d
GrPrimitiveType	gpu/GrTypes.h	/^enum GrPrimitiveType {$/;"	g
GrPrintf	gpu/GrConfig.h	/^#define GrPrintf /;"	d
GrProgramStageFactory	gpu/GrProgramStageFactory.h	/^    GrProgramStageFactory() {$/;"	f	class:GrProgramStageFactory
GrProgramStageFactory	gpu/GrProgramStageFactory.h	/^class GrProgramStageFactory : public GrNoncopyable {$/;"	c
GrProgramStageFactory_DEFINED	gpu/GrProgramStageFactory.h	/^#define GrProgramStageFactory_DEFINED$/;"	d
GrRect	gpu/GrRect.h	/^typedef SkRect  GrRect;$/;"	t
GrRect_DEFINED	gpu/GrRect.h	/^#define GrRect_DEFINED$/;"	d
GrRefCnt	gpu/GrRefCnt.h	/^typedef SkRefCnt GrRefCnt;$/;"	t
GrRefCnt_DEFINED	gpu/GrRefCnt.h	/^#define GrRefCnt_DEFINED$/;"	d
GrRenderTarget	gpu/GrRenderTarget.h	/^    GrRenderTarget(GrGpu* gpu,$/;"	f	class:GrRenderTarget
GrRenderTarget	gpu/GrRenderTarget.h	/^class GrRenderTarget : public GrResource {$/;"	c
GrRenderTarget_DEFINED	gpu/GrRenderTarget.h	/^#define GrRenderTarget_DEFINED$/;"	d
GrResource	gpu/GrResource.h	/^class GrResource : public GrRefCnt {$/;"	c
GrResource_DEFINED	gpu/GrResource.h	/^#define GrResource_DEFINED$/;"	d
GrSafeAssign	gpu/GrRefCnt.h	/^#define GrSafeAssign(/;"	d
GrSafeRef	gpu/GrRefCnt.h	/^#define GrSafeRef /;"	d
GrSafeRewind	gpu/GrClipIterator.h	/^static inline void GrSafeRewind(GrClipIterator* iter) {$/;"	f
GrSafeSetNull	gpu/GrRefCnt.h	/^static inline void GrSafeSetNull(T*& obj) {$/;"	f
GrSafeUnref	gpu/GrRefCnt.h	/^#define GrSafeUnref /;"	d
GrSamplerState	gpu/GrSamplerState.h	/^    GrSamplerState()$/;"	f	class:GrSamplerState
GrSamplerState	gpu/GrSamplerState.h	/^class GrSamplerState {$/;"	c
GrSamplerState_DEFINED	gpu/GrSamplerState.h	/^#define GrSamplerState_DEFINED$/;"	d
GrScalar	gpu/GrScalar.h	/^#define GrScalar /;"	d
GrScalarAbs	gpu/GrScalar.h	/^#define GrScalarAbs(/;"	d
GrScalarAve	gpu/GrScalar.h	/^#define GrScalarAve(/;"	d
GrScalarCeilToInt	gpu/GrScalar.h	/^#define GrScalarCeilToInt(/;"	d
GrScalarDiv	gpu/GrScalar.h	/^#define GrScalarDiv(/;"	d
GrScalarFloorToInt	gpu/GrScalar.h	/^#define GrScalarFloorToInt(/;"	d
GrScalarHalf	gpu/GrScalar.h	/^#define GrScalarHalf(/;"	d
GrScalarIsInt	gpu/GrScalar.h	/^#define GrScalarIsInt(/;"	d
GrScalarMax	gpu/GrScalar.h	/^#define GrScalarMax(/;"	d
GrScalarMul	gpu/GrScalar.h	/^#define GrScalarMul(/;"	d
GrScalarToFloat	gpu/GrScalar.h	/^#define GrScalarToFloat(/;"	d
GrScalar_DEFINED	gpu/GrScalar.h	/^#define GrScalar_DEFINED$/;"	d
GrSizeAlignDown	gpu/GrTypes.h	/^static inline uint32_t GrSizeAlignDown(size_t x, uint32_t alignment) {$/;"	f
GrSizeAlignUp	gpu/GrTypes.h	/^static inline uint32_t GrSizeAlignUp(size_t x, uint32_t alignment) {$/;"	f
GrSizeAlignUpPad	gpu/GrTypes.h	/^static inline size_t GrSizeAlignUpPad(size_t x, uint32_t alignment) {$/;"	f
GrSizeDivRoundUp	gpu/GrTypes.h	/^static inline size_t GrSizeDivRoundUp(size_t x, uint32_t y) {$/;"	f
GrTCast	gpu/GrTemplates.h	/^template <typename Dst, typename Src> Dst GrTCast(Src src) {$/;"	f
GrTProgramStageFactory	gpu/GrProgramStageFactory.h	/^    GrTProgramStageFactory() {$/;"	f	class:GrTProgramStageFactory
GrTProgramStageFactory	gpu/GrProgramStageFactory.h	/^class GrTProgramStageFactory : public GrProgramStageFactory {$/;"	c
GrTemplates_DEFINED	gpu/GrTemplates.h	/^#define GrTemplates_DEFINED$/;"	d
GrTextContext	gpu/GrTextContext.h	/^    GrTextContext() {$/;"	f	class:GrTextContext
GrTextContext	gpu/GrTextContext.h	/^class GrTextContext: public GrRefCnt {$/;"	c
GrTextContext_DEFINED	gpu/GrTextContext.h	/^#define GrTextContext_DEFINED$/;"	d
GrTexture	gpu/GrTexture.h	/^    GrTexture(GrGpu* gpu,$/;"	f	class:GrTexture
GrTexture	gpu/GrTexture.h	/^class GrTexture : public GrResource {$/;"	c
GrTextureDesc	gpu/GrTypes.h	/^struct GrTextureDesc {$/;"	s
GrTextureFlags	gpu/GrTypes.h	/^enum GrTextureFlags {$/;"	g
GrTexture_DEFINED	gpu/GrTexture.h	/^#define GrTexture_DEFINED$/;"	d
GrToS16	gpu/GrTypes.h	/^#define GrToS16(/;"	d
GrToS16	gpu/GrTypes.h	/^static inline int16_t GrToS16(intptr_t x) {$/;"	f
GrTypes_DEFINED	gpu/GrTypes.h	/^#define GrTypes_DEFINED$/;"	d
GrUIAlignDown	gpu/GrTypes.h	/^static inline uint32_t GrUIAlignDown(uint32_t x, uint32_t alignment) {$/;"	f
GrUIAlignUp	gpu/GrTypes.h	/^static inline uint32_t GrUIAlignUp(uint32_t x, uint32_t alignment) {$/;"	f
GrUIAlignUpPad	gpu/GrTypes.h	/^static inline uint32_t GrUIAlignUpPad(uint32_t x, uint32_t alignment) {$/;"	f
GrUIDivRoundUp	gpu/GrTypes.h	/^static inline uint32_t GrUIDivRoundUp(uint32_t x, uint32_t y) {$/;"	f
GrUserConfig_DEFINED	gpu/GrUserConfig.h	/^#define GrUserConfig_DEFINED$/;"	d
GrVec	gpu/GrPoint.h	/^#define GrVec /;"	d
GrVertexLayout	gpu/GrTypes.h	/^typedef int GrVertexLayout;$/;"	t
Gr_bzero	gpu/GrTypes.h	/^static inline void Gr_bzero(void* dst, size_t size) {$/;"	f
GradientInfo	core/SkShader.h	/^    struct GradientInfo {$/;"	s	class:SkShader
GradientType	core/SkShader.h	/^    enum GradientType {$/;"	g	class:SkShader
HR	utils/win/SkHRESULT.h	/^#define HR(/;"	d
HRB	utils/win/SkHRESULT.h	/^#define HRB(/;"	d
HRBM	utils/win/SkHRESULT.h	/^#define HRBM(/;"	d
HRM	utils/win/SkHRESULT.h	/^#define HRM(/;"	d
HRV	utils/win/SkHRESULT.h	/^#define HRV(/;"	d
HRVM	utils/win/SkHRESULT.h	/^#define HRVM(/;"	d
HR_GENERAL	utils/win/SkHRESULT.h	/^#define HR_GENERAL(/;"	d
Handler	animator/SkAnimator.h	/^    typedef void* Handler;$/;"	t	class:SkAnimator
Hash	gpu/GrKey.h	/^    typedef intptr_t Hash;$/;"	t	class:GrKey
Head	core/SkTRegistry.h	/^    static const SkTRegistry* Head() { return gHead; }$/;"	f	class:SkTRegistry
HeapAllocator	SkBitmap.h	/^    class HeapAllocator : public Allocator {$/;"	c	class:SkBitmap
HeapAllocator	core/SkBitmap.h	/^    class HeapAllocator : public Allocator {$/;"	c	class:SkBitmap
Heights	views/SkWidgetViews.h	/^    enum Heights {$/;"	g	class:SkListView
Hinting	core/SkPaint.h	/^    enum Hinting {$/;"	g	class:SkPaint
ICOImageDecoder	images/SkImageDecoder.h	/^DECLARE_DECODER_CREATOR(ICOImageDecoder);$/;"	v
ID2Code	core/SkScalerContext.h	/^    static unsigned ID2Code(uint32_t id) {$/;"	f	struct:SkGlyph
ID2SubX	core/SkScalerContext.h	/^    static unsigned ID2SubX(uint32_t id) {$/;"	f	struct:SkGlyph
ID2SubY	core/SkScalerContext.h	/^    static unsigned ID2SubY(uint32_t id) {$/;"	f	struct:SkGlyph
IDStr	views/SkViewInflate.h	/^    struct IDStr {$/;"	s	class:SkViewInflate
INHERITED	animator/SkAnimatorView.h	/^    typedef SkView INHERITED;$/;"	t	class:SkAnimatorView
INHERITED	core/SkColorFilter.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkColorFilter
INHERITED	core/SkColorFilter.h	/^    typedef SkShader INHERITED;$/;"	t	class:SkFilterShader
INHERITED	core/SkColorShader.h	/^    typedef SkShader INHERITED;$/;"	t	class:SkColorShader
INHERITED	core/SkComposeShader.h	/^    typedef SkShader INHERITED;$/;"	t	class:SkComposeShader
INHERITED	core/SkDrawLooper.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkDrawLooper
INHERITED	core/SkEmptyShader.h	/^    typedef SkShader INHERITED;$/;"	t	class:SkEmptyShader
INHERITED	core/SkImageFilter.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkImageFilter
INHERITED	core/SkMMapStream.h	/^    typedef SkMemoryStream INHERITED;$/;"	t	class:SkMMAPStream
INHERITED	core/SkMallocPixelRef.h	/^    typedef SkPixelRef INHERITED;$/;"	t	class:SkMallocPixelRef
INHERITED	core/SkMaskFilter.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkMaskFilter
INHERITED	core/SkOrderedReadBuffer.h	/^    typedef SkFlattenableReadBuffer INHERITED;$/;"	t	class:SkOrderedReadBuffer
INHERITED	core/SkOrderedWriteBuffer.h	/^    typedef SkFlattenableWriteBuffer INHERITED;$/;"	t	class:SkOrderedWriteBuffer
INHERITED	core/SkPathEffect.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkPathEffect
INHERITED	core/SkPathEffect.h	/^    typedef SkPairPathEffect INHERITED;$/;"	t	class:SkComposePathEffect
INHERITED	core/SkPathEffect.h	/^    typedef SkPairPathEffect INHERITED;$/;"	t	class:SkSumPathEffect
INHERITED	core/SkPathEffect.h	/^    typedef SkPathEffect INHERITED;$/;"	t	class:SkPairPathEffect
INHERITED	core/SkPixelRef.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkPixelRef
INHERITED	core/SkPtrRecorder.h	/^    typedef SkPtrSet INHERITED;$/;"	t	class:SkTPtrSet
INHERITED	core/SkPtrRecorder.h	/^    typedef SkRefCnt INHERITED;$/;"	t	class:SkPtrSet
INHERITED	core/SkRasterizer.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkRasterizer
INHERITED	core/SkShader.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkShader
INHERITED	core/SkShape.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkShape
INHERITED	core/SkTArray.h	/^    typedef SkTArray<T, DATA_TYPE> INHERITED;$/;"	t	class:SkSTArray
INHERITED	core/SkTypeface.h	/^    typedef SkWeakRefCnt INHERITED;$/;"	t	class:SkTypeface
INHERITED	core/SkXfermode.h	/^    typedef SkFlattenable INHERITED;$/;"	t	class:SkXfermode
INHERITED	core/SkXfermode.h	/^    typedef SkXfermode INHERITED;$/;"	t	class:SkProcXfermode
INHERITED	effects/Sk1DPathEffect.h	/^    typedef Sk1DPathEffect INHERITED;$/;"	t	class:SkPath1DPathEffect
INHERITED	effects/Sk1DPathEffect.h	/^    typedef SkPathEffect INHERITED;$/;"	t	class:Sk1DPathEffect
INHERITED	effects/Sk2DPathEffect.h	/^    typedef Sk2DPathEffect INHERITED;$/;"	t	class:SkPath2DPathEffect
INHERITED	effects/Sk2DPathEffect.h	/^    typedef SkPathEffect INHERITED;$/;"	t	class:Sk2DPathEffect
INHERITED	effects/SkAvoidXfermode.h	/^    typedef SkXfermode INHERITED;$/;"	t	class:SkAvoidXfermode
INHERITED	effects/SkBlurDrawLooper.h	/^    typedef SkDrawLooper INHERITED;$/;"	t	class:SkBlurDrawLooper
INHERITED	effects/SkBlurImageFilter.h	/^    typedef SkImageFilter INHERITED;$/;"	t	class:SkBlurImageFilter
INHERITED	effects/SkColorMatrixFilter.h	/^    typedef SkColorFilter INHERITED;$/;"	t	class:SkColorMatrixFilter
INHERITED	effects/SkCornerPathEffect.h	/^    typedef SkPathEffect INHERITED;$/;"	t	class:SkCornerPathEffect
INHERITED	effects/SkDashPathEffect.h	/^    typedef SkPathEffect INHERITED;$/;"	t	class:SkDashPathEffect
INHERITED	effects/SkDiscretePathEffect.h	/^    typedef SkPathEffect INHERITED;$/;"	t	class:SkDiscretePathEffect
INHERITED	effects/SkEmbossMaskFilter.h	/^    typedef SkMaskFilter INHERITED;$/;"	t	class:SkEmbossMaskFilter
INHERITED	effects/SkGroupShape.h	/^    typedef SkShape INHERITED;$/;"	t	class:SkGroupShape
INHERITED	effects/SkKernel33MaskFilter.h	/^    typedef SkKernel33ProcMaskFilter INHERITED;$/;"	t	class:SkKernel33MaskFilter
INHERITED	effects/SkKernel33MaskFilter.h	/^    typedef SkMaskFilter INHERITED;$/;"	t	class:SkKernel33ProcMaskFilter
INHERITED	effects/SkLayerDrawLooper.h	/^    typedef SkDrawLooper INHERITED;$/;"	t	class:SkLayerDrawLooper
INHERITED	effects/SkLayerRasterizer.h	/^    typedef SkRasterizer INHERITED;$/;"	t	class:SkLayerRasterizer
INHERITED	effects/SkMorphologyImageFilter.h	/^    typedef SkImageFilter INHERITED;$/;"	t	class:SkMorphologyImageFilter
INHERITED	effects/SkMorphologyImageFilter.h	/^    typedef SkMorphologyImageFilter INHERITED;$/;"	t	class:SkDilateImageFilter
INHERITED	effects/SkMorphologyImageFilter.h	/^    typedef SkMorphologyImageFilter INHERITED;$/;"	t	class:SkErodeImageFilter
INHERITED	effects/SkPixelXorXfermode.h	/^    typedef SkXfermode INHERITED;$/;"	t	class:SkPixelXorXfermode
INHERITED	effects/SkRectShape.h	/^    typedef SkPaintShape INHERITED;$/;"	t	class:SkRectShape
INHERITED	effects/SkRectShape.h	/^    typedef SkShape INHERITED;$/;"	t	class:SkPaintShape
INHERITED	effects/SkTableMaskFilter.h	/^    typedef SkMaskFilter INHERITED;$/;"	t	class:SkTableMaskFilter
INHERITED	effects/SkTestImageFilters.h	/^    typedef SkImageFilter INHERITED;$/;"	t	class:SkColorFilterImageFilter
INHERITED	effects/SkTestImageFilters.h	/^    typedef SkImageFilter INHERITED;$/;"	t	class:SkComposeImageFilter
INHERITED	effects/SkTestImageFilters.h	/^    typedef SkImageFilter INHERITED;$/;"	t	class:SkDownSampleImageFilter
INHERITED	effects/SkTestImageFilters.h	/^    typedef SkImageFilter INHERITED;$/;"	t	class:SkMergeImageFilter
INHERITED	effects/SkTestImageFilters.h	/^    typedef SkImageFilter INHERITED;$/;"	t	class:SkOffsetImageFilter
INHERITED	effects/SkTransparentShader.h	/^    typedef SkShader INHERITED;$/;"	t	class:SkTransparentShader
INHERITED	gpu/GrCustomStage.h	/^    typedef GrRefCnt INHERITED;$/;"	t	class:GrCustomStage
INHERITED	gpu/GrRenderTarget.h	/^    typedef GrResource INHERITED;$/;"	t	class:GrRenderTarget
INHERITED	gpu/GrResource.h	/^    typedef GrRefCnt INHERITED;$/;"	t	class:GrResource
INHERITED	gpu/GrTextContext.h	/^    typedef GrRefCnt INHERITED;$/;"	t	class:GrTextContext
INHERITED	gpu/GrTexture.h	/^    typedef GrResource INHERITED;$/;"	t	class:GrTexture
INHERITED	gpu/SkGpuCanvas.h	/^    typedef SkCanvas INHERITED;$/;"	t	class:SkGpuCanvas
INHERITED	gpu/SkGpuDevice.h	/^    typedef SkDevice INHERITED;$/;"	t	class:SkGpuDevice
INHERITED	gpu/SkGrTexturePixelRef.h	/^    typedef SkPixelRef INHERITED;$/;"	t	class:SkROLockPixelsPixelRef
INHERITED	gpu/SkGrTexturePixelRef.h	/^    typedef SkROLockPixelsPixelRef INHERITED;$/;"	t	class:SkGrRenderTargetPixelRef
INHERITED	gpu/SkGrTexturePixelRef.h	/^    typedef SkROLockPixelsPixelRef INHERITED;$/;"	t	class:SkGrTexturePixelRef
INHERITED	images/SkFlipPixelRef.h	/^    typedef SkPixelRef INHERITED;$/;"	t	class:SkFlipPixelRef
INHERITED	images/SkImageRef.h	/^    typedef SkPixelRef INHERITED;$/;"	t	class:SkImageRef
INHERITED	images/SkImageRef_GlobalPool.h	/^    typedef SkImageRef INHERITED;$/;"	t	class:SkImageRef_GlobalPool
INHERITED	pdf/SkPDFStream.h	/^    typedef SkPDFDict INHERITED;$/;"	t	class:SkPDFStream
INHERITED	utils/SkDeferredCanvas.h	/^    typedef SkCanvas INHERITED;$/;"	t	class:SkDeferredCanvas
INHERITED	utils/SkDumpCanvas.h	/^    typedef SkCanvas INHERITED;$/;"	t	class:SkDumpCanvas
INHERITED	utils/SkDumpCanvas.h	/^    typedef SkDumpCanvas::Dumper INHERITED;$/;"	t	class:SkFormatDumper
INHERITED	utils/SkDumpCanvas.h	/^    typedef SkFormatDumper INHERITED;$/;"	t	class:SkDebugfDumper
INHERITED	utils/SkInterpolator.h	/^    typedef SkInterpolatorBase INHERITED;$/;"	t	class:SkInterpolator
INHERITED	utils/SkLayer.h	/^    typedef SkRefCnt INHERITED;$/;"	t	class:SkLayer
INHERITED	utils/SkNWayCanvas.h	/^    typedef SkCanvas INHERITED;$/;"	t	class:SkNWayCanvas
INHERITED	utils/SkProxyCanvas.h	/^    typedef SkCanvas INHERITED;$/;"	t	class:SkProxyCanvas
INHERITED	utils/SkUnitMappers.h	/^    typedef SkUnitMapper INHERITED;$/;"	t	class:SkCosineMapper
INHERITED	utils/SkUnitMappers.h	/^    typedef SkUnitMapper INHERITED;$/;"	t	class:SkDiscreteMapper
INHERITED	views/SkBorderView.h	/^    typedef SkWidgetView INHERITED;$/;"	t	class:SkBorderView
INHERITED	views/SkImageView.h	/^    typedef SkView INHERITED;$/;"	t	class:SkImageView
INHERITED	views/SkOSWindow_Android.h	/^    typedef SkWindow INHERITED;$/;"	t	class:SkOSWindow
INHERITED	views/SkOSWindow_Mac.h	/^    typedef SkWindow INHERITED;$/;"	t	class:SkOSWindow
INHERITED	views/SkOSWindow_SDL.h	/^    typedef SkWindow INHERITED;$/;"	t	class:SkOSWindow
INHERITED	views/SkOSWindow_Unix.h	/^    typedef SkWindow INHERITED;$/;"	t	class:SkOSWindow
INHERITED	views/SkOSWindow_Win.h	/^    typedef SkWindow INHERITED; $/;"	t	class:SkOSWindow
INHERITED	views/SkOSWindow_iOS.h	/^    typedef SkWindow INHERITED;$/;"	t	class:SkOSWindow
INHERITED	views/SkOSWindow_wxwidgets.h	/^    typedef SkWindow INHERITED;$/;"	t	class:SkOSWindow
INHERITED	views/SkProgressBarView.h	/^        typedef SkWidgetView INHERITED;$/;"	t	class:SkProgressBarView
INHERITED	views/SkScrollBarView.h	/^    typedef SkWidgetView INHERITED;$/;"	t	class:SkScrollBarView
INHERITED	views/SkStackViewLayout.h	/^    typedef SkView::Layout INHERITED;$/;"	t	class:SkFillViewLayout
INHERITED	views/SkWidget.h	/^    typedef SkButtonWidget INHERITED;$/;"	t	class:SkCheckBoxWidget
INHERITED	views/SkWidget.h	/^    typedef SkButtonWidget INHERITED;$/;"	t	class:SkPushButtonWidget
INHERITED	views/SkWidget.h	/^    typedef SkHasLabelWidget INHERITED;$/;"	t	class:SkButtonWidget
INHERITED	views/SkWidget.h	/^    typedef SkView INHERITED;$/;"	t	class:SkBitmapView
INHERITED	views/SkWidget.h	/^    typedef SkView INHERITED;$/;"	t	class:SkProgressView
INHERITED	views/SkWidget.h	/^    typedef SkView INHERITED;$/;"	t	class:SkStaticTextView
INHERITED	views/SkWidget.h	/^    typedef SkView INHERITED;$/;"	t	class:SkTextView
INHERITED	views/SkWidget.h	/^    typedef SkView INHERITED;$/;"	t	class:SkWidget
INHERITED	views/SkWidget.h	/^    typedef SkWidget INHERITED;$/;"	t	class:SkHasLabelWidget
INHERITED	views/SkWidget.h	/^    typedef SkWidgetView INHERITED;$/;"	t	class:SkGridView
INHERITED	views/SkWidget.h	/^    typedef SkWidgetView INHERITED;$/;"	t	class:SkListView
INHERITED	views/SkWidget.h	/^    typedef SkWidgetView INHERITED;$/;"	t	class:SkSliderView
INHERITED	views/SkWidgetViews.h	/^    typedef SkView INHERITED;$/;"	t	class:SkStaticTextView
INHERITED	views/SkWidgetViews.h	/^    typedef SkView INHERITED;$/;"	t	class:SkWidgetView
INHERITED	views/SkWidgetViews.h	/^    typedef SkWidgetView INHERITED;$/;"	t	class:SkButtonView
INHERITED	views/SkWidgetViews.h	/^    typedef SkWidgetView INHERITED;$/;"	t	class:SkCheckButtonView
INHERITED	views/SkWidgetViews.h	/^    typedef SkWidgetView INHERITED;$/;"	t	class:SkListView
INHERITED	views/SkWindow.h	/^    typedef SkView INHERITED;$/;"	t	class:SkWindow
Info	images/SkMovie.h	/^    struct Info {$/;"	s	class:SkMovie
Intersects	SkRect.h	/^    static bool Intersects(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
Intersects	SkRect.h	/^    static bool Intersects(const SkRect& a, const SkRect& b) {$/;"	f	struct:SkRect
Intersects	core/SkRect.h	/^    static bool Intersects(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
Intersects	core/SkRect.h	/^    static bool Intersects(const SkRect& a, const SkRect& b) {$/;"	f	struct:SkRect
IsCubicDegenerate	core/SkPath.h	/^    static bool IsCubicDegenerate(const SkPoint& p1, const SkPoint& p2,$/;"	f	class:SkPath
IsLineDegenerate	core/SkPath.h	/^    static bool IsLineDegenerate(const SkPoint& p1, const SkPoint& p2) {$/;"	f	class:SkPath
IsMode	core/SkXfermode.h	/^    static bool IsMode(SkXfermode* xfer, Mode* mode) {$/;"	f	class:SkXfermode
IsQuadDegenerate	core/SkPath.h	/^    static bool IsQuadDegenerate(const SkPoint& p1, const SkPoint& p2,$/;"	f	class:SkPath
Item	views/SkOSMenu.h	/^    class Item {$/;"	c	class:SkOSMenu
Iter	core/SkMetaData.h	/^        Iter() : fRec(NULL) {}$/;"	f	class:SkMetaData::Iter
Iter	core/SkMetaData.h	/^    class Iter {$/;"	c	class:SkMetaData
Iter	core/SkOSFile.h	/^    class Iter {$/;"	c	class:SkOSFile
Iter	core/SkPath.h	/^    class SK_API Iter {$/;"	c	class:SkPath
Iter	core/SkTDict.h	/^        Iter(const SkTDict<T>& dict)$/;"	f	class:SkTDict::Iter
Iter	core/SkTDict.h	/^    class Iter {$/;"	c	class:SkTDict
Iter	pdf/SkPDFTypes.h	/^    class Iter {$/;"	c	class:SkPDFDict
Iter	utils/SkJSON.h	/^        class Iter {$/;"	c	class:SkJSON::Object
Iterator	core/SkRegion.h	/^        Iterator() : fRgn(NULL), fDone(true) {}$/;"	f	class:SkRegion::Iterator
Iterator	core/SkRegion.h	/^    class SK_API Iterator {$/;"	c	class:SkRegion
JPEGImageDecoder	images/SkImageDecoder.h	/^DECLARE_DECODER_CREATOR(JPEGImageDecoder);$/;"	v
JPEGImageEncoder	images/SkImageEncoder.h	/^DECLARE_ENCODER_CREATOR(JPEGImageEncoder);$/;"	v
JSContext	xml/SkJS.h	/^    typedef struct JSContext JSContext;$/;"	t	typeref:struct:JSContext
JSObject	xml/SkJS.h	/^    typedef struct JSObject JSObject;$/;"	t	typeref:struct:JSObject
JSRuntime	xml/SkJS.h	/^    typedef struct JSRuntime JSRuntime;$/;"	t	typeref:struct:JSRuntime
JSWord	xml/SkJS.h	/^    typedef long JSWord;$/;"	t
Join	core/SkPaint.h	/^    enum Join {$/;"	g	class:SkPaint
LCDConfig	core/SkDeviceProfile.h	/^    enum LCDConfig {$/;"	g	class:SkDeviceProfile
LCDOrder	SkFontHost.h	/^    enum LCDOrder {$/;"	g	class:SkFontHost
LCDOrder	core/SkFontHost.h	/^    enum LCDOrder {$/;"	g	class:SkFontHost
LCDOrientation	SkFontHost.h	/^    enum LCDOrientation {$/;"	g	class:SkFontHost
LCDOrientation	core/SkFontHost.h	/^    enum LCDOrientation {$/;"	g	class:SkFontHost
LayerInfo	effects/SkLayerDrawLooper.h	/^    struct SK_API LayerInfo {$/;"	s	class:SkLayerDrawLooper
LayerIter	core/SkCanvas.h	/^    class SK_API LayerIter \/*: SkNoncopyable*\/ {$/;"	c	class:SkCanvas
Layout	views/SkView.h	/^    class Layout : public SkRefCnt {$/;"	c	class:SkView
Light	effects/SkEmbossMaskFilter.h	/^    struct Light {$/;"	s	class:SkEmbossMaskFilter
LineToResult	utils/SkCullPoints.h	/^    enum LineToResult {$/;"	g	class:SkCullPoints
MASK_FORMAT_JUST_ADVANCE	core/SkScalerContext.h	/^#define MASK_FORMAT_JUST_ADVANCE /;"	d
MASK_FORMAT_UNKNOWN	core/SkScalerContext.h	/^#define MASK_FORMAT_UNKNOWN /;"	d
MAX_KERNEL_WIDTH	gpu/GrSamplerState.h	/^#define MAX_KERNEL_WIDTH /;"	d
Make	core/SkPoint.h	/^    static SkIPoint Make(int32_t x, int32_t y) {$/;"	f	struct:SkIPoint
Make	core/SkPoint.h	/^    static SkPoint Make(SkScalar x, SkScalar y) {$/;"	f	struct:SkPoint
Make	core/SkSize.h	/^    static SkSize Make(SkScalar w, SkScalar h) {$/;"	f	struct:SkSize
Make	core/SkSize.h	/^    static SkTSize Make(T w, T h) {$/;"	f	struct:SkTSize
MakeEmpty	SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeEmpty() {$/;"	f	struct:SkIRect
MakeEmpty	SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeEmpty() {$/;"	f	struct:SkRect
MakeEmpty	core/SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeEmpty() {$/;"	f	struct:SkIRect
MakeEmpty	core/SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeEmpty() {$/;"	f	struct:SkRect
MakeID	core/SkScalerContext.h	/^    static uint32_t MakeID(unsigned code) {$/;"	f	struct:SkGlyph
MakeID	core/SkScalerContext.h	/^    static uint32_t MakeID(unsigned code, SkFixed x, SkFixed y) {$/;"	f	struct:SkGlyph
MakeLTRB	SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeLTRB(int32_t l, int32_t t, int32_t r, int32_t b) {$/;"	f	struct:SkIRect
MakeLTRB	SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeLTRB(SkScalar l, SkScalar t, SkScalar r, SkScalar b) {$/;"	f	struct:SkRect
MakeLTRB	core/SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeLTRB(int32_t l, int32_t t, int32_t r, int32_t b) {$/;"	f	struct:SkIRect
MakeLTRB	core/SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeLTRB(SkScalar l, SkScalar t, SkScalar r, SkScalar b) {$/;"	f	struct:SkRect
MakeSize	SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeSize(const SkISize& size) {$/;"	f	struct:SkIRect
MakeSize	SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeSize(const SkSize& size) {$/;"	f	struct:SkRect
MakeSize	core/SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeSize(const SkISize& size) {$/;"	f	struct:SkIRect
MakeSize	core/SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeSize(const SkSize& size) {$/;"	f	struct:SkRect
MakeWH	SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeWH(int32_t w, int32_t h) {$/;"	f	struct:SkIRect
MakeWH	SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeWH(SkScalar w, SkScalar h) {$/;"	f	struct:SkRect
MakeWH	core/SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeWH(int32_t w, int32_t h) {$/;"	f	struct:SkIRect
MakeWH	core/SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeWH(SkScalar w, SkScalar h) {$/;"	f	struct:SkRect
MakeXYWH	SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeXYWH(int32_t x, int32_t y, int32_t w, int32_t h) {$/;"	f	struct:SkIRect
MakeXYWH	SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeXYWH(SkScalar x, SkScalar y, SkScalar w, SkScalar h) {$/;"	f	struct:SkRect
MakeXYWH	core/SkRect.h	/^    static SkIRect SK_WARN_UNUSED_RESULT MakeXYWH(int32_t x, int32_t y, int32_t w, int32_t h) {$/;"	f	struct:SkIRect
MakeXYWH	core/SkRect.h	/^    static SkRect SK_WARN_UNUSED_RESULT MakeXYWH(SkScalar x, SkScalar y, SkScalar w, SkScalar h) {$/;"	f	struct:SkRect
MapPtsProc	core/SkMatrix.h	/^    typedef void (*MapPtsProc)(const SkMatrix& mat, SkPoint dst[],$/;"	t	class:SkMatrix
MapXYProc	core/SkMatrix.h	/^    typedef void (*MapXYProc)(const SkMatrix& mat, SkScalar x, SkScalar y,$/;"	t	class:SkMatrix
MatrixClass	core/SkShader.h	/^    enum MatrixClass {$/;"	g	class:SkShader
MatrixFlags	core/SkPathMeasure.h	/^    enum MatrixFlags {$/;"	g	class:SkPathMeasure
MetricType	core/SkAdvancedTypefaceMetrics.h	/^        enum MetricType {$/;"	g	struct:SkAdvancedTypefaceMetrics::AdvanceMetric
MipLevel	SkBitmap.cpp	/^struct MipLevel {$/;"	s	file:
MipMap	SkBitmap.cpp	/^struct SkBitmap::MipMap : SkNoncopyable {$/;"	s	class:SkBitmap	file:
Mode	core/SkXfermode.h	/^    enum Mode {$/;"	g	class:SkXfermode
Mode	effects/SkAvoidXfermode.h	/^    enum Mode {$/;"	g	class:SkAvoidXfermode
Mode	effects/SkPorterDuff.h	/^    enum Mode {$/;"	g	class:SkPorterDuff
Mode	images/SkImageDecoder.h	/^    enum Mode {$/;"	g	class:SkImageDecoder
Mode	utils/SkTextBox.h	/^    enum Mode {$/;"	g	class:SkTextBox
Mode	views/SkTextBox.h	/^    enum Mode {$/;"	g	class:SkTextBox
Mode	views/SkWidget.h	/^    enum Mode {$/;"	g	class:SkStaticTextView
Mode	views/SkWidgetViews.h	/^    enum Mode {$/;"	g	class:SkStaticTextView
MyRegistrar	effects/SkLayerDrawLooper.h	/^    class MyRegistrar : public SkFlattenable::Registrar {$/;"	c	class:SkLayerDrawLooper
NOT_IMPLEMENTED	pdf/SkPDFUtils.h	/^#define NOT_IMPLEMENTED(/;"	d
Node	xml/SkDOM.h	/^    typedef SkDOMNode Node;$/;"	t	class:SkDOM
NumPathCmdPoints	gpu/GrTypes.h	/^static int inline NumPathCmdPoints(GrPathCmd cmd) {$/;"	f
Object	utils/SkJSON.h	/^    class Object {$/;"	c	class:SkJSON
Offset	core/SkPoint.h	/^    static void Offset(SkPoint points[], int count, SkScalar dx, SkScalar dy) {$/;"	f	struct:SkPoint
Offset	core/SkPoint.h	/^    static void Offset(SkPoint points[], int count, const SkPoint& offset) {$/;"	f	struct:SkPoint
OnShrink	SkTypes.h	/^    enum OnShrink {$/;"	g	class:SkAutoMalloc
OnShrink	core/SkTypes.h	/^    enum OnShrink {$/;"	g	class:SkAutoMalloc
Op	core/SkRegion.h	/^    enum Op {$/;"	g	class:SkRegion
Orient	views/SkStackViewLayout.h	/^    enum Orient {$/;"	g	class:SkStackViewLayout
PIXELREF_MUTEX_RING_COUNT	SkPixelRef.cpp	/^#define PIXELREF_MUTEX_RING_COUNT /;"	d	file:
PNGImageDecoder	images/SkImageDecoder.h	/^DECLARE_DECODER_CREATOR(PNGImageDecoder);$/;"	v
PNGImageEncoder	images/SkImageEncoder.h	/^DECLARE_ENCODER_CREATOR(PNGImageEncoder);$/;"	v
PRINT_NOT_IMPL	pdf/SkPDFUtils.h	/^#define PRINT_NOT_IMPL(/;"	d
Pack	gpu/GrGlyph.h	/^    static inline PackedID Pack(uint16_t glyphID, GrFixed x, GrFixed y) {$/;"	f	struct:GrGlyph
Pack	views/SkStackViewLayout.h	/^    enum Pack {$/;"	g	class:SkStackViewLayout
PackedID	gpu/GrGlyph.h	/^    typedef uint32_t PackedID;$/;"	t	struct:GrGlyph
Pair	core/SkPtrRecorder.h	/^    struct Pair {$/;"	s	class:SkPtrSet
Pair	core/SkTDict.h	/^    struct Pair {$/;"	s	class:SkTDict
Peeker	images/SkImageDecoder.h	/^    class Peeker : public SkRefCnt {$/;"	c	class:SkImageDecoder
PerGlyphInfo	core/SkAdvancedTypefaceMetrics.h	/^    enum PerGlyphInfo {$/;"	g	class:SkAdvancedTypefaceMetrics
PixelOpsFlags	gpu/GrContext.h	/^    enum PixelOpsFlags {$/;"	g	class:GrContext
PointMode	core/SkCanvas.h	/^    enum PointMode {$/;"	g	class:SkCanvas
Proc	core/SkBlitRow.h	/^    typedef void (*Proc)(uint16_t* dst,$/;"	t	class:SkBlitRow
Proc	effects/SkColorMatrixFilter.h	/^    typedef void (*Proc)(State*, unsigned r, unsigned g, unsigned b,$/;"	t	class:SkColorMatrixFilter
Proc	views/SkEvent.h	/^    typedef bool (*Proc)(const SkEvent& evt);$/;"	t	class:SkEvent
Proc32	core/SkBlitRow.h	/^    typedef void (*Proc32)(uint32_t* dst,$/;"	t	class:SkBlitRow
Proxy	core/SkImageFilter.h	/^    class Proxy {$/;"	c	class:SkImageFilter
PtrProc	core/SkMetaData.h	/^    typedef void* (*PtrProc)(void* ptr, bool doRef);$/;"	t	class:SkMetaData
RLEPixels	SkBitmap.cpp	/^SkBitmap::RLEPixels::RLEPixels(int width, int height) {$/;"	f	class:SkBitmap::RLEPixels
RLEPixels	SkBitmap.h	/^    class RLEPixels {$/;"	c	class:SkBitmap
RLEPixels	core/SkBitmap.h	/^    class RLEPixels {$/;"	c	class:SkBitmap
RawIter	core/SkPath.h	/^    class SK_API RawIter {$/;"	c	class:SkPath
Rec	core/SkGlobals.h	/^    class Rec {$/;"	c	class:SkGlobals
Rec	core/SkMetaData.h	/^    struct Rec {$/;"	s	class:SkMetaData
Rec	core/SkScalerContext.h	/^    struct Rec {$/;"	s	class:SkScalerContext
Rec	core/SkString.h	/^    struct Rec {$/;"	s	class:SkString
Rec	core/SkTDStack.h	/^    struct Rec {$/;"	s	class:SkTDStack
Rec	effects/SkGroupShape.h	/^    struct Rec {$/;"	s	class:SkGroupShape
Rec	effects/SkLayerDrawLooper.h	/^    struct Rec {$/;"	s	class:SkLayerDrawLooper
Rec	pdf/SkPDFCatalog.h	/^        Rec(SkPDFObject* object, bool onFirstPage)$/;"	f	struct:SkPDFCatalog::Rec
Rec	pdf/SkPDFCatalog.h	/^    struct Rec {$/;"	s	class:SkPDFCatalog
Rec	pdf/SkPDFTypes.h	/^    struct Rec {$/;"	s	class:SkPDFDict
Rec	utils/SkCamera.h	/^    struct Rec {$/;"	s	class:Sk3DView
Rec	views/SkTouchGesture.h	/^    struct Rec {$/;"	s	class:SkTouchGesture
RecordingFlags	core/SkPicture.h	/^    enum RecordingFlags {$/;"	g	class:SkPicture
RectType	core/SkDraw.h	/^    enum RectType {$/;"	g	class:SkDraw
Registrar	core/SkFlattenable.h	/^        Registrar(const char name[], Factory factory) {$/;"	f	class:SkFlattenable::Registrar
Registrar	core/SkFlattenable.h	/^    class Registrar {$/;"	c	class:SkFlattenable
ReleaseProc	core/SkData.h	/^    typedef void (*ReleaseProc)(const void* ptr, size_t length, void* context);$/;"	t	class:SkData
ResolveType	gpu/GrRenderTarget.h	/^    enum ResolveType {$/;"	g	class:GrRenderTarget
Result	utils/SkInterpolator.h	/^    enum Result {$/;"	g	class:SkInterpolatorBase
RunType	core/SkRegion.h	/^    typedef int32_t RunType;$/;"	t	class:SkRegion
S16CPU	SkTypes.h	/^typedef int S16CPU;$/;"	t
S16CPU	core/SkTypes.h	/^typedef int S16CPU;$/;"	t
S8CPU	SkTypes.h	/^typedef int S8CPU;$/;"	t
S8CPU	core/SkTypes.h	/^typedef int S8CPU;$/;"	t
SERIALIZE_PIXELTYPE_NONE	SkBitmap.cpp	/^    SERIALIZE_PIXELTYPE_NONE,$/;"	e	enum:__anon39	file:
SERIALIZE_PIXELTYPE_RAW_NO_CTABLE	SkBitmap.cpp	/^    SERIALIZE_PIXELTYPE_RAW_NO_CTABLE,$/;"	e	enum:__anon39	file:
SERIALIZE_PIXELTYPE_RAW_WITH_CTABLE	SkBitmap.cpp	/^    SERIALIZE_PIXELTYPE_RAW_WITH_CTABLE,$/;"	e	enum:__anon39	file:
SERIALIZE_PIXELTYPE_REF_DATA	SkBitmap.cpp	/^    SERIALIZE_PIXELTYPE_REF_DATA,$/;"	e	enum:__anon39	file:
SERIALIZE_PIXELTYPE_REF_PTR	SkBitmap.cpp	/^    SERIALIZE_PIXELTYPE_REF_PTR$/;"	e	enum:__anon39	file:
SHOW_FPS	views/SkWindow.h	/^    #define SHOW_FPS$/;"	d
SKIA_IMPLEMENTATION	core/SkPreConfig.h	/^    #define SKIA_IMPLEMENTATION /;"	d
SKIA_VERSION_MAJOR	SkTypes.h	/^#define SKIA_VERSION_MAJOR /;"	d
SKIA_VERSION_MAJOR	core/SkTypes.h	/^#define SKIA_VERSION_MAJOR /;"	d
SKIA_VERSION_MINOR	SkTypes.h	/^#define SKIA_VERSION_MINOR /;"	d
SKIA_VERSION_MINOR	core/SkTypes.h	/^#define SKIA_VERSION_MINOR /;"	d
SKIA_VERSION_PATCH	SkTypes.h	/^#define SKIA_VERSION_PATCH /;"	d
SKIA_VERSION_PATCH	core/SkTypes.h	/^#define SKIA_VERSION_PATCH /;"	d
SKPIXELREF_PRELOCKED_LOCKCOUNT	SkPixelRef.cpp	/^#define SKPIXELREF_PRELOCKED_LOCKCOUNT /;"	d	file:
SK_A32_BITS	SkColorPriv.h	/^#define SK_A32_BITS /;"	d
SK_A32_BITS	core/SkColorPriv.h	/^#define SK_A32_BITS /;"	d
SK_A32_MASK	SkColorPriv.h	/^#define SK_A32_MASK /;"	d
SK_A32_MASK	core/SkColorPriv.h	/^#define SK_A32_MASK /;"	d
SK_A32_SHIFT	config/SkUserConfig.h	/^        #define SK_A32_SHIFT /;"	d
SK_A32_SHIFT	core/SkPostConfig.h	/^        #define SK_A32_SHIFT /;"	d
SK_A4444_SHIFT	SkColorPriv.h	/^#define SK_A4444_SHIFT /;"	d
SK_A4444_SHIFT	core/SkColorPriv.h	/^#define SK_A4444_SHIFT /;"	d
SK_ALLOW_STATIC_GLOBAL_INITIALIZERS	core/SkPostConfig.h	/^#define SK_ALLOW_STATIC_GLOBAL_INITIALIZERS /;"	d
SK_API	core/SkPreConfig.h	/^            #define SK_API /;"	d
SK_API	core/SkPreConfig.h	/^        #define SK_API /;"	d
SK_API	core/SkPreConfig.h	/^    #define SK_API$/;"	d
SK_ARM_ARCH	core/SkPostConfig.h	/^#    define SK_ARM_ARCH /;"	d
SK_ARM_ARCH	core/SkPostConfig.h	/^#    undef SK_ARM_ARCH$/;"	d
SK_ARM_ARCH	core/SkPostConfig.h	/^#  define SK_ARM_ARCH /;"	d
SK_ARM_HAS_EDSP	core/SkPostConfig.h	/^#    define SK_ARM_HAS_EDSP /;"	d
SK_ARM_HAS_EDSP	core/SkPostConfig.h	/^#  undef SK_ARM_HAS_EDSP$/;"	d
SK_ARRAY_COUNT	SkTypes.h	/^#define SK_ARRAY_COUNT(/;"	d
SK_ARRAY_COUNT	core/SkTypes.h	/^#define SK_ARRAY_COUNT(/;"	d
SK_B16_BITS	SkColorPriv.h	/^#define SK_B16_BITS /;"	d
SK_B16_BITS	core/SkColorPriv.h	/^#define SK_B16_BITS /;"	d
SK_B16_MASK	SkColorPriv.h	/^#define SK_B16_MASK /;"	d
SK_B16_MASK	core/SkColorPriv.h	/^#define SK_B16_MASK /;"	d
SK_B16_MASK_IN_PLACE	SkColorPriv.h	/^#define SK_B16_MASK_IN_PLACE /;"	d
SK_B16_MASK_IN_PLACE	core/SkColorPriv.h	/^#define SK_B16_MASK_IN_PLACE /;"	d
SK_B16_SHIFT	SkColorPriv.h	/^#define SK_B16_SHIFT /;"	d
SK_B16_SHIFT	core/SkColorPriv.h	/^#define SK_B16_SHIFT /;"	d
SK_B32_BITS	SkColorPriv.h	/^#define SK_B32_BITS /;"	d
SK_B32_BITS	core/SkColorPriv.h	/^#define SK_B32_BITS /;"	d
SK_B32_MASK	SkColorPriv.h	/^#define SK_B32_MASK /;"	d
SK_B32_MASK	core/SkColorPriv.h	/^#define SK_B32_MASK /;"	d
SK_B32_SHIFT	config/SkUserConfig.h	/^        #define SK_B32_SHIFT /;"	d
SK_B32_SHIFT	core/SkPostConfig.h	/^        #define SK_B32_SHIFT /;"	d
SK_B4444_SHIFT	SkColorPriv.h	/^#define SK_B4444_SHIFT /;"	d
SK_B4444_SHIFT	core/SkColorPriv.h	/^#define SK_B4444_SHIFT /;"	d
SK_BUILD_FOR_ANDROID	core/SkPreConfig.h	/^        #define SK_BUILD_FOR_ANDROID$/;"	d
SK_BUILD_FOR_ANDROID	core/SkPreConfig.h	/^    #define SK_BUILD_FOR_ANDROID$/;"	d
SK_BUILD_FOR_ANDROID_NDK	core/SkPreConfig.h	/^        #define SK_BUILD_FOR_ANDROID_NDK$/;"	d
SK_BUILD_FOR_IOS	core/SkPreConfig.h	/^        #define SK_BUILD_FOR_IOS$/;"	d
SK_BUILD_FOR_MAC	core/SkPreConfig.h	/^        #define SK_BUILD_FOR_MAC$/;"	d
SK_BUILD_FOR_PALM	core/SkPreConfig.h	/^        #define SK_BUILD_FOR_PALM$/;"	d
SK_BUILD_FOR_UNIX	core/SkPreConfig.h	/^        #define SK_BUILD_FOR_UNIX$/;"	d
SK_BUILD_FOR_WIN	core/SkPostConfig.h	/^    #define SK_BUILD_FOR_WIN$/;"	d
SK_BUILD_FOR_WIN32	core/SkPreConfig.h	/^        #define SK_BUILD_FOR_WIN32$/;"	d
SK_BUILD_FOR_WINCE	core/SkPreConfig.h	/^        #define SK_BUILD_FOR_WINCE$/;"	d
SK_CAN_USE_FLOAT	core/SkPostConfig.h	/^    #define SK_CAN_USE_FLOAT$/;"	d
SK_CAN_USE_FLOAT	core/SkPreConfig.h	/^    #define SK_CAN_USE_FLOAT$/;"	d
SK_COMPILE_ASSERT	SkTypes.h	/^#define SK_COMPILE_ASSERT(/;"	d
SK_COMPILE_ASSERT	core/SkTypes.h	/^#define SK_COMPILE_ASSERT(/;"	d
SK_CPU_BENDIAN	core/SkPreConfig.h	/^        #define SK_CPU_BENDIAN$/;"	d
SK_CPU_HAS_CONDITIONAL_INSTR	core/SkPreConfig.h	/^    #define SK_CPU_HAS_CONDITIONAL_INSTR$/;"	d
SK_CPU_LENDIAN	core/SkPreConfig.h	/^        #define SK_CPU_LENDIAN$/;"	d
SK_CRASH	core/SkPostConfig.h	/^    #define SK_CRASH(/;"	d
SK_ColorBLACK	core/SkColor.h	/^#define SK_ColorBLACK /;"	d
SK_ColorBLUE	core/SkColor.h	/^#define SK_ColorBLUE /;"	d
SK_ColorCYAN	core/SkColor.h	/^#define SK_ColorCYAN /;"	d
SK_ColorDKGRAY	core/SkColor.h	/^#define SK_ColorDKGRAY /;"	d
SK_ColorGRAY	core/SkColor.h	/^#define SK_ColorGRAY /;"	d
SK_ColorGREEN	core/SkColor.h	/^#define SK_ColorGREEN /;"	d
SK_ColorLTGRAY	core/SkColor.h	/^#define SK_ColorLTGRAY /;"	d
SK_ColorMAGENTA	core/SkColor.h	/^#define SK_ColorMAGENTA /;"	d
SK_ColorRED	core/SkColor.h	/^#define SK_ColorRED /;"	d
SK_ColorWHITE	core/SkColor.h	/^#define SK_ColorWHITE /;"	d
SK_ColorYELLOW	core/SkColor.h	/^#define SK_ColorYELLOW /;"	d
SK_DEBUG	core/SkPreConfig.h	/^        #define SK_DEBUG$/;"	d
SK_DEBUGBREAK	core/SkPostConfig.h	/^        #define SK_DEBUGBREAK(/;"	d
SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP	core/SkFlattenable.h	/^#define SK_DECLARE_FLATTENABLE_REGISTRAR_GROUP(/;"	d
SK_DECLARE_GLOBAL_MUTEX	core/SkThread_platform.h	/^#define SK_DECLARE_GLOBAL_MUTEX(/;"	d
SK_DECLARE_MUTEX_ARRAY	core/SkThread_platform.h	/^#define SK_DECLARE_MUTEX_ARRAY(/;"	d
SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS	core/SkFlattenable.h	/^#define SK_DECLARE_PUBLIC_FLATTENABLE_DESERIALIZATION_PROCS(/;"	d
SK_DECLARE_STATIC_MUTEX	core/SkThread_platform.h	/^#define SK_DECLARE_STATIC_MUTEX(/;"	d
SK_DECLARE_UNFLATTENABLE_OBJECT	core/SkFlattenable.h	/^#define SK_DECLARE_UNFLATTENABLE_OBJECT(/;"	d
SK_DEFINE_FLATTENABLE_REGISTRAR	core/SkFlattenable.h	/^#define SK_DEFINE_FLATTENABLE_REGISTRAR(/;"	d
SK_DEFINE_FLATTENABLE_REGISTRAR_ENTRY	core/SkFlattenable.h	/^#define SK_DEFINE_FLATTENABLE_REGISTRAR_ENTRY(/;"	d
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_END	core/SkFlattenable.h	/^#define SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_END /;"	d
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_END	core/SkFlattenable.h	/^#define SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_END$/;"	d
SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_START	core/SkFlattenable.h	/^#define SK_DEFINE_FLATTENABLE_REGISTRAR_GROUP_START(/;"	d
SK_DISABLE_DITHER_32BIT_GRADIENT	config/SkUserConfig.h	/^#define SK_DISABLE_DITHER_32BIT_GRADIENT$/;"	d
SK_DRAW_EXTRA_PATH_EFFECT_H	effects/SkDrawExtraPathEffect.h	/^#define SK_DRAW_EXTRA_PATH_EFFECT_H$/;"	d
SK_DefaultMiterLimit	core/SkStroke.h	/^#define SK_DefaultMiterLimit /;"	d
SK_DefaultStrokeWidth	core/SkStroke.h	/^#define SK_DefaultStrokeWidth /;"	d
SK_DitherValueMax4444	core/SkDither.h	/^#define SK_DitherValueMax4444 /;"	d
SK_DitherValueMax565	core/SkDither.h	/^#define SK_DitherValueMax565 /;"	d
SK_ERROR_INVALID_PROFILE	utils/SkWGL.h	/^#define SK_ERROR_INVALID_PROFILE /;"	d
SK_ERROR_INVALID_VERSION	utils/SkWGL.h	/^#define SK_ERROR_INVALID_VERSION /;"	d
SK_EventType_Delay	views/SkSystemEventTypes.h	/^#define SK_EventType_Delay /;"	d
SK_EventType_Inval	views/SkSystemEventTypes.h	/^#define SK_EventType_Inval /;"	d
SK_EventType_Key	views/SkSystemEventTypes.h	/^#define SK_EventType_Key /;"	d
SK_EventType_KeyUp	views/SkSystemEventTypes.h	/^#define SK_EventType_KeyUp /;"	d
SK_EventType_OnEnd	views/SkSystemEventTypes.h	/^#define SK_EventType_OnEnd /;"	d
SK_EventType_Unichar	views/SkSystemEventTypes.h	/^#define SK_EventType_Unichar /;"	d
SK_FDot6Half	core/SkFDot6.h	/^#define SK_FDot6Half /;"	d
SK_FDot6One	core/SkFDot6.h	/^#define SK_FDot6One /;"	d
SK_Fixed1	core/SkFixed.h	/^#define SK_Fixed1 /;"	d
SK_FixedHalf	core/SkFixed.h	/^#define SK_FixedHalf /;"	d
SK_FixedMax	core/SkFixed.h	/^#define SK_FixedMax /;"	d
SK_FixedMin	core/SkFixed.h	/^#define SK_FixedMin /;"	d
SK_FixedNaN	core/SkFixed.h	/^#define SK_FixedNaN /;"	d
SK_FixedNearlyZero	core/SkFixed.h	/^#define SK_FixedNearlyZero /;"	d
SK_FixedPI	core/SkFixed.h	/^#define SK_FixedPI /;"	d
SK_FixedRoot2Over2	core/SkFixed.h	/^#define SK_FixedRoot2Over2 /;"	d
SK_FixedSqrt2	core/SkFixed.h	/^#define SK_FixedSqrt2 /;"	d
SK_FixedTanPIOver8	core/SkFixed.h	/^#define SK_FixedTanPIOver8 /;"	d
SK_Fract1	core/SkFixed.h	/^#define SK_Fract1 /;"	d
SK_FractPIOver180	core/SkFixed.h	/^#define SK_FractPIOver180 /;"	d
SK_G16_BITS	SkColorPriv.h	/^#define SK_G16_BITS /;"	d
SK_G16_BITS	core/SkColorPriv.h	/^#define SK_G16_BITS /;"	d
SK_G16_MASK	SkColorPriv.h	/^#define SK_G16_MASK /;"	d
SK_G16_MASK	core/SkColorPriv.h	/^#define SK_G16_MASK /;"	d
SK_G16_MASK_IN_PLACE	SkColorPriv.h	/^#define SK_G16_MASK_IN_PLACE /;"	d
SK_G16_MASK_IN_PLACE	core/SkColorPriv.h	/^#define SK_G16_MASK_IN_PLACE /;"	d
SK_G16_SHIFT	SkColorPriv.h	/^#define SK_G16_SHIFT /;"	d
SK_G16_SHIFT	core/SkColorPriv.h	/^#define SK_G16_SHIFT /;"	d
SK_G32_BITS	SkColorPriv.h	/^#define SK_G32_BITS /;"	d
SK_G32_BITS	core/SkColorPriv.h	/^#define SK_G32_BITS /;"	d
SK_G32_MASK	SkColorPriv.h	/^#define SK_G32_MASK /;"	d
SK_G32_MASK	core/SkColorPriv.h	/^#define SK_G32_MASK /;"	d
SK_G32_SHIFT	config/SkUserConfig.h	/^        #define SK_G32_SHIFT /;"	d
SK_G32_SHIFT	core/SkPostConfig.h	/^        #define SK_G32_SHIFT /;"	d
SK_G4444_SHIFT	SkColorPriv.h	/^#define SK_G4444_SHIFT /;"	d
SK_G4444_SHIFT	core/SkColorPriv.h	/^#define SK_G4444_SHIFT /;"	d
SK_GL	gpu/SkGLContext.h	/^#define SK_GL(/;"	d
SK_HAS_COMPILER_FEATURE	core/SkPostConfig.h	/^        #define SK_HAS_COMPILER_FEATURE(/;"	d
SK_IGNORE_STDINT_DOT_H	config/SkUserConfig.h	/^    #define SK_IGNORE_STDINT_DOT_H /;"	d
SK_INIT_TO_AVOID_WARNING	SkTypes.h	/^#define SK_INIT_TO_AVOID_WARNING /;"	d
SK_INIT_TO_AVOID_WARNING	core/SkTypes.h	/^#define SK_INIT_TO_AVOID_WARNING /;"	d
SK_LOCAL_LEAN_AND_MEAN	utils/SkWGL.h	/^    #define SK_LOCAL_LEAN_AND_MEAN$/;"	d
SK_LOCAL_LEAN_AND_MEAN	utils/SkWGL.h	/^    #undef SK_LOCAL_LEAN_AND_MEAN$/;"	d
SK_MALLOC_TEMP	SkTypes.h	/^    SK_MALLOC_TEMP  = 0x01, \/\/!< hint to sk_malloc that the requested memory will be freed in the scope of the stack frame$/;"	e	enum:__anon40
SK_MALLOC_TEMP	core/SkTypes.h	/^    SK_MALLOC_TEMP  = 0x01, \/\/!< hint to sk_malloc that the requested memory will be freed in the scope of the stack frame$/;"	e	enum:__anon27
SK_MALLOC_THROW	SkTypes.h	/^    SK_MALLOC_THROW = 0x02  \/\/!< instructs sk_malloc to call sk_throw if the memory cannot be allocated.$/;"	e	enum:__anon40
SK_MALLOC_THROW	core/SkTypes.h	/^    SK_MALLOC_THROW = 0x02  \/\/!< instructs sk_malloc to call sk_throw if the memory cannot be allocated.$/;"	e	enum:__anon27
SK_MScalar1	utils/SkMatrix44.h	/^static const SkMScalar SK_MScalar1 = 1;$/;"	v
SK_MScalarPI	utils/SkMatrix44.h	/^    static const SkMScalar SK_MScalarPI = 3.141592653589793;$/;"	v
SK_MScalarPI	utils/SkMatrix44.h	/^    static const SkMScalar SK_MScalarPI = 3.14159265f;$/;"	v
SK_MSec1	SkTypes.h	/^#define SK_MSec1 /;"	d
SK_MSec1	core/SkTypes.h	/^#define SK_MSec1 /;"	d
SK_MSecMax	SkTypes.h	/^#define SK_MSecMax /;"	d
SK_MSecMax	core/SkTypes.h	/^#define SK_MSecMax /;"	d
SK_MaxS16	SkTypes.h	/^#define SK_MaxS16 /;"	d
SK_MaxS16	core/SkTypes.h	/^#define SK_MaxS16 /;"	d
SK_MaxS32	SkTypes.h	/^#define SK_MaxS32 /;"	d
SK_MaxS32	core/SkTypes.h	/^#define SK_MaxS32 /;"	d
SK_MaxU16	SkTypes.h	/^#define SK_MaxU16 /;"	d
SK_MaxU16	core/SkTypes.h	/^#define SK_MaxU16 /;"	d
SK_MaxU32	SkTypes.h	/^#define SK_MaxU32 /;"	d
SK_MaxU32	core/SkTypes.h	/^#define SK_MaxU32 /;"	d
SK_MinS16	SkTypes.h	/^#define SK_MinS16 /;"	d
SK_MinS16	core/SkTypes.h	/^#define SK_MinS16 /;"	d
SK_MinS32	SkTypes.h	/^#define SK_MinS32 /;"	d
SK_MinS32	core/SkTypes.h	/^#define SK_MinS32 /;"	d
SK_MinU16	SkTypes.h	/^#define SK_MinU16 /;"	d
SK_MinU16	core/SkTypes.h	/^#define SK_MinU16 /;"	d
SK_MinU32	SkTypes.h	/^#define SK_MinU32 /;"	d
SK_MinU32	core/SkTypes.h	/^#define SK_MinU32 /;"	d
SK_NaN32	SkTypes.h	/^#define SK_NaN32 /;"	d
SK_NaN32	core/SkTypes.h	/^#define SK_NaN32 /;"	d
SK_OFFSETOF	SkTypes.h	/^    #define SK_OFFSETOF(/;"	d
SK_OFFSETOF	core/SkTypes.h	/^    #define SK_OFFSETOF(/;"	d
SK_OFFSETOF	svg/SkSVGAttribute.h	/^#define SK_OFFSETOF(/;"	d
SK_OVERRIDE	core/SkBlitter.h	/^                           const int16_t runs[]) SK_OVERRIDE;$/;"	m	class:SkNullBlitter
SK_OVERRIDE	core/SkBlitter.h	/^                           const int16_t runs[]) SK_OVERRIDE;$/;"	m	class:SkRectClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^                           const int16_t runs[]) SK_OVERRIDE;$/;"	m	class:SkRgnClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^                     SkAlpha leftAlpha, SkAlpha rightAlpha) SK_OVERRIDE;$/;"	m	class:SkRectClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^                     SkAlpha leftAlpha, SkAlpha rightAlpha) SK_OVERRIDE;$/;"	m	class:SkRgnClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual const SkBitmap* justAnOpaqueColor(uint32_t* value) SK_OVERRIDE;$/;"	m	class:SkNullBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual const SkBitmap* justAnOpaqueColor(uint32_t* value) SK_OVERRIDE;$/;"	m	class:SkRectClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual const SkBitmap* justAnOpaqueColor(uint32_t* value) SK_OVERRIDE;$/;"	m	class:SkRgnClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitH(int x, int y, int width) SK_OVERRIDE;$/;"	m	class:SkNullBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitH(int x, int y, int width) SK_OVERRIDE;$/;"	m	class:SkRectClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitH(int x, int y, int width) SK_OVERRIDE;$/;"	m	class:SkRgnClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitMask(const SkMask&, const SkIRect& clip) SK_OVERRIDE;$/;"	m	class:SkNullBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitMask(const SkMask&, const SkIRect& clip) SK_OVERRIDE;$/;"	m	class:SkRectClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitMask(const SkMask&, const SkIRect& clip) SK_OVERRIDE;$/;"	m	class:SkRgnClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitRect(int x, int y, int width, int height) SK_OVERRIDE;$/;"	m	class:SkNullBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitRect(int x, int y, int width, int height) SK_OVERRIDE;$/;"	m	class:SkRectClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitRect(int x, int y, int width, int height) SK_OVERRIDE;$/;"	m	class:SkRgnClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitV(int x, int y, int height, SkAlpha alpha) SK_OVERRIDE;$/;"	m	class:SkNullBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitV(int x, int y, int height, SkAlpha alpha) SK_OVERRIDE;$/;"	m	class:SkRectClipBlitter
SK_OVERRIDE	core/SkBlitter.h	/^    virtual void blitV(int x, int y, int height, SkAlpha alpha) SK_OVERRIDE;$/;"	m	class:SkRgnClipBlitter
SK_OVERRIDE	core/SkColorFilter.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkFilterShader
SK_OVERRIDE	core/SkColorShader.h	/^                                 SkScalar* twoPointRadialParams) const SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^                            const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^    virtual GradientType asAGradient(GradientInfo* info) const SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^    virtual bool isOpaque() const SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^    virtual uint32_t getFlags() SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^    virtual uint8_t getSpan16Alpha() const SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^    virtual void shadeSpan(int x, int y, SkPMColor span[], int count) SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^    virtual void shadeSpan16(int x, int y, uint16_t span[], int count) SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkColorShader.h	/^    virtual void shadeSpanAlpha(int x, int y, uint8_t alpha[], int count) SK_OVERRIDE;$/;"	m	class:SkColorShader
SK_OVERRIDE	core/SkComposeShader.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkComposeShader
SK_OVERRIDE	core/SkEmptyShader.h	/^                            const SkMatrix&) SK_OVERRIDE;$/;"	m	class:SkEmptyShader
SK_OVERRIDE	core/SkEmptyShader.h	/^    virtual uint32_t getFlags() SK_OVERRIDE;$/;"	m	class:SkEmptyShader
SK_OVERRIDE	core/SkEmptyShader.h	/^    virtual uint8_t getSpan16Alpha() const SK_OVERRIDE;$/;"	m	class:SkEmptyShader
SK_OVERRIDE	core/SkEmptyShader.h	/^    virtual void shadeSpan(int x, int y, SkPMColor span[], int count) SK_OVERRIDE;$/;"	m	class:SkEmptyShader
SK_OVERRIDE	core/SkEmptyShader.h	/^    virtual void shadeSpan16(int x, int y, uint16_t span[], int count) SK_OVERRIDE;$/;"	m	class:SkEmptyShader
SK_OVERRIDE	core/SkEmptyShader.h	/^    virtual void shadeSpanAlpha(int x, int y, uint8_t alpha[], int count) SK_OVERRIDE;$/;"	m	class:SkEmptyShader
SK_OVERRIDE	core/SkMallocPixelRef.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkMallocPixelRef
SK_OVERRIDE	core/SkPathEffect.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkPairPathEffect
SK_OVERRIDE	core/SkPixelRef.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkPixelRef
SK_OVERRIDE	core/SkPostConfig.h	/^#define SK_OVERRIDE /;"	d
SK_OVERRIDE	core/SkPostConfig.h	/^#define SK_OVERRIDE$/;"	d
SK_OVERRIDE	core/SkShader.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkShader
SK_OVERRIDE	core/SkStream.h	/^    virtual bool        rewind() SK_OVERRIDE;$/;"	m	class:SkBufferStream
SK_OVERRIDE	core/SkStream.h	/^    virtual bool rewind() SK_OVERRIDE;$/;"	m	class:SkFDStream
SK_OVERRIDE	core/SkStream.h	/^    virtual bool rewind() SK_OVERRIDE;$/;"	m	class:SkFILEStream
SK_OVERRIDE	core/SkStream.h	/^    virtual bool rewind() SK_OVERRIDE;$/;"	m	class:SkMemoryStream
SK_OVERRIDE	core/SkStream.h	/^    virtual bool write(const void* buffer, size_t size) SK_OVERRIDE;$/;"	m	class:SkDebugWStream
SK_OVERRIDE	core/SkStream.h	/^    virtual bool write(const void* buffer, size_t size) SK_OVERRIDE;$/;"	m	class:SkDynamicMemoryWStream
SK_OVERRIDE	core/SkStream.h	/^    virtual bool write(const void* buffer, size_t size) SK_OVERRIDE;$/;"	m	class:SkFILEWStream
SK_OVERRIDE	core/SkStream.h	/^    virtual bool write(const void* buffer, size_t size) SK_OVERRIDE;$/;"	m	class:SkMemoryWStream
SK_OVERRIDE	core/SkStream.h	/^    virtual const char* getFileName() SK_OVERRIDE;$/;"	m	class:SkBufferStream
SK_OVERRIDE	core/SkStream.h	/^    virtual const char* getFileName() SK_OVERRIDE;$/;"	m	class:SkFILEStream
SK_OVERRIDE	core/SkStream.h	/^    virtual const void* getMemoryBase() SK_OVERRIDE;$/;"	m	class:SkBufferStream
SK_OVERRIDE	core/SkStream.h	/^    virtual const void* getMemoryBase() SK_OVERRIDE;$/;"	m	class:SkMemoryStream
SK_OVERRIDE	core/SkStream.h	/^    virtual size_t      read(void* buffer, size_t size) SK_OVERRIDE;$/;"	m	class:SkBufferStream
SK_OVERRIDE	core/SkStream.h	/^    virtual size_t read(void* buffer, size_t size) SK_OVERRIDE;$/;"	m	class:SkFDStream
SK_OVERRIDE	core/SkStream.h	/^    virtual size_t read(void* buffer, size_t size) SK_OVERRIDE;$/;"	m	class:SkFILEStream
SK_OVERRIDE	core/SkStream.h	/^    virtual size_t read(void* buffer, size_t size) SK_OVERRIDE;$/;"	m	class:SkMemoryStream
SK_OVERRIDE	core/SkStream.h	/^    virtual void flush() SK_OVERRIDE;$/;"	m	class:SkFILEWStream
SK_OVERRIDE	core/SkStream.h	/^    virtual void newline() SK_OVERRIDE;$/;"	m	class:SkDebugWStream
SK_OVERRIDE	core/SkXfermode.h	/^                          const SkAlpha aa[]) SK_OVERRIDE;$/;"	m	class:SkProcXfermode
SK_OVERRIDE	core/SkXfermode.h	/^                        const SkAlpha aa[]) SK_OVERRIDE;$/;"	m	class:SkProcXfermode
SK_OVERRIDE	core/SkXfermode.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkProcXfermode
SK_OVERRIDE	effects/Sk1DPathEffect.h	/^    virtual SkScalar begin(SkScalar contourLength) SK_OVERRIDE;$/;"	m	class:SkPath1DPathEffect
SK_OVERRIDE	effects/Sk1DPathEffect.h	/^    virtual SkScalar next(SkPath*, SkScalar distance, SkPathMeasure&) SK_OVERRIDE;$/;"	m	class:SkPath1DPathEffect
SK_OVERRIDE	effects/Sk1DPathEffect.h	/^    virtual bool filterPath(SkPath*, const SkPath&, SkScalar* width) SK_OVERRIDE;$/;"	m	class:SkPath1DPathEffect
SK_OVERRIDE	effects/Sk1DPathEffect.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkPath1DPathEffect
SK_OVERRIDE	effects/Sk2DPathEffect.h	/^    virtual bool filterPath(SkPath*, const SkPath&, SkScalar* width) SK_OVERRIDE;$/;"	m	class:Sk2DPathEffect
SK_OVERRIDE	effects/Sk2DPathEffect.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:Sk2DPathEffect
SK_OVERRIDE	effects/Sk2DPathEffect.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkPath2DPathEffect
SK_OVERRIDE	effects/Sk2DPathEffect.h	/^    virtual void next(const SkPoint&, int u, int v, SkPath* dst) SK_OVERRIDE;$/;"	m	class:SkPath2DPathEffect
SK_OVERRIDE	effects/SkAvoidXfermode.h	/^                          const SkAlpha aa[]) SK_OVERRIDE;$/;"	m	class:SkAvoidXfermode
SK_OVERRIDE	effects/SkAvoidXfermode.h	/^                        const SkAlpha aa[]) SK_OVERRIDE;$/;"	m	class:SkAvoidXfermode
SK_OVERRIDE	effects/SkAvoidXfermode.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkAvoidXfermode
SK_OVERRIDE	effects/SkBlurDrawLooper.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkBlurDrawLooper
SK_OVERRIDE	effects/SkBlurImageFilter.h	/^                               SkBitmap* result, SkIPoint* offset) SK_OVERRIDE;$/;"	m	class:SkBlurImageFilter
SK_OVERRIDE	effects/SkBlurImageFilter.h	/^    virtual bool asABlur(SkSize* sigma) const SK_OVERRIDE;$/;"	m	class:SkBlurImageFilter
SK_OVERRIDE	effects/SkBlurImageFilter.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkBlurImageFilter
SK_OVERRIDE	effects/SkColorMatrixFilter.h	/^    virtual bool asColorMatrix(SkScalar matrix[20]) SK_OVERRIDE;$/;"	m	class:SkColorMatrixFilter
SK_OVERRIDE	effects/SkColorMatrixFilter.h	/^    virtual uint32_t getFlags() SK_OVERRIDE;$/;"	m	class:SkColorMatrixFilter
SK_OVERRIDE	effects/SkColorMatrixFilter.h	/^    virtual void filterSpan(const SkPMColor src[], int count, SkPMColor[]) SK_OVERRIDE;$/;"	m	class:SkColorMatrixFilter
SK_OVERRIDE	effects/SkColorMatrixFilter.h	/^    virtual void filterSpan16(const uint16_t src[], int count, uint16_t[]) SK_OVERRIDE;$/;"	m	class:SkColorMatrixFilter
SK_OVERRIDE	effects/SkColorMatrixFilter.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkColorMatrixFilter
SK_OVERRIDE	effects/SkCornerPathEffect.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkCornerPathEffect
SK_OVERRIDE	effects/SkDashPathEffect.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkDashPathEffect
SK_OVERRIDE	effects/SkDiscretePathEffect.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkDiscretePathEffect
SK_OVERRIDE	effects/SkEmbossMaskFilter.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkEmbossMaskFilter
SK_OVERRIDE	effects/SkGroupShape.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkGroupShape
SK_OVERRIDE	effects/SkKernel33MaskFilter.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkKernel33MaskFilter
SK_OVERRIDE	effects/SkKernel33MaskFilter.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkKernel33ProcMaskFilter
SK_OVERRIDE	effects/SkLayerDrawLooper.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkLayerDrawLooper
SK_OVERRIDE	effects/SkLayerRasterizer.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkLayerRasterizer
SK_OVERRIDE	effects/SkMorphologyImageFilter.h	/^                               SkBitmap* result, SkIPoint* offset) SK_OVERRIDE;$/;"	m	class:SkDilateImageFilter
SK_OVERRIDE	effects/SkMorphologyImageFilter.h	/^                               SkBitmap* result, SkIPoint* offset) SK_OVERRIDE;$/;"	m	class:SkErodeImageFilter
SK_OVERRIDE	effects/SkMorphologyImageFilter.h	/^    virtual bool asADilate(SkISize* radius) const SK_OVERRIDE;$/;"	m	class:SkDilateImageFilter
SK_OVERRIDE	effects/SkMorphologyImageFilter.h	/^    virtual bool asAnErode(SkISize* radius) const SK_OVERRIDE;$/;"	m	class:SkErodeImageFilter
SK_OVERRIDE	effects/SkMorphologyImageFilter.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkMorphologyImageFilter
SK_OVERRIDE	effects/SkPixelXorXfermode.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkPixelXorXfermode
SK_OVERRIDE	effects/SkRectShape.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkPaintShape
SK_OVERRIDE	effects/SkRectShape.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkRectShape
SK_OVERRIDE	effects/SkTableMaskFilter.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkTableMaskFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^                               SkBitmap* result, SkIPoint* loc) SK_OVERRIDE;$/;"	m	class:SkColorFilterImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^                               SkBitmap* result, SkIPoint* loc) SK_OVERRIDE;$/;"	m	class:SkComposeImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^                               SkBitmap* result, SkIPoint* loc) SK_OVERRIDE;$/;"	m	class:SkDownSampleImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^                               SkBitmap* result, SkIPoint* loc) SK_OVERRIDE;$/;"	m	class:SkMergeImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^                               SkBitmap* result, SkIPoint* loc) SK_OVERRIDE;$/;"	m	class:SkOffsetImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^    virtual bool onFilterBounds(const SkIRect&, const SkMatrix&, SkIRect*) SK_OVERRIDE;$/;"	m	class:SkComposeImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^    virtual bool onFilterBounds(const SkIRect&, const SkMatrix&, SkIRect*) SK_OVERRIDE;$/;"	m	class:SkMergeImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^    virtual bool onFilterBounds(const SkIRect&, const SkMatrix&, SkIRect*) SK_OVERRIDE;$/;"	m	class:SkOffsetImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkColorFilterImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkComposeImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkDownSampleImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkMergeImageFilter
SK_OVERRIDE	effects/SkTestImageFilters.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkOffsetImageFilter
SK_OVERRIDE	effects/SkTransparentShader.h	/^                                const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkTransparentShader
SK_OVERRIDE	effects/SkTransparentShader.h	/^    virtual uint32_t getFlags() SK_OVERRIDE;$/;"	m	class:SkTransparentShader
SK_OVERRIDE	effects/SkTransparentShader.h	/^    virtual void    shadeSpan(int x, int y, SkPMColor[], int count) SK_OVERRIDE;$/;"	m	class:SkTransparentShader
SK_OVERRIDE	effects/SkTransparentShader.h	/^    virtual void    shadeSpan16(int x, int y, uint16_t span[], int count) SK_OVERRIDE;$/;"	m	class:SkTransparentShader
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                                               Usage usage) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                                const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                               const SkClipStack&) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                              SkCanvas::Config8888 config8888) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                              const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                             SkBitmap*, SkIPoint*) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                             SkCanvas::Config8888 config8888) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                             int scalarsPerPos, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                            const SkMatrix&, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                            const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                            const SkPoint[], const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                           const SkClipStack& clipStack) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                          SkScalar x, SkScalar y, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                          bool pathIsMutable) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^                          const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^    virtual SkGpuRenderTarget* accessRenderTarget() SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^    virtual bool canHandleImageFilter(SkImageFilter*) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^    virtual bool filterTextFlags(const SkPaint&, TextFlags*) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^    virtual void clear(SkColor color) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGpuDevice.h	/^    virtual void drawPaint(const SkDraw&, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkGpuDevice
SK_OVERRIDE	gpu/SkGr.h	/^    virtual GrClipType getType() const SK_OVERRIDE;$/;"	m	class:SkGrClipIterator
SK_OVERRIDE	gpu/SkGr.h	/^    virtual GrPathFill getPathFill() const SK_OVERRIDE;$/;"	m	class:SkGrClipIterator
SK_OVERRIDE	gpu/SkGr.h	/^    virtual SkRegion::Op getOp() const SK_OVERRIDE;$/;"	m	class:SkGrClipIterator
SK_OVERRIDE	gpu/SkGr.h	/^    virtual bool getDoAA() const SK_OVERRIDE;$/;"	m	class:SkGrClipIterator
SK_OVERRIDE	gpu/SkGrTexturePixelRef.h	/^    virtual SkPixelRef* deepCopy(SkBitmap::Config dstConfig) SK_OVERRIDE;$/;"	m	class:SkGrRenderTargetPixelRef
SK_OVERRIDE	gpu/SkGrTexturePixelRef.h	/^    virtual SkPixelRef* deepCopy(SkBitmap::Config dstConfig) SK_OVERRIDE;$/;"	m	class:SkGrTexturePixelRef
SK_OVERRIDE	gpu/SkMesaGLContext.h	/^    virtual const GrGLInterface* createGLContext() SK_OVERRIDE;$/;"	m	class:SkMesaGLContext
SK_OVERRIDE	gpu/SkMesaGLContext.h	/^    virtual void destroyGLContext() SK_OVERRIDE;$/;"	m	class:SkMesaGLContext
SK_OVERRIDE	gpu/SkMesaGLContext.h	/^    virtual void makeCurrent() const SK_OVERRIDE;$/;"	m	class:SkMesaGLContext
SK_OVERRIDE	gpu/SkNativeGLContext.h	/^    virtual const GrGLInterface* createGLContext() SK_OVERRIDE;$/;"	m	class:SkNativeGLContext
SK_OVERRIDE	gpu/SkNativeGLContext.h	/^    virtual void destroyGLContext() SK_OVERRIDE;$/;"	m	class:SkNativeGLContext
SK_OVERRIDE	gpu/SkNativeGLContext.h	/^    virtual void makeCurrent() const SK_OVERRIDE;$/;"	m	class:SkNativeGLContext
SK_OVERRIDE	gpu/SkNullGLContext.h	/^    virtual const GrGLInterface* createGLContext() SK_OVERRIDE;$/;"	m	class:SkNullGLContext
SK_OVERRIDE	images/SkFlipPixelRef.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkFlipPixelRef
SK_OVERRIDE	images/SkImageRef.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkImageRef
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                                               Usage usage) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                                const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                              SkCanvas::Config8888) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                              int indexCount, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                             int scalarsPerPos, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                            const SkMatrix& matrix, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                            const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                            const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                          SkScalar x, SkScalar y, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^                          bool pathIsMutable) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^    virtual bool allowImageFilter(SkImageFilter*) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^    virtual uint32_t getDeviceCapabilities() SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^    virtual void clear(SkColor color) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	pdf/SkPDFDevice.h	/^    virtual void drawPaint(const SkDraw&, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkPDFDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                                                   Usage usage) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas::DeferredDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                                  SkCanvas::Config8888 config8888) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas::DeferredDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                                  const SkPaint* paint) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                                 SkCanvas::Config8888 config8888) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas::DeferredDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                                SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                                const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                              const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                             SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                            SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                            SkRegion::Op op) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                            const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                            const SkPaint* paint) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                          SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                          SaveFlags flags) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                          SkScalar y, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^                          bool doAntiAlias) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^        virtual SkGpuRenderTarget* accessRenderTarget() SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas::DeferredDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^        virtual const SkBitmap& onAccessBitmap(SkBitmap*) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas::DeferredDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^        virtual int height() const SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas::DeferredDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^        virtual int width() const SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas::DeferredDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^        virtual uint32_t getDeviceCapabilities() SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas::DeferredDevice
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual SkBounder* setBounder(SkBounder* bounder) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual SkDrawFilter* setDrawFilter(SkDrawFilter* filter) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual bool concat(const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual bool isDrawingToLayer() const SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual bool rotate(SkScalar degrees) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual bool scale(SkScalar sx, SkScalar sy) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual bool skew(SkScalar sx, SkScalar sy) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual bool translate(SkScalar dx, SkScalar dy) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual int save(SaveFlags flags) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual void clear(SkColor) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual void drawPaint(const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual void drawPicture(SkPicture& picture) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual void restore() SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDeferredCanvas.h	/^    virtual void setMatrix(const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkDeferredCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                                  const SkPaint* paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                                const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                                const SkRect& dst, const SkPaint* paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                              const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                             const SkPoint pos[], const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                            SkRegion::Op) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                            const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                            const SkPaint* paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                          SaveFlags) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                          SkScalar y, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^                      const SkPaint*) SK_OVERRIDE;$/;"	m	class:SkFormatDumper
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual bool clipPath(const SkPath&, SkRegion::Op, bool) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual bool clipRect(const SkRect&, SkRegion::Op, bool) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual bool concat(const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual bool rotate(SkScalar degrees) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual bool scale(SkScalar sx, SkScalar sy) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual bool skew(SkScalar sx, SkScalar sy) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual bool translate(SkScalar dx, SkScalar dy) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual int save(SaveFlags) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual void drawData(const void*, size_t) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual void drawPaint(const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual void drawPath(const SkPath& path, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual void drawPicture(SkPicture&) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual void drawRect(const SkRect& rect, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual void restore() SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkDumpCanvas.h	/^    virtual void setMatrix(const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkDumpCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                                  const SkPaint*) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                                const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                                const SkRect& dst, const SkPaint*) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                              const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                             const SkPoint pos[], const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                            SkRegion::Op) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                            const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                            const SkPaint*) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                          SaveFlags) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^                          SkScalar y, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual SkBounder* setBounder(SkBounder*) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual SkDrawFilter* setDrawFilter(SkDrawFilter*) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual bool clipPath(const SkPath&, SkRegion::Op, bool) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual bool clipRect(const SkRect&, SkRegion::Op, bool) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual bool concat(const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual bool rotate(SkScalar degrees) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual bool scale(SkScalar sx, SkScalar sy) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual bool skew(SkScalar sx, SkScalar sy) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual bool translate(SkScalar dx, SkScalar dy) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual int save(SaveFlags) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual void drawPaint(const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual void drawPath(const SkPath& path, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual void drawPicture(SkPicture&) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual void drawRect(const SkRect& rect, const SkPaint&) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual void restore() SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkNWayCanvas.h	/^    virtual void setMatrix(const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkNWayCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                                  const SkPaint* paint = NULL) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                                const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                                const SkRect& dst, const SkPaint* paint = NULL) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                              const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                             const SkPoint pos[], const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                            SkRegion::Op op = SkRegion::kIntersect_Op) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                            const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                            const SkPaint* paint = NULL) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                          SaveFlags flags = kARGB_ClipLayer_SaveFlag) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^                          SkScalar y, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual SkBounder* setBounder(SkBounder* bounder) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual SkDrawFilter* setDrawFilter(SkDrawFilter* filter) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual bool clipPath(const SkPath&, SkRegion::Op, bool) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual bool clipRect(const SkRect&, SkRegion::Op, bool) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual bool concat(const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual bool rotate(SkScalar degrees) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual bool scale(SkScalar sx, SkScalar sy) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual bool skew(SkScalar sx, SkScalar sy) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual bool translate(SkScalar dx, SkScalar dy) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual int save(SaveFlags flags = kMatrixClip_SaveFlag) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual void drawData(const void* data, size_t length) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual void drawPaint(const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual void drawPath(const SkPath& path, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual void drawPicture(SkPicture&) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual void drawRect(const SkRect& rect, const SkPaint& paint) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual void restore() SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkProxyCanvas.h	/^    virtual void setMatrix(const SkMatrix& matrix) SK_OVERRIDE;$/;"	m	class:SkProxyCanvas
SK_OVERRIDE	utils/SkUnitMappers.h	/^    virtual void flatten(SkFlattenableWriteBuffer&) const SK_OVERRIDE;$/;"	m	class:SkDiscreteMapper
SK_OVERRIDE	views/SkOSWindow_Unix.h	/^    virtual bool onEvent(const SkEvent&) SK_OVERRIDE;$/;"	m	class:SkOSWindow
SK_OVERRIDE	views/SkOSWindow_Unix.h	/^    virtual bool onHandleChar(SkUnichar) SK_OVERRIDE;$/;"	m	class:SkOSWindow
SK_OVERRIDE	views/SkOSWindow_Unix.h	/^    virtual bool onHandleKey(SkKey) SK_OVERRIDE;$/;"	m	class:SkOSWindow
SK_OVERRIDE	views/SkOSWindow_Unix.h	/^    virtual bool onHandleKeyUp(SkKey) SK_OVERRIDE;$/;"	m	class:SkOSWindow
SK_OVERRIDE	views/SkOSWindow_Unix.h	/^    virtual void onHandleInval(const SkIRect&) SK_OVERRIDE;$/;"	m	class:SkOSWindow
SK_OVERRIDE	views/SkOSWindow_Unix.h	/^    virtual void onSetTitle(const char title[]) SK_OVERRIDE;$/;"	m	class:SkOSWindow
SK_R16_BITS	SkColorPriv.h	/^#define SK_R16_BITS /;"	d
SK_R16_BITS	core/SkColorPriv.h	/^#define SK_R16_BITS /;"	d
SK_R16_MASK	SkColorPriv.h	/^#define SK_R16_MASK /;"	d
SK_R16_MASK	core/SkColorPriv.h	/^#define SK_R16_MASK /;"	d
SK_R16_MASK_IN_PLACE	SkColorPriv.h	/^#define SK_R16_MASK_IN_PLACE /;"	d
SK_R16_MASK_IN_PLACE	core/SkColorPriv.h	/^#define SK_R16_MASK_IN_PLACE /;"	d
SK_R16_SHIFT	SkColorPriv.h	/^#define SK_R16_SHIFT /;"	d
SK_R16_SHIFT	core/SkColorPriv.h	/^#define SK_R16_SHIFT /;"	d
SK_R32_BITS	SkColorPriv.h	/^#define SK_R32_BITS /;"	d
SK_R32_BITS	core/SkColorPriv.h	/^#define SK_R32_BITS /;"	d
SK_R32_MASK	SkColorPriv.h	/^#define SK_R32_MASK /;"	d
SK_R32_MASK	core/SkColorPriv.h	/^#define SK_R32_MASK /;"	d
SK_R32_SHIFT	config/SkUserConfig.h	/^        #define SK_R32_SHIFT /;"	d
SK_R32_SHIFT	core/SkPostConfig.h	/^        #define SK_R32_SHIFT /;"	d
SK_R4444_SHIFT	SkColorPriv.h	/^#define SK_R4444_SHIFT /;"	d
SK_R4444_SHIFT	core/SkColorPriv.h	/^#define SK_R4444_SHIFT /;"	d
SK_RELEASE	core/SkPreConfig.h	/^        #define SK_RELEASE$/;"	d
SK_RESTRICT	core/SkPreConfig.h	/^        #define SK_RESTRICT /;"	d
SK_RESTRICT	core/SkPreConfig.h	/^    #define SK_RESTRICT /;"	d
SK_SCALAR_IS_FIXED	core/SkPostConfig.h	/^        #define SK_SCALAR_IS_FIXED$/;"	d
SK_SCALAR_IS_FLOAT	core/SkPostConfig.h	/^        #define SK_SCALAR_IS_FLOAT$/;"	d
SK_SCALAR_IS_FLOAT	core/SkPreConfig.h	/^    #define SK_SCALAR_IS_FLOAT$/;"	d
SK_SCALAR_SLOW_COMPARES	core/SkPostConfig.h	/^        #define SK_SCALAR_SLOW_COMPARES$/;"	d
SK_Scalar1	core/SkScalar.h	/^    #define SK_Scalar1 /;"	d
SK_ScalarHalf	core/SkScalar.h	/^    #define SK_ScalarHalf /;"	d
SK_ScalarInfinity	core/SkScalar.h	/^    #define SK_ScalarInfinity /;"	d
SK_ScalarMax	core/SkScalar.h	/^    #define SK_ScalarMax /;"	d
SK_ScalarMin	core/SkScalar.h	/^    #define SK_ScalarMin /;"	d
SK_ScalarNaN	core/SkScalar.h	/^    #define SK_ScalarNaN /;"	d
SK_ScalarNearlyZero	core/SkScalar.h	/^#define SK_ScalarNearlyZero /;"	d
SK_ScalarPI	core/SkScalar.h	/^    #define SK_ScalarPI /;"	d
SK_ScalarRoot2Over2	core/SkScalar.h	/^    #define SK_ScalarRoot2Over2 /;"	d
SK_ScalarSqrt2	core/SkScalar.h	/^    #define SK_ScalarSqrt2 /;"	d
SK_ScalarTanPIOver8	core/SkScalar.h	/^    #define SK_ScalarTanPIOver8 /;"	d
SK_TIME_FACTOR	core/SkTime.h	/^#define SK_TIME_FACTOR /;"	d
SK_TRACEHR	utils/win/SkHRESULT.h	/^#define SK_TRACEHR(/;"	d
SK_TRACE_EVENT0	core/SkTrace.h	/^    #define SK_TRACE_EVENT0(/;"	d
SK_TRACE_EVENT1	core/SkTrace.h	/^    #define SK_TRACE_EVENT1(/;"	d
SK_TRACE_EVENT2	core/SkTrace.h	/^    #define SK_TRACE_EVENT2(/;"	d
SK_UINT8_BITFIELD	core/SkEndian.h	/^    #define SK_UINT8_BITFIELD(/;"	d
SK_UINT8_BITFIELD_BENDIAN	core/SkEndian.h	/^        #define SK_UINT8_BITFIELD_BENDIAN$/;"	d
SK_UINT8_BITFIELD_LENDIAN	core/SkEndian.h	/^        #define SK_UINT8_BITFIELD_LENDIAN$/;"	d
SK_USE_FLOATBITS	core/SkPostConfig.h	/^        #define SK_USE_FLOATBITS$/;"	d
SK_UnitScalar1	utils/SkCamera.h	/^    #define SK_UnitScalar1 /;"	d
SK_WARN_UNUSED_RESULT	core/SkPreConfig.h	/^        #define SK_WARN_UNUSED_RESULT$/;"	d
SK_WARN_UNUSED_RESULT	core/SkPreConfig.h	/^    #define SK_WARN_UNUSED_RESULT /;"	d
SK_WGL_ACCELERATION	utils/SkWGL.h	/^#define SK_WGL_ACCELERATION /;"	d
SK_WGL_ALPHA_BITS	utils/SkWGL.h	/^#define SK_WGL_ALPHA_BITS /;"	d
SK_WGL_COLOR_BITS	utils/SkWGL.h	/^#define SK_WGL_COLOR_BITS /;"	d
SK_WGL_COLOR_SAMPLES	utils/SkWGL.h	/^#define SK_WGL_COLOR_SAMPLES /;"	d
SK_WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT /;"	d
SK_WGL_CONTEXT_CORE_PROFILE_BIT	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_CORE_PROFILE_BIT /;"	d
SK_WGL_CONTEXT_DEBUG_BIT	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_DEBUG_BIT /;"	d
SK_WGL_CONTEXT_ES2_PROFILE_BIT	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_ES2_PROFILE_BIT /;"	d
SK_WGL_CONTEXT_FLAGS	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_FLAGS /;"	d
SK_WGL_CONTEXT_FORWARD_COMPATIBLE_BIT	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_FORWARD_COMPATIBLE_BIT /;"	d
SK_WGL_CONTEXT_LAYER_PLANE	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_LAYER_PLANE /;"	d
SK_WGL_CONTEXT_MAJOR_VERSION	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_MAJOR_VERSION /;"	d
SK_WGL_CONTEXT_MINOR_VERSION	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_MINOR_VERSION /;"	d
SK_WGL_CONTEXT_PROFILE_MASK	utils/SkWGL.h	/^#define SK_WGL_CONTEXT_PROFILE_MASK /;"	d
SK_WGL_COVERAGE_SAMPLES	utils/SkWGL.h	/^#define SK_WGL_COVERAGE_SAMPLES /;"	d
SK_WGL_DOUBLE_BUFFER	utils/SkWGL.h	/^#define SK_WGL_DOUBLE_BUFFER /;"	d
SK_WGL_DRAW_TO_WINDOW	utils/SkWGL.h	/^#define SK_WGL_DRAW_TO_WINDOW /;"	d
SK_WGL_FULL_ACCELERATION	utils/SkWGL.h	/^#define SK_WGL_FULL_ACCELERATION /;"	d
SK_WGL_SAMPLES	utils/SkWGL.h	/^#define SK_WGL_SAMPLES /;"	d
SK_WGL_SAMPLE_BUFFERS	utils/SkWGL.h	/^#define SK_WGL_SAMPLE_BUFFERS /;"	d
SK_WGL_STENCIL_BITS	utils/SkWGL.h	/^#define SK_WGL_STENCIL_BITS /;"	d
SK_WGL_SUPPORT_OPENGL	utils/SkWGL.h	/^#define SK_WGL_SUPPORT_OPENGL /;"	d
SK_WM_SkEvent	views/SkOSWindow_Win.h	/^        SK_WM_SkEvent = WM_APP + 1000,$/;"	e	enum:SkOSWindow::__anon44
SK_WM_SkTimerID	views/SkOSWindow_Win.h	/^        SK_WM_SkTimerID = 0xFFFF    \/\/ just need a non-zero value$/;"	e	enum:SkOSWindow::__anon44
STORAGE	core/SkTSearch.h	/^        STORAGE = 64$/;"	e	enum:SkAutoAsciiToLC::__anon26
SUB_OFFSET_FAILURE	SkBitmap.cpp	/^#define SUB_OFFSET_FAILURE /;"	d	file:
SVG_ADD_ATTRIBUTE	svg/SkSVGAttribute.h	/^#define SVG_ADD_ATTRIBUTE(/;"	d
SVG_ADD_ATTRIBUTE_ALIAS	svg/SkSVGAttribute.h	/^#define SVG_ADD_ATTRIBUTE_ALIAS(/;"	d
SVG_ATTRIBUTE	svg/SkSVGAttribute.h	/^#define SVG_ATTRIBUTE(/;"	d
SVG_LITERAL_ATTRIBUTE	svg/SkSVGAttribute.h	/^#define SVG_LITERAL_ATTRIBUTE(/;"	d
SafeRef	effects/SkGroupShape.h	/^    static void SafeRef(const SkTRefCnt* obj) {$/;"	f	class:SkTRefCnt
SafeUnref	effects/SkGroupShape.h	/^    static void SafeUnref(const SkTRefCnt* obj) {$/;"	f	class:SkTRefCnt
SampleMode	gpu/GrSamplerState.h	/^    enum SampleMode {$/;"	g	class:GrSamplerState
SaveFlags	core/SkCanvas.h	/^    enum SaveFlags {$/;"	g	class:SkCanvas
Scale	core/SkUnPreMultiply.h	/^    typedef uint32_t Scale;$/;"	t	class:SkUnPreMultiply
ScaleToFit	core/SkMatrix.h	/^    enum ScaleToFit {$/;"	g	class:SkMatrix
ScaleType	views/SkImageView.h	/^    enum ScaleType {$/;"	g	class:SkImageView
ScratchTexMatch	gpu/GrContext.h	/^    enum ScratchTexMatch {$/;"	g	class:GrContext
Segment	core/SkPathMeasure.h	/^    struct Segment {$/;"	s	class:SkPathMeasure
SegmentMask	core/SkPath.h	/^    enum SegmentMask {$/;"	g	class:SkPath
ShaderCanonicalEntry	pdf/SkPDFShader.h	/^    class ShaderCanonicalEntry {$/;"	c	class:SkPDFShader
Side	core/SkPoint.h	/^    enum Side {$/;"	g	struct:SkPoint
Sk1DPathEffect	effects/Sk1DPathEffect.h	/^class Sk1DPathEffect : public SkPathEffect {$/;"	c
Sk1DPathEffect_DEFINED	effects/Sk1DPathEffect.h	/^#define Sk1DPathEffect_DEFINED$/;"	d
Sk2DPathEffect	effects/Sk2DPathEffect.h	/^class Sk2DPathEffect : public SkPathEffect {$/;"	c
Sk2DPathEffect_DEFINED	effects/Sk2DPathEffect.h	/^#define Sk2DPathEffect_DEFINED$/;"	d
Sk2sComplimentAsFloat	core/SkFloatBits.h	/^static inline float Sk2sComplimentAsFloat(int32_t x) {$/;"	f
Sk2sComplimentAsScalar	core/SkFloatBits.h	/^    #define Sk2sComplimentAsScalar(/;"	d
Sk2sComplimentToSignBit	core/SkFloatBits.h	/^static inline int32_t Sk2sComplimentToSignBit(int32_t x) {$/;"	f
Sk32ToBool	SkTypes.h	/^static inline int Sk32ToBool(uint32_t n) {$/;"	f
Sk32ToBool	core/SkTypes.h	/^static inline int Sk32ToBool(uint32_t n) {$/;"	f
Sk3DView	utils/SkCamera.h	/^class Sk3DView : SkNoncopyable {$/;"	c
Sk64	core/Sk64.h	/^struct SK_API Sk64 {$/;"	s
Sk64_DEFINED	core/Sk64.h	/^#define Sk64_DEFINED$/;"	d
SkA32Assert	SkColorPriv.h	/^#define SkA32Assert(/;"	d
SkA32Assert	core/SkColorPriv.h	/^#define SkA32Assert(/;"	d
SkA32To4444	SkColorPriv.h	/^#define SkA32To4444(/;"	d
SkA32To4444	core/SkColorPriv.h	/^#define SkA32To4444(/;"	d
SkA4444ToA32	SkColorPriv.h	/^#define SkA4444ToA32(/;"	d
SkA4444ToA32	core/SkColorPriv.h	/^#define SkA4444ToA32(/;"	d
SkASSERT	SkTypes.h	/^    #define SkASSERT(/;"	d
SkASSERT	core/SkTypes.h	/^    #define SkASSERT(/;"	d
SkAbs32	SkTypes.h	/^static inline int32_t SkAbs32(int32_t value) {$/;"	f
SkAbs32	core/SkTypes.h	/^static inline int32_t SkAbs32(int32_t value) {$/;"	f
SkAdvancedTypefaceMetrics	core/SkAdvancedTypefaceMetrics.h	/^class SkAdvancedTypefaceMetrics : public SkRefCnt {$/;"	c
SkAdvancedTypefaceMetrics_DEFINED	core/SkAdvancedTypefaceMetrics.h	/^#define SkAdvancedTypefaceMetrics_DEFINED$/;"	d
SkAlign2	SkTypes.h	/^#define SkAlign2(/;"	d
SkAlign2	core/SkTypes.h	/^#define SkAlign2(/;"	d
SkAlign4	SkTypes.h	/^#define SkAlign4(/;"	d
SkAlign4	core/SkTypes.h	/^#define SkAlign4(/;"	d
SkAlignedSStorage	core/SkTemplates.h	/^template <size_t N> class SkAlignedSStorage : SkNoncopyable {$/;"	c
SkAlignedSTStorage	core/SkTemplates.h	/^template <int N, typename T> class SkAlignedSTStorage : SkNoncopyable {$/;"	c
SkAlpha	core/SkColor.h	/^typedef uint8_t SkAlpha;$/;"	t
SkAlpha15To16	SkColorPriv.h	/^static inline unsigned SkAlpha15To16(unsigned a) {$/;"	f
SkAlpha15To16	core/SkColorPriv.h	/^static inline unsigned SkAlpha15To16(unsigned a) {$/;"	f
SkAlpha255To256	SkColorPriv.h	/^static inline unsigned SkAlpha255To256(U8CPU alpha) {$/;"	f
SkAlpha255To256	core/SkColorPriv.h	/^static inline unsigned SkAlpha255To256(U8CPU alpha) {$/;"	f
SkAlphaBlend	SkColorPriv.h	/^static inline int SkAlphaBlend(int src, int dst, int scale256) {$/;"	f
SkAlphaBlend	core/SkColorPriv.h	/^static inline int SkAlphaBlend(int src, int dst, int scale256) {$/;"	f
SkAlphaBlend255	SkColorPriv.h	/^static inline int SkAlphaBlend255(S16CPU src, S16CPU dst, U8CPU alpha) {$/;"	f
SkAlphaBlend255	core/SkColorPriv.h	/^static inline int SkAlphaBlend255(S16CPU src, S16CPU dst, U8CPU alpha) {$/;"	f
SkAlphaMul	SkColorPriv.h	/^#define SkAlphaMul(/;"	d
SkAlphaMul	core/SkColorPriv.h	/^#define SkAlphaMul(/;"	d
SkAlphaMul4	SkColorPriv.h	/^    #define SkAlphaMul4(/;"	d
SkAlphaMul4	SkColorPriv.h	/^    static inline int SkAlphaMul4(int value, int scale) {$/;"	f
SkAlphaMul4	core/SkColorPriv.h	/^    #define SkAlphaMul4(/;"	d
SkAlphaMul4	core/SkColorPriv.h	/^    static inline int SkAlphaMul4(int value, int scale) {$/;"	f
SkAlphaMulQ	SkColorPriv.h	/^static inline uint32_t SkAlphaMulQ(uint32_t c, unsigned scale) {$/;"	f
SkAlphaMulQ	core/SkColorPriv.h	/^static inline uint32_t SkAlphaMulQ(uint32_t c, unsigned scale) {$/;"	f
SkAlphaMulQ4	SkColorPriv.h	/^static inline U16CPU SkAlphaMulQ4(U16CPU c, unsigned scale) {$/;"	f
SkAlphaMulQ4	core/SkColorPriv.h	/^static inline U16CPU SkAlphaMulQ4(U16CPU c, unsigned scale) {$/;"	f
SkAlphaMulRGB16	SkColorPriv.h	/^static inline U16CPU SkAlphaMulRGB16(U16CPU c, unsigned scale) {$/;"	f
SkAlphaMulRGB16	core/SkColorPriv.h	/^static inline U16CPU SkAlphaMulRGB16(U16CPU c, unsigned scale) {$/;"	f
SkAlphaMulRGB16_ToU16	SkColorPriv.h	/^#define SkAlphaMulRGB16_ToU16(/;"	d
SkAlphaMulRGB16_ToU16	core/SkColorPriv.h	/^#define SkAlphaMulRGB16_ToU16(/;"	d
SkAnimator	animator/SkAnimator.h	/^class SkAnimator : public SkEventSink {$/;"	c
SkAnimatorView	animator/SkAnimatorView.h	/^class SkAnimatorView : public SkView {$/;"	c
SkAnimatorView_DEFINED	animator/SkAnimatorView.h	/^#define SkAnimatorView_DEFINED$/;"	d
SkAnimator_DEFINED	animator/SkAnimator.h	/^#define SkAnimator_DEFINED$/;"	d
SkApplication_DEFINED	views/SkApplication.h	/^#define SkApplication_DEFINED$/;"	d
SkApplySign	core/SkMath.h	/^static inline int32_t SkApplySign(int32_t n, int32_t sign) {$/;"	f
SkArithmeticMode	effects/SkArithmeticMode.h	/^class SkArithmeticMode : public SkXfermode {$/;"	c
SkArithmeticMode_DEFINED	effects/SkArithmeticMode.h	/^#define SkArithmeticMode_DEFINED$/;"	d
SkAssertResult	SkTypes.h	/^    #define SkAssertResult(/;"	d
SkAssertResult	core/SkTypes.h	/^    #define SkAssertResult(/;"	d
SkAutoAsciiToLC	core/SkTSearch.h	/^class SkAutoAsciiToLC {$/;"	c
SkAutoCanvasRestore	core/SkCanvas.h	/^    SkAutoCanvasRestore(SkCanvas* canvas, bool doSave) : fCanvas(canvas) {$/;"	f	class:SkAutoCanvasRestore
SkAutoCanvasRestore	core/SkCanvas.h	/^class SkAutoCanvasRestore : SkNoncopyable {$/;"	c
SkAutoCoInitialize	utils/win/SkAutoCoInitialize.h	/^class SkAutoCoInitialize : SkNoncopyable {$/;"	c
SkAutoCo_DEFINED	utils/win/SkAutoCoInitialize.h	/^#define SkAutoCo_DEFINED$/;"	d
SkAutoDataUnref	core/SkData.h	/^    SkAutoDataUnref(SkData* data) : fRef(data) {$/;"	f	class:SkAutoDataUnref
SkAutoDataUnref	core/SkData.h	/^class SkAutoDataUnref : SkNoncopyable {$/;"	c
SkAutoDescriptor	core/SkDescriptor.h	/^    SkAutoDescriptor(size_t size)$/;"	f	class:SkAutoDescriptor
SkAutoDescriptor	core/SkDescriptor.h	/^class SkAutoDescriptor : SkNoncopyable {$/;"	c
SkAutoFlipUpdate	images/SkFlipPixelRef.h	/^    SkAutoFlipUpdate(SkFlipPixelRef* ref) : fRef(ref) {$/;"	f	class:SkAutoFlipUpdate
SkAutoFlipUpdate	images/SkFlipPixelRef.h	/^class SkAutoFlipUpdate : SkNoncopyable {$/;"	c
SkAutoFree	SkTypes.h	/^    SkAutoFree() : fPtr(NULL) {}$/;"	f	class:SkAutoFree
SkAutoFree	SkTypes.h	/^    explicit SkAutoFree(void* ptr) : fPtr(ptr) {}$/;"	f	class:SkAutoFree
SkAutoFree	SkTypes.h	/^class SkAutoFree : SkNoncopyable {$/;"	c
SkAutoFree	core/SkTypes.h	/^    SkAutoFree() : fPtr(NULL) {}$/;"	f	class:SkAutoFree
SkAutoFree	core/SkTypes.h	/^    explicit SkAutoFree(void* ptr) : fPtr(ptr) {}$/;"	f	class:SkAutoFree
SkAutoFree	core/SkTypes.h	/^class SkAutoFree : SkNoncopyable {$/;"	c
SkAutoGraphics	core/SkGraphics.h	/^    SkAutoGraphics() {$/;"	f	class:SkAutoGraphics
SkAutoGraphics	core/SkGraphics.h	/^class SkAutoGraphics {$/;"	c
SkAutoKern	core/SkAutoKern.h	/^    SkAutoKern() : fPrevRsbDelta(0) {}$/;"	f	class:SkAutoKern
SkAutoKern	core/SkAutoKern.h	/^class SkAutoKern {$/;"	c
SkAutoKern_AdjustF	core/SkAutoKern.h	/^#define SkAutoKern_AdjustF(/;"	d
SkAutoKern_AdjustS	core/SkAutoKern.h	/^#define SkAutoKern_AdjustS(/;"	d
SkAutoKern_DEFINED	core/SkAutoKern.h	/^#define SkAutoKern_DEFINED$/;"	d
SkAutoLockColors	SkBitmap.h	/^    SkAutoLockColors() : fCTable(NULL), fColors(NULL) {}$/;"	f	class:SkAutoLockColors
SkAutoLockColors	SkBitmap.h	/^    explicit SkAutoLockColors(SkColorTable* ctable) {$/;"	f	class:SkAutoLockColors
SkAutoLockColors	SkBitmap.h	/^    explicit SkAutoLockColors(const SkBitmap& bm) {$/;"	f	class:SkAutoLockColors
SkAutoLockColors	SkBitmap.h	/^class SkAutoLockColors : public SkNoncopyable {$/;"	c
SkAutoLockColors	core/SkBitmap.h	/^    SkAutoLockColors() : fCTable(NULL), fColors(NULL) {}$/;"	f	class:SkAutoLockColors
SkAutoLockColors	core/SkBitmap.h	/^    explicit SkAutoLockColors(SkColorTable* ctable) {$/;"	f	class:SkAutoLockColors
SkAutoLockColors	core/SkBitmap.h	/^    explicit SkAutoLockColors(const SkBitmap& bm) {$/;"	f	class:SkAutoLockColors
SkAutoLockColors	core/SkBitmap.h	/^class SkAutoLockColors : public SkNoncopyable {$/;"	c
SkAutoLockPixels	SkBitmap.h	/^    SkAutoLockPixels(const SkBitmap& bm, bool doLock = true) : fBitmap(bm) {$/;"	f	class:SkAutoLockPixels
SkAutoLockPixels	SkBitmap.h	/^class SkAutoLockPixels : public SkNoncopyable {$/;"	c
SkAutoLockPixels	core/SkBitmap.h	/^    SkAutoLockPixels(const SkBitmap& bm, bool doLock = true) : fBitmap(bm) {$/;"	f	class:SkAutoLockPixels
SkAutoLockPixels	core/SkBitmap.h	/^class SkAutoLockPixels : public SkNoncopyable {$/;"	c
SkAutoMalloc	SkTypes.h	/^    explicit SkAutoMalloc(size_t size = 0) {$/;"	f	class:SkAutoMalloc
SkAutoMalloc	SkTypes.h	/^class SkAutoMalloc : public SkNoncopyable {$/;"	c
SkAutoMalloc	core/SkTypes.h	/^    explicit SkAutoMalloc(size_t size = 0) {$/;"	f	class:SkAutoMalloc
SkAutoMalloc	core/SkTypes.h	/^class SkAutoMalloc : public SkNoncopyable {$/;"	c
SkAutoMaskFreeImage	core/SkMask.h	/^    SkAutoMaskFreeImage(uint8_t* maskImage) {$/;"	f	class:SkAutoMaskFreeImage
SkAutoMaskFreeImage	core/SkMask.h	/^class SkAutoMaskFreeImage {$/;"	c
SkAutoMemoryUsageProbe	core/SkUtils.h	/^class SkAutoMemoryUsageProbe {$/;"	c
SkAutoMutexAcquire	core/SkThread.h	/^    SkAutoMutexAcquire(SkBaseMutex* mutex) : fMutex(mutex) {$/;"	f	class:SkAutoMutexAcquire
SkAutoMutexAcquire	core/SkThread.h	/^    explicit SkAutoMutexAcquire(SkBaseMutex& mutex) : fMutex(&mutex) {$/;"	f	class:SkAutoMutexAcquire
SkAutoMutexAcquire	core/SkThread.h	/^class SkAutoMutexAcquire : SkNoncopyable {$/;"	c
SkAutoPictureRecord	core/SkPicture.h	/^    SkAutoPictureRecord(SkPicture* pict, int width, int height,$/;"	f	class:SkAutoPictureRecord
SkAutoPictureRecord	core/SkPicture.h	/^class SkAutoPictureRecord : SkNoncopyable {$/;"	c
SkAutoRef	core/SkRefCnt.h	/^    SkAutoRef(SkRefCnt* obj) : fObj(obj) { SkSafeRef(obj); }$/;"	f	class:SkAutoRef
SkAutoRef	core/SkRefCnt.h	/^class SkAutoRef : SkNoncopyable {$/;"	c
SkAutoSMalloc	SkTypes.h	/^    SkAutoSMalloc() {$/;"	f	class:SkAutoSMalloc
SkAutoSMalloc	SkTypes.h	/^    explicit SkAutoSMalloc(size_t size) {$/;"	f	class:SkAutoSMalloc
SkAutoSMalloc	SkTypes.h	/^template <size_t kSize> class SkAutoSMalloc : SkNoncopyable {$/;"	c
SkAutoSMalloc	core/SkTypes.h	/^    SkAutoSMalloc() {$/;"	f	class:SkAutoSMalloc
SkAutoSMalloc	core/SkTypes.h	/^    explicit SkAutoSMalloc(size_t size) {$/;"	f	class:SkAutoSMalloc
SkAutoSMalloc	core/SkTypes.h	/^template <size_t kSize> class SkAutoSMalloc : SkNoncopyable {$/;"	c
SkAutoSTArray	core/SkTemplates.h	/^    SkAutoSTArray(size_t count) {$/;"	f	class:SkAutoSTArray
SkAutoSTArray	core/SkTemplates.h	/^template <size_t N, typename T> class SkAutoSTArray : SkNoncopyable {$/;"	c
SkAutoSTMalloc	core/SkTemplates.h	/^    SkAutoSTMalloc(size_t count) {$/;"	f	class:SkAutoSTMalloc
SkAutoSTMalloc	core/SkTemplates.h	/^template <size_t N, typename T> class SK_API SkAutoSTMalloc : SkNoncopyable {$/;"	c
SkAutoTArray	core/SkTemplates.h	/^    SkAutoTArray(size_t count) {$/;"	f	class:SkAutoTArray
SkAutoTArray	core/SkTemplates.h	/^template <typename T> class SkAutoTArray : SkNoncopyable {$/;"	c
SkAutoTCallIProc	core/SkTemplates.h	/^    SkAutoTCallIProc(T* obj): fObj(obj) {}$/;"	f	class:SkAutoTCallIProc
SkAutoTCallIProc	core/SkTemplates.h	/^template <typename T, int (*P)(T*)> class SkAutoTCallIProc : SkNoncopyable {$/;"	c
SkAutoTCallVProc	core/SkTemplates.h	/^    SkAutoTCallVProc(T* obj): fObj(obj) {}$/;"	f	class:SkAutoTCallVProc
SkAutoTCallVProc	core/SkTemplates.h	/^template <typename T, void (*P)(T*)> class SkAutoTCallVProc : SkNoncopyable {$/;"	c
SkAutoTDelete	core/SkTemplates.h	/^    SkAutoTDelete(T* obj, bool deleteWhenDone = true) : fObj(obj) {$/;"	f	class:SkAutoTDelete
SkAutoTDelete	core/SkTemplates.h	/^template <typename T> class SkAutoTDelete : SkNoncopyable {$/;"	c
SkAutoTDeleteArray	core/SkTemplates.h	/^    SkAutoTDeleteArray(T array[]) : fArray(array) {}$/;"	f	class:SkAutoTDeleteArray
SkAutoTDeleteArray	core/SkTemplates.h	/^template <typename T> class SkAutoTDeleteArray : SkNoncopyable {$/;"	c
SkAutoTMalloc	core/SkTemplates.h	/^    SkAutoTMalloc(size_t count) {$/;"	f	class:SkAutoTMalloc
SkAutoTMalloc	core/SkTemplates.h	/^template <typename T> class SkAutoTMalloc : SkNoncopyable {$/;"	c
SkAutoTUnref	core/SkRefCnt.h	/^    explicit SkAutoTUnref(T* obj = NULL) : fObj(obj) {}$/;"	f	class:SkAutoTUnref
SkAutoTUnref	core/SkRefCnt.h	/^template <typename T> class SkAutoTUnref : SkNoncopyable {$/;"	c
SkAutoTime	core/SkTime.h	/^    SkAutoTime(const char* label = NULL, SkMSec minToDump = 0) : fLabel(label)$/;"	f	class:SkAutoTime
SkAutoTime	core/SkTime.h	/^class SkAutoTime {$/;"	c
SkAutoTrace	core/SkUtils.h	/^    SkAutoTrace(const char label[]) : fLabel(label) {$/;"	f	class:SkAutoTrace
SkAutoTrace	core/SkUtils.h	/^class SkAutoTrace {$/;"	c
SkAutoUCS2	core/SkString.h	/^class SkAutoUCS2 {$/;"	c
SkAutoUnref	core/SkRefCnt.h	/^    SkAutoUnref(SkRefCnt* obj) : SkAutoTUnref<SkRefCnt>(obj) {}$/;"	f	class:SkAutoUnref
SkAutoUnref	core/SkRefCnt.h	/^class SkAutoUnref : public SkAutoTUnref<SkRefCnt> {$/;"	c
SkAvoidXfermode	effects/SkAvoidXfermode.h	/^class SkAvoidXfermode : public SkXfermode {$/;"	c
SkAvoidXfermode_DEFINED	effects/SkAvoidXfermode.h	/^#define SkAvoidXfermode_DEFINED$/;"	d
SkAxisAlignment	core/SkScalerContext.h	/^enum SkAxisAlignment {$/;"	g
SkB16Assert	SkColorPriv.h	/^#define SkB16Assert(/;"	d
SkB16Assert	core/SkColorPriv.h	/^#define SkB16Assert(/;"	d
SkB16ToB32	SkColorPriv.h	/^static inline unsigned SkB16ToB32(unsigned b) {$/;"	f
SkB16ToB32	core/SkColorPriv.h	/^static inline unsigned SkB16ToB32(unsigned b) {$/;"	f
SkB32Assert	SkColorPriv.h	/^#define SkB32Assert(/;"	d
SkB32Assert	core/SkColorPriv.h	/^#define SkB32Assert(/;"	d
SkB32To4444	SkColorPriv.h	/^#define SkB32To4444(/;"	d
SkB32To4444	core/SkColorPriv.h	/^#define SkB32To4444(/;"	d
SkB32ToB16	SkColorPriv.h	/^    #define SkB32ToB16(/;"	d
SkB32ToB16	SkColorPriv.h	/^    static inline unsigned SkB32ToB16(unsigned b) {$/;"	f
SkB32ToB16	core/SkColorPriv.h	/^    #define SkB32ToB16(/;"	d
SkB32ToB16	core/SkColorPriv.h	/^    static inline unsigned SkB32ToB16(unsigned b) {$/;"	f
SkB32ToB16_MACRO	SkColorPriv.h	/^#define SkB32ToB16_MACRO(/;"	d
SkB32ToB16_MACRO	core/SkColorPriv.h	/^#define SkB32ToB16_MACRO(/;"	d
SkB4444ToB32	SkColorPriv.h	/^#define SkB4444ToB32(/;"	d
SkB4444ToB32	core/SkColorPriv.h	/^#define SkB4444ToB32(/;"	d
SkB4444ToB565	SkColorPriv.h	/^static inline unsigned SkB4444ToB565(unsigned b) {$/;"	f
SkB4444ToB565	core/SkColorPriv.h	/^static inline unsigned SkB4444ToB565(unsigned b) {$/;"	f
SkBGViewArtist	views/SkBGViewArtist.h	/^class SkBGViewArtist : public SkView::Artist {$/;"	c
SkBGViewArtist_DEFINED	views/SkBGViewArtist.h	/^#define SkBGViewArtist_DEFINED$/;"	d
SkBML_WXMLParser_DEFINED	xml/SkBML_WXMLParser.h	/^#define SkBML_WXMLParser_DEFINED$/;"	d
SkBML_XMLParser_DEFINED	xml/SkBML_XMLParser.h	/^#define SkBML_XMLParser_DEFINED$/;"	d
SkBackEndTypes	views/SkOSWindow_Android.h	/^    enum SkBackEndTypes {$/;"	g	class:SkOSWindow
SkBackEndTypes	views/SkOSWindow_Mac.h	/^    enum SkBackEndTypes {$/;"	g	class:SkOSWindow
SkBackEndTypes	views/SkOSWindow_Unix.h	/^    enum SkBackEndTypes {$/;"	g	class:SkOSWindow
SkBackEndTypes	views/SkOSWindow_Win.h	/^    enum SkBackEndTypes {$/;"	g	class:SkOSWindow
SkBackEndTypes	views/SkOSWindow_iOS.h	/^    enum SkBackEndTypes {$/;"	g	class:SkOSWindow
SkBaseIStream	utils/win/SkIStream.h	/^class SkBaseIStream : public IStream {$/;"	c
SkBaseMutex	core/SkThread_platform.h	/^struct SkBaseMutex {$/;"	s
SkBaseMutex	core/SkThread_platform.h	/^typedef SkMutex SkBaseMutex;$/;"	t
SkBitSet	pdf/SkBitSet.h	/^class SkBitSet {$/;"	c
SkBitSet_DEFINED	pdf/SkBitSet.h	/^#define SkBitSet_DEFINED$/;"	d
SkBitmap	SkBitmap.cpp	/^SkBitmap::SkBitmap() {$/;"	f	class:SkBitmap
SkBitmap	SkBitmap.cpp	/^SkBitmap::SkBitmap(const SkBitmap& src) {$/;"	f	class:SkBitmap
SkBitmap	SkBitmap.h	/^class SK_API SkBitmap {$/;"	c
SkBitmap	core/SkBitmap.h	/^class SK_API SkBitmap {$/;"	c
SkBitmapView	views/SkWidget.h	/^class SkBitmapView : public SkView {$/;"	c
SkBitmap_DEFINED	SkBitmap.h	/^#define SkBitmap_DEFINED$/;"	d
SkBitmap_DEFINED	core/SkBitmap.h	/^#define SkBitmap_DEFINED$/;"	d
SkBits2Float	core/SkFloatBits.h	/^static inline float SkBits2Float(int32_t floatAsBits) {$/;"	f
SkBlend32	SkColorPriv.h	/^static inline int SkBlend32(int src, int dst, int scale) {$/;"	f
SkBlend32	core/SkColorPriv.h	/^static inline int SkBlend32(int src, int dst, int scale) {$/;"	f
SkBlend4444	SkColorPriv.h	/^static inline uint16_t SkBlend4444(SkPMColor16 src, SkPMColor16 dst, int scale16) {$/;"	f
SkBlend4444	core/SkColorPriv.h	/^static inline uint16_t SkBlend4444(SkPMColor16 src, SkPMColor16 dst, int scale16) {$/;"	f
SkBlend4444To16	SkColorPriv.h	/^static inline uint16_t SkBlend4444To16(SkPMColor16 src, uint16_t dst, int scale16) {$/;"	f
SkBlend4444To16	core/SkColorPriv.h	/^static inline uint16_t SkBlend4444To16(SkPMColor16 src, uint16_t dst, int scale16) {$/;"	f
SkBlendARGB32	SkColorPriv.h	/^static inline SkPMColor SkBlendARGB32(SkPMColor src, SkPMColor dst, U8CPU aa) {$/;"	f
SkBlendARGB32	core/SkColorPriv.h	/^static inline SkPMColor SkBlendARGB32(SkPMColor src, SkPMColor dst, U8CPU aa) {$/;"	f
SkBlendLCD16	SkColorPriv.h	/^static inline SkPMColor SkBlendLCD16(int srcA, int srcR, int srcG, int srcB,$/;"	f
SkBlendLCD16	core/SkColorPriv.h	/^static inline SkPMColor SkBlendLCD16(int srcA, int srcR, int srcG, int srcB,$/;"	f
SkBlendLCD16Opaque	SkColorPriv.h	/^static inline SkPMColor SkBlendLCD16Opaque(int srcR, int srcG, int srcB,$/;"	f
SkBlendLCD16Opaque	core/SkColorPriv.h	/^static inline SkPMColor SkBlendLCD16Opaque(int srcR, int srcG, int srcB,$/;"	f
SkBlendRGB16	SkColorPriv.h	/^static inline U16CPU SkBlendRGB16(U16CPU src, U16CPU dst, int srcScale) {$/;"	f
SkBlendRGB16	SkColorPriv.h	/^static inline void SkBlendRGB16(const uint16_t src[], uint16_t dst[],$/;"	f
SkBlendRGB16	core/SkColorPriv.h	/^static inline U16CPU SkBlendRGB16(U16CPU src, U16CPU dst, int srcScale) {$/;"	f
SkBlendRGB16	core/SkColorPriv.h	/^static inline void SkBlendRGB16(const uint16_t src[], uint16_t dst[],$/;"	f
SkBlitLCD16OpaqueRow	SkColorPriv.h	/^static inline void SkBlitLCD16OpaqueRow(SkPMColor dst[], const uint16_t src[],$/;"	f
SkBlitLCD16OpaqueRow	core/SkColorPriv.h	/^static inline void SkBlitLCD16OpaqueRow(SkPMColor dst[], const uint16_t src[],$/;"	f
SkBlitLCD16Row	SkColorPriv.h	/^static inline void SkBlitLCD16Row(SkPMColor dst[], const uint16_t src[],$/;"	f
SkBlitLCD16Row	core/SkColorPriv.h	/^static inline void SkBlitLCD16Row(SkPMColor dst[], const uint16_t src[],$/;"	f
SkBlitRow	core/SkBlitRow.h	/^class SkBlitRow {$/;"	c
SkBlitRow_DEFINED	core/SkBlitRow.h	/^#define SkBlitRow_DEFINED$/;"	d
SkBlitter	core/SkBlitter.h	/^class SkBlitter {$/;"	c
SkBlitterClipper	core/SkBlitter.h	/^class SkBlitterClipper {$/;"	c
SkBlitter_DEFINED	core/SkBlitter.h	/^#define SkBlitter_DEFINED$/;"	d
SkBlockComRef	utils/win/SkTScopedComPtr.h	/^class SkBlockComRef : public T {$/;"	c
SkBlurDrawLooper	effects/SkBlurDrawLooper.h	/^class SK_API SkBlurDrawLooper : public SkDrawLooper {$/;"	c
SkBlurDrawLooper_DEFINED	effects/SkBlurDrawLooper.h	/^#define SkBlurDrawLooper_DEFINED$/;"	d
SkBlurImageFilter	effects/SkBlurImageFilter.h	/^class SK_API SkBlurImageFilter : public SkImageFilter {$/;"	c
SkBlurImageFilter_DEFINED	effects/SkBlurImageFilter.h	/^#define SkBlurImageFilter_DEFINED$/;"	d
SkBlurMaskFilter	effects/SkBlurMaskFilter.h	/^class SK_API SkBlurMaskFilter {$/;"	c
SkBlurMaskFilter_DEFINED	effects/SkBlurMaskFilter.h	/^#define SkBlurMaskFilter_DEFINED$/;"	d
SkBool	SkTypes.h	/^typedef int SkBool;$/;"	t
SkBool	core/SkTypes.h	/^typedef int SkBool;$/;"	t
SkBool8	SkTypes.h	/^typedef uint8_t SkBool8;$/;"	t
SkBool8	core/SkTypes.h	/^typedef uint8_t SkBool8;$/;"	t
SkBorderView	views/SkBorderView.h	/^class SkBorderView : public SkWidgetView {$/;"	c
SkBorderView_DEFINED	views/SkBorderView.h	/^#define SkBorderView_DEFINED$/;"	d
SkBoundary	utils/SkBoundaryPatch.h	/^class SkBoundary : public SkRefCnt {$/;"	c
SkBoundaryPatch	utils/SkBoundaryPatch.h	/^class SkBoundaryPatch {$/;"	c
SkBoundaryPatch_DEFINED	utils/SkBoundaryPatch.h	/^#define SkBoundaryPatch_DEFINED$/;"	d
SkBounder	core/SkBounder.h	/^class SkBounder : public SkRefCnt {$/;"	c
SkBounder_DEFINED	core/SkBounder.h	/^#define SkBounder_DEFINED$/;"	d
SkBufferStream	core/SkStream.h	/^class SkBufferStream : public SkStream {$/;"	c
SkBuffer_DEFINED	core/SkBuffer.h	/^#define SkBuffer_DEFINED$/;"	d
SkButtonView	views/SkWidgetViews.h	/^class SkButtonView : public SkWidgetView {$/;"	c
SkButtonWidget	views/SkWidget.h	/^    SkButtonWidget(uint32_t flags = 0) : SkHasLabelWidget(flags), fState(kOff_State) {}$/;"	f	class:SkButtonWidget
SkButtonWidget	views/SkWidget.h	/^class SkButtonWidget : public SkHasLabelWidget {$/;"	c
SkCGUtils_DEFINED	utils/mac/SkCGUtils.h	/^#define SkCGUtils_DEFINED$/;"	d
SkCLZ	core/SkMath.h	/^    #define SkCLZ(/;"	d
SkCamera3D	utils/SkCamera.h	/^class SkCamera3D {$/;"	c
SkCamera_DEFINED	utils/SkCamera.h	/^#define SkCamera_DEFINED$/;"	d
SkCanvas	core/SkCanvas.h	/^class SK_API SkCanvas : public SkRefCnt {$/;"	c
SkCanvas_DEFINED	core/SkCanvas.h	/^#define SkCanvas_DEFINED$/;"	d
SkCastForQSort	core/SkTSearch.h	/^#define SkCastForQSort(/;"	d
SkCheckBoxView	views/SkWidget.h	/^class SkCheckBoxView : public SkHasLabelView {$/;"	c
SkCheckBoxWidget	views/SkWidget.h	/^class SkCheckBoxWidget : public SkButtonWidget {$/;"	c
SkCheckButtonView	views/SkWidgetViews.h	/^class SkCheckButtonView : public SkWidgetView {$/;"	c
SkChunkAlloc	core/SkChunkAlloc.h	/^class SkChunkAlloc : SkNoncopyable {$/;"	c
SkChunkAlloc_DEFINED	core/SkChunkAlloc.h	/^#define SkChunkAlloc_DEFINED$/;"	d
SkClampMax	core/SkMath.h	/^static inline int SkClampMax(int value, int max) {$/;"	f
SkClampPos	core/SkMath.h	/^static inline int SkClampPos(int value) {$/;"	f
SkClampRange	core/SkClampRange.h	/^struct SkClampRange {$/;"	s
SkClampRange_DEFINED	core/SkClampRange.h	/^#define SkClampRange_DEFINED$/;"	d
SkClampUMax	core/SkMath.h	/^static inline unsigned SkClampUMax(unsigned value, unsigned max) {$/;"	f
SkClipStack	core/SkClipStack.h	/^class SK_API SkClipStack {$/;"	c
SkClipStack_DEFINED	core/SkClipStack.h	/^#define SkClipStack_DEFINED$/;"	d
SkColor	core/SkColor.h	/^typedef uint32_t SkColor;$/;"	t
SkColor2GrColor	gpu/SkGr.h	/^    static GrColor SkColor2GrColor(SkColor c) {$/;"	f	class:SkGr
SkColorFilter	core/SkColorFilter.h	/^    SkColorFilter() {}$/;"	f	class:SkColorFilter
SkColorFilter	core/SkColorFilter.h	/^    SkColorFilter(SkFlattenableReadBuffer& rb) : INHERITED(rb) {}$/;"	f	class:SkColorFilter
SkColorFilter	core/SkColorFilter.h	/^class SK_API SkColorFilter : public SkFlattenable {$/;"	c
SkColorFilterImageFilter	effects/SkTestImageFilters.h	/^    SkColorFilterImageFilter(SkColorFilter* cf) : fColorFilter(cf) {$/;"	f	class:SkColorFilterImageFilter
SkColorFilterImageFilter	effects/SkTestImageFilters.h	/^class SkColorFilterImageFilter : public SkImageFilter {$/;"	c
SkColorFilter_DEFINED	core/SkColorFilter.h	/^#define SkColorFilter_DEFINED$/;"	d
SkColorGetA	core/SkColor.h	/^#define SkColorGetA(/;"	d
SkColorGetB	core/SkColor.h	/^#define SkColorGetB(/;"	d
SkColorGetG	core/SkColor.h	/^#define SkColorGetG(/;"	d
SkColorGetR	core/SkColor.h	/^#define SkColorGetR(/;"	d
SkColorMatrix	effects/SkColorMatrix.h	/^class SkColorMatrix {$/;"	c
SkColorMatrixFilter	effects/SkColorMatrixFilter.h	/^class SK_API SkColorMatrixFilter : public SkColorFilter {$/;"	c
SkColorMatrixFilter_DEFINED	effects/SkColorMatrixFilter.h	/^#define SkColorMatrixFilter_DEFINED$/;"	d
SkColorMatrix_DEFINED	effects/SkColorMatrix.h	/^#define SkColorMatrix_DEFINED$/;"	d
SkColorPriv_DEFINED	SkColorPriv.h	/^#define SkColorPriv_DEFINED$/;"	d
SkColorPriv_DEFINED	core/SkColorPriv.h	/^#define SkColorPriv_DEFINED$/;"	d
SkColorSetA	core/SkColor.h	/^static inline SkColor SkColorSetA(SkColor c, U8CPU a) {$/;"	f
SkColorSetARGB	core/SkColor.h	/^#define SkColorSetARGB(/;"	d
SkColorSetARGBInline	core/SkColor.h	/^static inline SkColor SkColorSetARGBInline(U8CPU a, U8CPU r, U8CPU g, U8CPU b)$/;"	f
SkColorSetARGBMacro	core/SkColor.h	/^#define SkColorSetARGBMacro(/;"	d
SkColorSetRGB	core/SkColor.h	/^#define SkColorSetRGB(/;"	d
SkColorShader	core/SkColorShader.h	/^class SK_API SkColorShader : public SkShader {$/;"	c
SkColorShader_DEFINED	core/SkColorShader.h	/^#define SkColorShader_DEFINED$/;"	d
SkColorTable	SkBitmap.h	/^class SkColorTable : public SkRefCnt {$/;"	c
SkColorTable	core/SkBitmap.h	/^class SkColorTable : public SkRefCnt {$/;"	c
SkColorToHSV	core/SkColor.h	/^static inline void SkColorToHSV(SkColor color, SkScalar hsv[3])$/;"	f
SkColor_DEFINED	core/SkColor.h	/^#define SkColor_DEFINED$/;"	d
SkCompact_4444	SkColorPriv.h	/^static inline U16CPU SkCompact_4444(uint32_t c) {$/;"	f
SkCompact_4444	core/SkColorPriv.h	/^static inline U16CPU SkCompact_4444(uint32_t c) {$/;"	f
SkCompact_8888	SkColorPriv.h	/^static inline SkPMColor SkCompact_8888(uint32_t c) {$/;"	f
SkCompact_8888	core/SkColorPriv.h	/^static inline SkPMColor SkCompact_8888(uint32_t c) {$/;"	f
SkCompact_rgb_16	SkColorPriv.h	/^static inline U16CPU SkCompact_rgb_16(uint32_t c) {$/;"	f
SkCompact_rgb_16	core/SkColorPriv.h	/^static inline U16CPU SkCompact_rgb_16(uint32_t c) {$/;"	f
SkCompileAssert	SkTypes.h	/^struct SkCompileAssert {$/;"	s	namespace:__anon41
SkCompileAssert	core/SkTypes.h	/^struct SkCompileAssert {$/;"	s	namespace:__anon28
SkComposeImageFilter	effects/SkTestImageFilters.h	/^    SkComposeImageFilter(SkImageFilter* outer, SkImageFilter* inner) {$/;"	f	class:SkComposeImageFilter
SkComposeImageFilter	effects/SkTestImageFilters.h	/^class SkComposeImageFilter : public SkImageFilter {$/;"	c
SkComposePathEffect	core/SkPathEffect.h	/^    SkComposePathEffect(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkComposePathEffect
SkComposePathEffect	core/SkPathEffect.h	/^    SkComposePathEffect(SkPathEffect* outer, SkPathEffect* inner)$/;"	f	class:SkComposePathEffect
SkComposePathEffect	core/SkPathEffect.h	/^class SkComposePathEffect : public SkPairPathEffect {$/;"	c
SkComposeShader	core/SkComposeShader.h	/^class SK_API SkComposeShader : public SkShader {$/;"	c
SkComposeShader_DEFINED	core/SkComposeShader.h	/^#define SkComposeShader_DEFINED$/;"	d
SkCopySign32	core/SkMath.h	/^static inline int32_t SkCopySign32(int32_t x, int32_t y) {$/;"	f
SkCornerPathEffect	effects/SkCornerPathEffect.h	/^class SK_API SkCornerPathEffect : public SkPathEffect {$/;"	c
SkCornerPathEffect_DEFINED	effects/SkCornerPathEffect.h	/^#define SkCornerPathEffect_DEFINED$/;"	d
SkCosineMapper	utils/SkUnitMappers.h	/^    SkCosineMapper() {}$/;"	f	class:SkCosineMapper
SkCosineMapper	utils/SkUnitMappers.h	/^class SkCosineMapper : public SkUnitMapper {$/;"	c
SkCreateCGImageRef	utils/mac/SkCGUtils.h	/^static inline CGImageRef SkCreateCGImageRef(const SkBitmap& bm) {$/;"	f
SkCubicBoundary	utils/SkBoundaryPatch.h	/^class SkCubicBoundary : public SkBoundary {$/;"	c
SkCubicInterval_DEFINED	utils/SkCubicInterval.h	/^#define SkCubicInterval_DEFINED$/;"	d
SkCullPoints	utils/SkCullPoints.h	/^class SkCullPoints {$/;"	c
SkCullPointsPath	utils/SkCullPoints.h	/^class SkCullPointsPath {$/;"	c
SkCullPoints_DEFINED	utils/SkCullPoints.h	/^#define SkCullPoints_DEFINED$/;"	d
SkDEBUGCODE	SkTypes.h	/^    #define SkDEBUGCODE(/;"	d
SkDEBUGCODE	core/SkTypes.h	/^    #define SkDEBUGCODE(/;"	d
SkDEBUGF	SkTypes.h	/^    #define SkDEBUGF(/;"	d
SkDEBUGF	core/SkTypes.h	/^    #define SkDEBUGF(/;"	d
SkDEBUGFAIL	SkTypes.h	/^    #define SkDEBUGFAIL(/;"	d
SkDEBUGFAIL	core/SkTypes.h	/^    #define SkDEBUGFAIL(/;"	d
SkDECLAREPARAM	SkTypes.h	/^    #define SkDECLAREPARAM(/;"	d
SkDECLAREPARAM	core/SkTypes.h	/^    #define SkDECLAREPARAM(/;"	d
SkDELETE	core/SkPostConfig.h	/^    #define SkDELETE(/;"	d
SkDELETE_ARRAY	core/SkPostConfig.h	/^    #define SkDELETE_ARRAY(/;"	d
SkDITHER_A32To4444	core/SkDither.h	/^#define SkDITHER_A32To4444(/;"	d
SkDITHER_A32_FOR_4444_MACRO	core/SkDither.h	/^#define SkDITHER_A32_FOR_4444_MACRO(/;"	d
SkDITHER_B32To4444	core/SkDither.h	/^#define SkDITHER_B32To4444(/;"	d
SkDITHER_B32To565	core/SkDither.h	/^#define SkDITHER_B32To565(/;"	d
SkDITHER_B32_FOR_4444_MACRO	core/SkDither.h	/^#define SkDITHER_B32_FOR_4444_MACRO(/;"	d
SkDITHER_B32_FOR_565	core/SkDither.h	/^    #define SkDITHER_B32_FOR_565(/;"	d
SkDITHER_B32_FOR_565	core/SkDither.h	/^    inline unsigned SkDITHER_B32_FOR_565(unsigned b, unsigned d)$/;"	f
SkDITHER_B32_FOR_565_MACRO	core/SkDither.h	/^#define SkDITHER_B32_FOR_565_MACRO(/;"	d
SkDITHER_G32To4444	core/SkDither.h	/^#define SkDITHER_G32To4444(/;"	d
SkDITHER_G32To565	core/SkDither.h	/^#define SkDITHER_G32To565(/;"	d
SkDITHER_G32_FOR_4444_MACRO	core/SkDither.h	/^#define SkDITHER_G32_FOR_4444_MACRO(/;"	d
SkDITHER_G32_FOR_565	core/SkDither.h	/^    #define SkDITHER_G32_FOR_565(/;"	d
SkDITHER_G32_FOR_565	core/SkDither.h	/^    inline unsigned SkDITHER_G32_FOR_565(unsigned g, unsigned d)$/;"	f
SkDITHER_G32_FOR_565_MACRO	core/SkDither.h	/^#define SkDITHER_G32_FOR_565_MACRO(/;"	d
SkDITHER_R32To4444	core/SkDither.h	/^#define SkDITHER_R32To4444(/;"	d
SkDITHER_R32To565	core/SkDither.h	/^#define SkDITHER_R32To565(/;"	d
SkDITHER_R32_FOR_4444_MACRO	core/SkDither.h	/^#define SkDITHER_R32_FOR_4444_MACRO(/;"	d
SkDITHER_R32_FOR_565	core/SkDither.h	/^    #define SkDITHER_R32_FOR_565(/;"	d
SkDITHER_R32_FOR_565	core/SkDither.h	/^    inline unsigned SkDITHER_R32_FOR_565(unsigned r, unsigned d)$/;"	f
SkDITHER_R32_FOR_565_MACRO	core/SkDither.h	/^#define SkDITHER_R32_FOR_565_MACRO(/;"	d
SkDOM	xml/SkDOM.h	/^class SkDOM {$/;"	c
SkDOM_DEFINED	xml/SkDOM.h	/^#define SkDOM_DEFINED$/;"	d
SkDashPathEffect	effects/SkDashPathEffect.h	/^class SK_API SkDashPathEffect : public SkPathEffect {$/;"	c
SkDashPathEffect_DEFINED	effects/SkDashPathEffect.h	/^#define SkDashPathEffect_DEFINED$/;"	d
SkData	core/SkData.h	/^class SkData : public SkRefCnt {$/;"	c
SkData_DEFINED	core/SkData.h	/^#define SkData_DEFINED$/;"	d
SkDebugWStream	core/SkStream.h	/^class SkDebugWStream : public SkWStream {$/;"	c
SkDebugfDumper	utils/SkDumpCanvas.h	/^class SkDebugfDumper : public SkFormatDumper {$/;"	c
SkDefaultImageDecoderFactory	images/SkImageDecoder.h	/^class SkDefaultImageDecoderFactory : SkImageDecoderFactory {$/;"	c
SkDeferredCanvas	utils/SkDeferredCanvas.h	/^class SK_API SkDeferredCanvas : public SkCanvas {$/;"	c
SkDeferredCanvas_DEFINED	utils/SkDeferredCanvas.h	/^#define SkDeferredCanvas_DEFINED$/;"	d
SkDegreesToRadians	core/SkScalar.h	/^    #define SkDegreesToRadians(/;"	d
SkDeque	core/SkDeque.h	/^class SK_API SkDeque : SkNoncopyable {$/;"	c
SkDeque_DEFINED	core/SkDeque.h	/^#define SkDeque_DEFINED$/;"	d
SkDescriptor	core/SkDescriptor.h	/^    SkDescriptor() {}$/;"	f	class:SkDescriptor
SkDescriptor	core/SkDescriptor.h	/^class SkDescriptor : SkNoncopyable {$/;"	c
SkDescriptor_DEFINED	core/SkDescriptor.h	/^#define SkDescriptor_DEFINED$/;"	d
SkDevice	core/SkDevice.h	/^class SK_API SkDevice : public SkRefCnt {$/;"	c
SkDeviceProfile	core/SkDeviceProfile.h	/^class SkDeviceProfile : public SkRefCnt {$/;"	c
SkDeviceProfile_DEFINED	core/SkDeviceProfile.h	/^#define SkDeviceProfile_DEFINED$/;"	d
SkDevice_DEFINED	core/SkDevice.h	/^#define SkDevice_DEFINED$/;"	d
SkDilateImageFilter	effects/SkMorphologyImageFilter.h	/^    SkDilateImageFilter(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkDilateImageFilter
SkDilateImageFilter	effects/SkMorphologyImageFilter.h	/^    SkDilateImageFilter(int radiusX, int radiusY) : INHERITED(radiusX, radiusY) {}$/;"	f	class:SkDilateImageFilter
SkDilateImageFilter	effects/SkMorphologyImageFilter.h	/^class SK_API SkDilateImageFilter : public SkMorphologyImageFilter {$/;"	c
SkDiscreteMapper	utils/SkUnitMappers.h	/^class SkDiscreteMapper : public SkUnitMapper {$/;"	c
SkDiscretePathEffect	effects/SkDiscretePathEffect.h	/^class SkDiscretePathEffect : public SkPathEffect {$/;"	c
SkDiscretePathEffect_DEFINED	effects/SkDiscretePathEffect.h	/^#define SkDiscretePathEffect_DEFINED$/;"	d
SkDitherARGB32For565	core/SkDither.h	/^static inline SkPMColor SkDitherARGB32For565(SkPMColor c, unsigned dither)$/;"	f
SkDitherARGB32To4444	SkColorPriv.h	/^static inline SkPMColor16 SkDitherARGB32To4444(U8CPU a, U8CPU r,$/;"	f
SkDitherARGB32To4444	core/SkColorPriv.h	/^static inline SkPMColor16 SkDitherARGB32To4444(U8CPU a, U8CPU r,$/;"	f
SkDitherARGB32To4444	core/SkDither.h	/^static inline SkPMColor16 SkDitherARGB32To4444(SkPMColor c, unsigned dither)$/;"	f
SkDitherARGB32To4444	core/SkDither.h	/^static inline SkPMColor16 SkDitherARGB32To4444(U8CPU a, U8CPU r, U8CPU g,$/;"	f
SkDitherARGB32To565	core/SkDither.h	/^static inline uint16_t SkDitherARGB32To565(U8CPU sa, SkPMColor c, unsigned dither)$/;"	f
SkDitherPack888ToRGB16	SkColorPriv.h	/^static inline uint16_t SkDitherPack888ToRGB16(U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkDitherPack888ToRGB16	core/SkColorPriv.h	/^static inline uint16_t SkDitherPack888ToRGB16(U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkDitherPixel32To4444	SkColorPriv.h	/^static inline SkPMColor16 SkDitherPixel32To4444(SkPMColor c) {$/;"	f
SkDitherPixel32To4444	core/SkColorPriv.h	/^static inline SkPMColor16 SkDitherPixel32To4444(SkPMColor c) {$/;"	f
SkDitherPixel32ToPixel16	SkColorPriv.h	/^static inline uint16_t SkDitherPixel32ToPixel16(SkPMColor c) {$/;"	f
SkDitherPixel32ToPixel16	core/SkColorPriv.h	/^static inline uint16_t SkDitherPixel32ToPixel16(SkPMColor c) {$/;"	f
SkDitherRGB32For565	core/SkDither.h	/^static inline SkPMColor SkDitherRGB32For565(SkPMColor c, unsigned dither)$/;"	f
SkDitherRGB32To565	core/SkDither.h	/^static inline uint16_t SkDitherRGB32To565(SkPMColor c, unsigned dither)$/;"	f
SkDitherRGBTo565	core/SkDither.h	/^static inline uint16_t SkDitherRGBTo565(U8CPU r, U8CPU g, U8CPU b,$/;"	f
SkDither_DEFINED	core/SkDither.h	/^#define SkDither_DEFINED$/;"	d
SkDiv255Round	core/SkMath.h	/^static inline unsigned SkDiv255Round(unsigned prod) {$/;"	f
SkDoubleToFixed	core/SkFixed.h	/^    #define SkDoubleToFixed(/;"	d
SkDoubleToMScalar	utils/SkMatrix44.h	/^    static inline double SkDoubleToMScalar(double x) {$/;"	f
SkDoubleToMScalar	utils/SkMatrix44.h	/^    static inline float SkDoubleToMScalar(double x) {$/;"	f
SkDoubleToScalar	core/SkScalar.h	/^        #define SkDoubleToScalar(/;"	d
SkDoubleToScalar	core/SkScalar.h	/^    #define SkDoubleToScalar(/;"	d
SkDownSampleImageFilter	effects/SkTestImageFilters.h	/^    SkDownSampleImageFilter(SkScalar scale) : fScale(scale) {}$/;"	f	class:SkDownSampleImageFilter
SkDownSampleImageFilter	effects/SkTestImageFilters.h	/^class SkDownSampleImageFilter : public SkImageFilter {$/;"	c
SkDraw	core/SkDraw.h	/^class SkDraw {$/;"	c
SkDrawCacheProc	core/SkPaint.h	/^typedef const SkGlyph& (*SkDrawCacheProc)(SkGlyphCache*, const char**,$/;"	t
SkDrawFilter	core/SkDrawFilter.h	/^class SkDrawFilter : public SkRefCnt {$/;"	c
SkDrawFilter_DEFINED	core/SkDrawFilter.h	/^#define SkDrawFilter_DEFINED$/;"	d
SkDrawLooper	core/SkDrawLooper.h	/^    SkDrawLooper() {}$/;"	f	class:SkDrawLooper
SkDrawLooper	core/SkDrawLooper.h	/^    SkDrawLooper(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkDrawLooper
SkDrawLooper	core/SkDrawLooper.h	/^class SK_API SkDrawLooper : public SkFlattenable {$/;"	c
SkDrawLooper_DEFINED	core/SkDrawLooper.h	/^#define SkDrawLooper_DEFINED$/;"	d
SkDraw_DEFINED	core/SkDraw.h	/^#define SkDraw_DEFINED$/;"	d
SkDumpCanvas	utils/SkDumpCanvas.h	/^class SkDumpCanvas : public SkCanvas {$/;"	c
SkDumpCanvas_DEFINED	utils/SkDumpCanvas.h	/^#define SkDumpCanvas_DEFINED$/;"	d
SkDynamicMemoryWStream	core/SkStream.h	/^class SK_API SkDynamicMemoryWStream : public SkWStream {$/;"	c
SkEdgeClipper	core/SkEdgeClipper.h	/^class SkEdgeClipper {$/;"	c
SkEdgeClipper_DEFINED	core/SkEdgeClipper.h	/^#define SkEdgeClipper_DEFINED$/;"	d
SkEffects	effects/SkEffects.h	/^class SkEffects {$/;"	c
SkEffects_DEFINED	effects/SkEffects.h	/^#define SkEffects_DEFINED$/;"	d
SkElementType	animator/SkAnimator.h	/^enum SkElementType {$/;"	g
SkEmbossMaskFilter	effects/SkEmbossMaskFilter.h	/^class SkEmbossMaskFilter : public SkMaskFilter {$/;"	c
SkEmbossMaskFilter_DEFINED	effects/SkEmbossMaskFilter.h	/^#define SkEmbossMaskFilter_DEFINED$/;"	d
SkEmptyShader	core/SkEmptyShader.h	/^    SkEmptyShader() {}$/;"	f	class:SkEmptyShader
SkEmptyShader	core/SkEmptyShader.h	/^    SkEmptyShader(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkEmptyShader
SkEmptyShader	core/SkEmptyShader.h	/^class SK_API SkEmptyShader : public SkShader {$/;"	c
SkEmptyShader_DEFINED	core/SkEmptyShader.h	/^#define SkEmptyShader_DEFINED$/;"	d
SkEndianSwap16	core/SkEndian.h	/^static inline uint16_t SkEndianSwap16(U16CPU value) {$/;"	f
SkEndianSwap16s	core/SkEndian.h	/^static inline void SkEndianSwap16s(uint16_t array[], int count) {$/;"	f
SkEndianSwap32	core/SkEndian.h	/^static inline uint32_t SkEndianSwap32(uint32_t value) {$/;"	f
SkEndianSwap32s	core/SkEndian.h	/^static inline void SkEndianSwap32s(uint32_t array[], int count) {$/;"	f
SkEndian_Byte0Shift	core/SkEndian.h	/^    #define SkEndian_Byte0Shift /;"	d
SkEndian_Byte1Shift	core/SkEndian.h	/^    #define SkEndian_Byte1Shift /;"	d
SkEndian_Byte2Shift	core/SkEndian.h	/^    #define SkEndian_Byte2Shift /;"	d
SkEndian_Byte3Shift	core/SkEndian.h	/^    #define SkEndian_Byte3Shift /;"	d
SkEndian_DEFINED	core/SkEndian.h	/^#define SkEndian_DEFINED$/;"	d
SkEndian_SwapBE16	core/SkEndian.h	/^    #define SkEndian_SwapBE16(/;"	d
SkEndian_SwapBE32	core/SkEndian.h	/^    #define SkEndian_SwapBE32(/;"	d
SkEndian_SwapLE16	core/SkEndian.h	/^    #define SkEndian_SwapLE16(/;"	d
SkEndian_SwapLE32	core/SkEndian.h	/^    #define SkEndian_SwapLE32(/;"	d
SkErodeImageFilter	effects/SkMorphologyImageFilter.h	/^    SkErodeImageFilter(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkErodeImageFilter
SkErodeImageFilter	effects/SkMorphologyImageFilter.h	/^    SkErodeImageFilter(int radiusX, int radiusY) : INHERITED(radiusX, radiusY) {}$/;"	f	class:SkErodeImageFilter
SkErodeImageFilter	effects/SkMorphologyImageFilter.h	/^class SK_API SkErodeImageFilter : public SkMorphologyImageFilter {$/;"	c
SkEvalCubicInterval	utils/SkCubicInterval.h	/^static inline SkScalar SkEvalCubicInterval(const SkPoint pts[2], SkScalar x) {$/;"	f
SkEvent	views/SkEvent.h	/^class SkEvent {$/;"	c
SkEventSink	views/SkEventSink.h	/^class SkEventSink : public SkRefCnt {$/;"	c
SkEventSinkID	views/SkEvent.h	/^typedef uint32_t SkEventSinkID;$/;"	t
SkEventSink_DEFINED	views/SkEventSink.h	/^#define SkEventSink_DEFINED$/;"	d
SkEvent_DEFINED	views/SkEvent.h	/^#define SkEvent_DEFINED$/;"	d
SkExpand32_4444	SkColorPriv.h	/^static inline uint32_t SkExpand32_4444(SkPMColor c) {$/;"	f
SkExpand32_4444	core/SkColorPriv.h	/^static inline uint32_t SkExpand32_4444(SkPMColor c) {$/;"	f
SkExpand_4444	SkColorPriv.h	/^static inline uint32_t SkExpand_4444(U16CPU c) {$/;"	f
SkExpand_4444	core/SkColorPriv.h	/^static inline uint32_t SkExpand_4444(U16CPU c) {$/;"	f
SkExpand_8888	SkColorPriv.h	/^static inline uint32_t SkExpand_8888(SkPMColor c) {$/;"	f
SkExpand_8888	core/SkColorPriv.h	/^static inline uint32_t SkExpand_8888(SkPMColor c) {$/;"	f
SkExpand_rgb_16	SkColorPriv.h	/^static inline uint32_t SkExpand_rgb_16(U16CPU c) {$/;"	f
SkExpand_rgb_16	core/SkColorPriv.h	/^static inline uint32_t SkExpand_rgb_16(U16CPU c) {$/;"	f
SkExtractSign	core/SkMath.h	/^#define SkExtractSign(/;"	d
SkFDStream	core/SkStream.h	/^class SkFDStream : public SkStream {$/;"	c
SkFDot6	core/SkFDot6.h	/^typedef int32_t SkFDot6;$/;"	t
SkFDot6Ceil	core/SkFDot6.h	/^#define SkFDot6Ceil(/;"	d
SkFDot6Div	core/SkFDot6.h	/^inline SkFixed SkFDot6Div(SkFDot6 a, SkFDot6 b) {$/;"	f
SkFDot6Floor	core/SkFDot6.h	/^#define SkFDot6Floor(/;"	d
SkFDot6Round	core/SkFDot6.h	/^#define SkFDot6Round(/;"	d
SkFDot6ToFixed	core/SkFDot6.h	/^inline SkFixed SkFDot6ToFixed(SkFDot6 x) {$/;"	f
SkFDot6_DEFINED	core/SkFDot6.h	/^#define SkFDot6_DEFINED$/;"	d
SkFILEStream	core/SkStream.h	/^class SkFILEStream : public SkStream {$/;"	c
SkFILEWStream	core/SkStream.h	/^class SkFILEWStream : public SkWStream {$/;"	c
SkFILE_Flags	core/SkOSFile.h	/^enum SkFILE_Flags {$/;"	g
SkFactorySet	core/SkFlattenable.h	/^class SkFactorySet : public SkTPtrSet<SkFlattenable::Factory> {};$/;"	c
SkFastFourByteInterp	SkColorPriv.h	/^static inline SkPMColor SkFastFourByteInterp(SkPMColor src,$/;"	f
SkFastFourByteInterp	core/SkColorPriv.h	/^static inline SkPMColor SkFastFourByteInterp(SkPMColor src,$/;"	f
SkFastMin32	SkTypes.h	/^static inline int32_t SkFastMin32(int32_t value, int32_t max) {$/;"	f
SkFastMin32	core/SkTypes.h	/^static inline int32_t SkFastMin32(int32_t value, int32_t max) {$/;"	f
SkFieldType	animator/SkAnimator.h	/^enum SkFieldType {$/;"	g
SkFillViewLayout	views/SkStackViewLayout.h	/^class SkFillViewLayout : public SkView::Layout {$/;"	c
SkFilterShader	core/SkColorFilter.h	/^class SkFilterShader : public SkShader {$/;"	c
SkFixed	core/SkFixed.h	/^typedef int32_t             SkFixed;$/;"	t
SkFixed48	core/SkFixed.h	/^typedef int64_t SkFixed48;$/;"	t
SkFixed48ToFixed	core/SkFixed.h	/^#define SkFixed48ToFixed(/;"	d
SkFixed48ToInt	core/SkFixed.h	/^#define SkFixed48ToInt(/;"	d
SkFixedAbs	core/SkFixed.h	/^#define SkFixedAbs(/;"	d
SkFixedAve	core/SkFixed.h	/^#define SkFixedAve(/;"	d
SkFixedCeil	core/SkFixed.h	/^#define SkFixedCeil(/;"	d
SkFixedCeilToFixed	core/SkFixed.h	/^#define SkFixedCeilToFixed(/;"	d
SkFixedCeilToInt	core/SkFixed.h	/^#define SkFixedCeilToInt(/;"	d
SkFixedCos	core/SkFixed.h	/^inline SkFixed SkFixedCos(SkFixed radians)$/;"	f
SkFixedDiv	core/SkFixed.h	/^#define SkFixedDiv(/;"	d
SkFixedFloor	core/SkFixed.h	/^#define SkFixedFloor(/;"	d
SkFixedFloorToFixed	core/SkFixed.h	/^#define SkFixedFloorToFixed(/;"	d
SkFixedFloorToInt	core/SkFixed.h	/^#define SkFixedFloorToInt(/;"	d
SkFixedFraction	core/SkFixed.h	/^inline SkFixed SkFixedFraction(SkFixed x)$/;"	f
SkFixedInvert	core/SkFixed.h	/^#define SkFixedInvert(/;"	d
SkFixedMul	core/SkFixed.h	/^    #define SkFixedMul(/;"	d
SkFixedMul	core/SkFixed.h	/^    #undef SkFixedMul$/;"	d
SkFixedMulAdd	core/SkFixed.h	/^    #define SkFixedMulAdd(/;"	d
SkFixedMulAdd_arm	core/SkFixed.h	/^    inline SkFixed SkFixedMulAdd_arm(SkFixed x, SkFixed y, SkFixed a)$/;"	f
SkFixedMul_arm	core/SkFixed.h	/^    inline SkFixed SkFixedMul_arm(SkFixed x, SkFixed y)$/;"	f
SkFixedMul_longlong	core/SkFixed.h	/^    inline SkFixed SkFixedMul_longlong(SkFixed a, SkFixed b)$/;"	f
SkFixedNearlyZero	core/SkFixed.h	/^inline bool SkFixedNearlyZero(SkFixed x, SkFixed tolerance = SK_FixedNearlyZero)$/;"	f
SkFixedRound	core/SkFixed.h	/^#define SkFixedRound(/;"	d
SkFixedRoundToFixed	core/SkFixed.h	/^#define SkFixedRoundToFixed(/;"	d
SkFixedRoundToInt	core/SkFixed.h	/^#define SkFixedRoundToInt(/;"	d
SkFixedSin	core/SkFixed.h	/^#define SkFixedSin(/;"	d
SkFixedSqrt	core/SkFixed.h	/^#define SkFixedSqrt(/;"	d
SkFixedSquare	core/SkFixed.h	/^    #define SkFixedSquare(/;"	d
SkFixedSquare_longlong	core/SkFixed.h	/^    inline SkFixed SkFixedSquare_longlong(SkFixed value)$/;"	f
SkFixedSquare_portable	core/SkFixed.h	/^inline SkFixed SkFixedSquare_portable(SkFixed value)$/;"	f
SkFixedToDouble	core/SkFixed.h	/^    #define SkFixedToDouble(/;"	d
SkFixedToFDot6	core/SkFDot6.h	/^#define SkFixedToFDot6(/;"	d
SkFixedToFixed48	core/SkFixed.h	/^#define SkFixedToFixed48(/;"	d
SkFixedToFloat	core/SkFixed.h	/^    #define SkFixedToFloat(/;"	d
SkFixedToFract	core/SkFixed.h	/^    #define SkFixedToFract(/;"	d
SkFixedToFract	core/SkFixed.h	/^    inline SkFract SkFixedToFract(SkFixed x)$/;"	f
SkFixedToScalar	core/SkScalar.h	/^    #define SkFixedToScalar(/;"	d
SkFixed_DEFINED	core/SkFixed.h	/^#define SkFixed_DEFINED$/;"	d
SkFlate	core/SkFlate.h	/^class SkFlate {$/;"	c
SkFlate_DEFINED	core/SkFlate.h	/^#define SkFlate_DEFINED$/;"	d
SkFlattenable	core/SkFlattenable.h	/^    SkFlattenable() {}$/;"	f	class:SkFlattenable
SkFlattenable	core/SkFlattenable.h	/^    SkFlattenable(SkFlattenableReadBuffer&) {}$/;"	f	class:SkFlattenable
SkFlattenable	core/SkFlattenable.h	/^class SK_API SkFlattenable : public SkRefCnt {$/;"	c
SkFlattenableReadBuffer	core/SkFlattenable.h	/^class SkFlattenableReadBuffer {$/;"	c
SkFlattenableWriteBuffer	core/SkFlattenable.h	/^class SkFlattenableWriteBuffer {$/;"	c
SkFlattenable_DEFINED	core/SkFlattenable.h	/^#define SkFlattenable_DEFINED$/;"	d
SkFlingState	views/SkTouchGesture.h	/^    SkFlingState() : fActive(false) {}$/;"	f	struct:SkFlingState
SkFlingState	views/SkTouchGesture.h	/^struct SkFlingState {$/;"	s
SkFlipPixelRef	images/SkFlipPixelRef.h	/^class SkFlipPixelRef : public SkPixelRef {$/;"	c
SkFlipPixelRef_DEFINED	images/SkFlipPixelRef.h	/^#define SkFlipPixelRef_DEFINED$/;"	d
SkFloat2Bits	core/SkFloatBits.h	/^static inline int32_t SkFloat2Bits(float x) {$/;"	f
SkFloatAs2sCompliment	core/SkFloatBits.h	/^static inline int32_t SkFloatAs2sCompliment(float x) {$/;"	f
SkFloatBits_DEFINED	core/SkFloatBits.h	/^#define SkFloatBits_DEFINED$/;"	d
SkFloatIntUnion	core/SkFloatBits.h	/^union SkFloatIntUnion {$/;"	u
SkFloatToFixed	core/SkFixed.h	/^    #define SkFloatToFixed(/;"	d
SkFloatToFixed	core/SkFixed.h	/^    #undef SkFloatToFixed$/;"	d
SkFloatToFixed	core/SkFixed.h	/^    static inline SkFixed SkFloatToFixed(float x) {$/;"	f
SkFloatToFixed48	core/SkFixed.h	/^#define SkFloatToFixed48(/;"	d
SkFloatToFixed_arm	core/SkFixed.h	/^    inline SkFixed SkFloatToFixed_arm(float x)$/;"	f
SkFloatToFract	core/SkFixed.h	/^    #define SkFloatToFract(/;"	d
SkFloatToIntCast	core/SkFloatBits.h	/^static inline int32_t SkFloatToIntCast(float x) {$/;"	f
SkFloatToIntCeil	core/SkFloatBits.h	/^static inline int32_t SkFloatToIntCeil(float x) {$/;"	f
SkFloatToIntFloor	core/SkFloatBits.h	/^static inline int32_t SkFloatToIntFloor(float x) {$/;"	f
SkFloatToIntRound	core/SkFloatBits.h	/^static inline int32_t SkFloatToIntRound(float x) {$/;"	f
SkFloatToMScalar	utils/SkMatrix44.h	/^    static inline double SkFloatToMScalar(float x) {$/;"	f
SkFloatToMScalar	utils/SkMatrix44.h	/^    static inline float SkFloatToMScalar(float x) {$/;"	f
SkFloatToScalar	core/SkScalar.h	/^        #define SkFloatToScalar(/;"	d
SkFloatToScalar	core/SkScalar.h	/^    #define SkFloatToScalar(/;"	d
SkFloatingPoint_DEFINED	core/SkFloatingPoint.h	/^#define SkFloatingPoint_DEFINED$/;"	d
SkFontHost	SkFontHost.h	/^class SK_API SkFontHost {$/;"	c
SkFontHost	core/SkFontHost.h	/^class SK_API SkFontHost {$/;"	c
SkFontHost_DEFINED	SkFontHost.h	/^#define SkFontHost_DEFINED$/;"	d
SkFontHost_DEFINED	core/SkFontHost.h	/^#define SkFontHost_DEFINED$/;"	d
SkFontID	core/SkTypeface.h	/^typedef uint32_t SkFontID;$/;"	t
SkFontTableTag	core/SkTypeface.h	/^typedef uint32_t SkFontTableTag;$/;"	t
SkFormatDumper	utils/SkDumpCanvas.h	/^class SkFormatDumper : public SkDumpCanvas::Dumper {$/;"	c
SkFourByteInterp	SkColorPriv.h	/^static inline SkPMColor SkFourByteInterp(SkPMColor src, SkPMColor dst,$/;"	f
SkFourByteInterp	core/SkColorPriv.h	/^static inline SkPMColor SkFourByteInterp(SkPMColor src, SkPMColor dst,$/;"	f
SkFourByteInterp256	SkColorPriv.h	/^static inline SkPMColor SkFourByteInterp256(SkPMColor src, SkPMColor dst,$/;"	f
SkFourByteInterp256	core/SkColorPriv.h	/^static inline SkPMColor SkFourByteInterp256(SkPMColor src, SkPMColor dst,$/;"	f
SkFourByteTag	SkTypes.h	/^typedef uint32_t SkFourByteTag;$/;"	t
SkFourByteTag	core/SkTypes.h	/^typedef uint32_t SkFourByteTag;$/;"	t
SkFract	core/SkFixed.h	/^typedef int32_t             SkFract;$/;"	t
SkFractDiv	core/SkFixed.h	/^#define SkFractDiv(/;"	d
SkFractMul	core/SkFixed.h	/^    #define SkFractMul(/;"	d
SkFractMul	core/SkFixed.h	/^    #undef SkFractMul$/;"	d
SkFractMul_arm	core/SkFixed.h	/^    inline SkFixed SkFractMul_arm(SkFixed x, SkFixed y)$/;"	f
SkFractMul_longlong	core/SkFixed.h	/^    inline SkFract SkFractMul_longlong(SkFract a, SkFract b)$/;"	f
SkFractSqrt	core/SkFixed.h	/^#define SkFractSqrt(/;"	d
SkFractToFixed	core/SkFixed.h	/^#define SkFractToFixed(/;"	d
SkFractToFloat	core/SkFixed.h	/^    #define SkFractToFloat(/;"	d
SkG16Assert	SkColorPriv.h	/^#define SkG16Assert(/;"	d
SkG16Assert	core/SkColorPriv.h	/^#define SkG16Assert(/;"	d
SkG16ToG32	SkColorPriv.h	/^static inline unsigned SkG16ToG32(unsigned g) {$/;"	f
SkG16ToG32	core/SkColorPriv.h	/^static inline unsigned SkG16ToG32(unsigned g) {$/;"	f
SkG32Assert	SkColorPriv.h	/^#define SkG32Assert(/;"	d
SkG32Assert	core/SkColorPriv.h	/^#define SkG32Assert(/;"	d
SkG32To4444	SkColorPriv.h	/^#define SkG32To4444(/;"	d
SkG32To4444	core/SkColorPriv.h	/^#define SkG32To4444(/;"	d
SkG32ToG16	SkColorPriv.h	/^    #define SkG32ToG16(/;"	d
SkG32ToG16	SkColorPriv.h	/^    static inline unsigned SkG32ToG16(unsigned g) {$/;"	f
SkG32ToG16	core/SkColorPriv.h	/^    #define SkG32ToG16(/;"	d
SkG32ToG16	core/SkColorPriv.h	/^    static inline unsigned SkG32ToG16(unsigned g) {$/;"	f
SkG32ToG16_MACRO	SkColorPriv.h	/^#define SkG32ToG16_MACRO(/;"	d
SkG32ToG16_MACRO	core/SkColorPriv.h	/^#define SkG32ToG16_MACRO(/;"	d
SkG4444ToG32	SkColorPriv.h	/^#define SkG4444ToG32(/;"	d
SkG4444ToG32	core/SkColorPriv.h	/^#define SkG4444ToG32(/;"	d
SkG4444ToG565	SkColorPriv.h	/^static inline unsigned SkG4444ToG565(unsigned g) {$/;"	f
SkG4444ToG565	core/SkColorPriv.h	/^static inline unsigned SkG4444ToG565(unsigned g) {$/;"	f
SkGLCanvas	utils/SkGLCanvas.h	/^class SkGLCanvas : public SkCanvas {$/;"	c
SkGLCanvas_DEFINED	utils/SkGLCanvas.h	/^#define SkGLCanvas_DEFINED$/;"	d
SkGLContext	gpu/SkGLContext.h	/^class SkGLContext : public SkRefCnt {$/;"	c
SkGLContext_DEFINED	gpu/SkGLContext.h	/^#define SkGLContext_DEFINED$/;"	d
SkGPipeController	pipe/SkGPipe.h	/^class SkGPipeController {$/;"	c
SkGPipeReader	pipe/SkGPipe.h	/^class SkGPipeReader {$/;"	c
SkGPipeWriter	pipe/SkGPipe.h	/^class SkGPipeWriter {$/;"	c
SkGPipe_DEFINED	pipe/SkGPipe.h	/^#define SkGPipe_DEFINED$/;"	d
SkGeometry_DEFINED	core/SkGeometry.h	/^#define SkGeometry_DEFINED$/;"	d
SkGetPackedA32	SkColorPriv.h	/^#define SkGetPackedA32(/;"	d
SkGetPackedA32	core/SkColorPriv.h	/^#define SkGetPackedA32(/;"	d
SkGetPackedA4444	SkColorPriv.h	/^#define SkGetPackedA4444(/;"	d
SkGetPackedA4444	core/SkColorPriv.h	/^#define SkGetPackedA4444(/;"	d
SkGetPackedB16	SkColorPriv.h	/^#define SkGetPackedB16(/;"	d
SkGetPackedB16	core/SkColorPriv.h	/^#define SkGetPackedB16(/;"	d
SkGetPackedB32	SkColorPriv.h	/^#define SkGetPackedB32(/;"	d
SkGetPackedB32	core/SkColorPriv.h	/^#define SkGetPackedB32(/;"	d
SkGetPackedB4444	SkColorPriv.h	/^#define SkGetPackedB4444(/;"	d
SkGetPackedB4444	core/SkColorPriv.h	/^#define SkGetPackedB4444(/;"	d
SkGetPackedG16	SkColorPriv.h	/^#define SkGetPackedG16(/;"	d
SkGetPackedG16	core/SkColorPriv.h	/^#define SkGetPackedG16(/;"	d
SkGetPackedG32	SkColorPriv.h	/^#define SkGetPackedG32(/;"	d
SkGetPackedG32	core/SkColorPriv.h	/^#define SkGetPackedG32(/;"	d
SkGetPackedG4444	SkColorPriv.h	/^#define SkGetPackedG4444(/;"	d
SkGetPackedG4444	core/SkColorPriv.h	/^#define SkGetPackedG4444(/;"	d
SkGetPackedR16	SkColorPriv.h	/^#define SkGetPackedR16(/;"	d
SkGetPackedR16	core/SkColorPriv.h	/^#define SkGetPackedR16(/;"	d
SkGetPackedR32	SkColorPriv.h	/^#define SkGetPackedR32(/;"	d
SkGetPackedR32	core/SkColorPriv.h	/^#define SkGetPackedR32(/;"	d
SkGetPackedR4444	SkColorPriv.h	/^#define SkGetPackedR4444(/;"	d
SkGetPackedR4444	core/SkColorPriv.h	/^#define SkGetPackedR4444(/;"	d
SkGlobals	core/SkGlobals.h	/^class SkGlobals {$/;"	c
SkGlobals_DEFINED	core/SkGlobals.h	/^#define SkGlobals_DEFINED$/;"	d
SkGlyph	core/SkScalerContext.h	/^struct SkGlyph {$/;"	s
SkGpuCanvas	gpu/SkGpuCanvas.h	/^class SkGpuCanvas : public SkCanvas {$/;"	c
SkGpuCanvas_DEFINED	gpu/SkGpuCanvas.h	/^#define SkGpuCanvas_DEFINED$/;"	d
SkGpuDevice	gpu/SkGpuDevice.h	/^class SK_API SkGpuDevice : public SkDevice {$/;"	c
SkGpuDevice_DEFINED	gpu/SkGpuDevice.h	/^#define SkGpuDevice_DEFINED$/;"	d
SkGr	gpu/SkGr.h	/^class SkGr {$/;"	c
SkGrClipIterator	gpu/SkGr.h	/^    SkGrClipIterator() { fClipStack = NULL;  fCurr = NULL; }$/;"	f	class:SkGrClipIterator
SkGrClipIterator	gpu/SkGr.h	/^    SkGrClipIterator(const SkClipStack& clipStack) { this->reset(clipStack); }$/;"	f	class:SkGrClipIterator
SkGrClipIterator	gpu/SkGr.h	/^class SkGrClipIterator : public GrClipIterator {$/;"	c
SkGrFontScaler	gpu/SkGr.h	/^class SkGrFontScaler : public GrFontScaler {$/;"	c
SkGrRenderTargetPixelRef	gpu/SkGrTexturePixelRef.h	/^class SK_API SkGrRenderTargetPixelRef : public SkROLockPixelsPixelRef {$/;"	c
SkGrTexturePixelRef	gpu/SkGrTexturePixelRef.h	/^class SK_API SkGrTexturePixelRef : public SkROLockPixelsPixelRef {$/;"	c
SkGrTexturePixelRef_DEFINED	gpu/SkGrTexturePixelRef.h	/^#define SkGrTexturePixelRef_DEFINED$/;"	d
SkGr_DEFINED	gpu/SkGr.h	/^#define SkGr_DEFINED$/;"	d
SkGradientShader	effects/SkGradientShader.h	/^class SK_API SkGradientShader {$/;"	c
SkGradientShader_DEFINED	effects/SkGradientShader.h	/^#define SkGradientShader_DEFINED$/;"	d
SkGraphics	core/SkGraphics.h	/^class SK_API SkGraphics {$/;"	c
SkGraphics_DEFINED	core/SkGraphics.h	/^#define SkGraphics_DEFINED$/;"	d
SkGridView	views/SkWidget.h	/^class SkGridView : public SkWidgetView {$/;"	c
SkGroupShape	effects/SkGroupShape.h	/^class SkGroupShape : public SkShape {$/;"	c
SkGroupShape_DEFINED	effects/SkGroupShape.h	/^#define SkGroupShape_DEFINED$/;"	d
SkHRESULT_DEFINED	utils/win/SkHRESULT.h	/^#define SkHRESULT_DEFINED$/;"	d
SkHSVToColor	core/SkColor.h	/^static inline SkColor SkHSVToColor(const SkScalar hsv[3])$/;"	f
SkHarfBuzzFont	ports/SkHarfBuzzFont.h	/^class SkHarfBuzzFont {$/;"	c
SkHarfBuzzFont_DEFINED	ports/SkHarfBuzzFont.h	/^#define SkHarfBuzzFont_DEFINED$/;"	d
SkHasLabelView	views/SkWidget.h	/^class SkHasLabelView : public SkView {$/;"	c
SkHasLabelWidget	views/SkWidget.h	/^    SkHasLabelWidget(uint32_t flags = 0) : SkWidget(flags) {}$/;"	f	class:SkHasLabelWidget
SkHasLabelWidget	views/SkWidget.h	/^class SkHasLabelWidget : public SkWidget {$/;"	c
SkIPoint	core/SkPoint.h	/^struct SkIPoint {$/;"	s
SkIRect	SkRect.h	/^struct SK_API SkIRect {$/;"	s
SkIRect	core/SkRect.h	/^struct SK_API SkIRect {$/;"	s
SkISize	core/SkSize.h	/^typedef SkTSize<int32_t> SkISize;$/;"	t
SkIStream	utils/win/SkIStream.h	/^class SkIStream : public SkBaseIStream {$/;"	c
SkIStream_DEFINED	utils/win/SkIStream.h	/^#define SkIStream_DEFINED$/;"	d
SkImageDecoder	images/SkImageDecoder.h	/^class SkImageDecoder {$/;"	c
SkImageDecoderFactory	images/SkImageDecoder.h	/^class SkImageDecoderFactory : public SkRefCnt {$/;"	c
SkImageDecoder_DEFINED	images/SkImageDecoder.h	/^#define SkImageDecoder_DEFINED$/;"	d
SkImageEncoder	images/SkImageEncoder.h	/^class SkImageEncoder {$/;"	c
SkImageEncoder_DEFINED	images/SkImageEncoder.h	/^#define SkImageEncoder_DEFINED$/;"	d
SkImageFilter	core/SkImageFilter.h	/^    SkImageFilter() {}$/;"	f	class:SkImageFilter
SkImageFilter	core/SkImageFilter.h	/^    explicit SkImageFilter(SkFlattenableReadBuffer& rb) : INHERITED(rb) {}$/;"	f	class:SkImageFilter
SkImageFilter	core/SkImageFilter.h	/^class SK_API SkImageFilter : public SkFlattenable {$/;"	c
SkImageFilter_DEFINED	core/SkImageFilter.h	/^#define SkImageFilter_DEFINED$/;"	d
SkImageRef	images/SkImageRef.h	/^class SkImageRef : public SkPixelRef {$/;"	c
SkImageRef_DEFINED	images/SkImageRef.h	/^#define SkImageRef_DEFINED$/;"	d
SkImageRef_GlobalPool	images/SkImageRef_GlobalPool.h	/^class SkImageRef_GlobalPool : public SkImageRef {$/;"	c
SkImageRef_GlobalPool_DEFINED	images/SkImageRef_GlobalPool.h	/^#define SkImageRef_GlobalPool_DEFINED$/;"	d
SkImageView	views/SkImageView.h	/^class SkImageView : public SkView {$/;"	c
SkImageView_DEFINED	views/SkImageView.h	/^#define SkImageView_DEFINED$/;"	d
SkIntToFDot6	core/SkFDot6.h	/^    #define SkIntToFDot6(/;"	d
SkIntToFDot6	core/SkFDot6.h	/^    inline SkFDot6 SkIntToFDot6(S16CPU x) {$/;"	f
SkIntToFixed	core/SkFixed.h	/^    #define SkIntToFixed(/;"	d
SkIntToFixed	core/SkFixed.h	/^    inline SkFixed SkIntToFixed(int n)$/;"	f
SkIntToFixed48	core/SkFixed.h	/^#define SkIntToFixed48(/;"	d
SkIntToScalar	core/SkScalar.h	/^    #define SkIntToScalar(/;"	d
SkIntToScalar	core/SkScalar.h	/^    static inline float SkIntToScalar(float param) {$/;"	f
SkIntToScalar	core/SkScalar.h	/^    static inline float SkIntToScalar(signed int param) {$/;"	f
SkIntToScalar	core/SkScalar.h	/^    static inline float SkIntToScalar(signed long param) {$/;"	f
SkIntToScalar	core/SkScalar.h	/^    static inline float SkIntToScalar(unsigned int param) {$/;"	f
SkIntToScalar	core/SkScalar.h	/^    static inline float SkIntToScalar(unsigned long param) {$/;"	f
SkInterpolator	utils/SkInterpolator.h	/^class SkInterpolator : public SkInterpolatorBase {$/;"	c
SkInterpolatorBase	utils/SkInterpolator.h	/^class SkInterpolatorBase : SkNoncopyable {$/;"	c
SkInterpolator_DEFINED	utils/SkInterpolator.h	/^#define SkInterpolator_DEFINED$/;"	d
SkIsAlign4	SkTypes.h	/^#define SkIsAlign4(/;"	d
SkIsAlign4	core/SkTypes.h	/^#define SkIsAlign4(/;"	d
SkIsPow2	core/SkMath.h	/^static inline bool SkIsPow2(int value) {$/;"	f
SkIsS16	SkTypes.h	/^static inline bool SkIsS16(long x) {$/;"	f
SkIsS16	core/SkTypes.h	/^static inline bool SkIsS16(long x) {$/;"	f
SkIsU16	SkTypes.h	/^static inline bool SkIsU16(long x) {$/;"	f
SkIsU16	core/SkTypes.h	/^static inline bool SkIsU16(long x) {$/;"	f
SkJS	xml/SkJS.h	/^class SkJS : public SkOSWindow {$/;"	c
SkJSON	utils/SkJSON.h	/^class SkJSON {$/;"	c
SkJSON_DEFINED	utils/SkJSON.h	/^#define SkJSON_DEFINED$/;"	d
SkJpegUtility_DEFINED	images/SkJpegUtility.h	/^#define SkJpegUtility_DEFINED$/;"	d
SkKernel33MaskFilter	effects/SkKernel33MaskFilter.h	/^    SkKernel33MaskFilter(const int coeff[3][3], int shift, int percent256 = 256)$/;"	f	class:SkKernel33MaskFilter
SkKernel33MaskFilter	effects/SkKernel33MaskFilter.h	/^class SkKernel33MaskFilter : public SkKernel33ProcMaskFilter {$/;"	c
SkKernel33MaskFilter_DEFINED	effects/SkKernel33MaskFilter.h	/^#define SkKernel33MaskFilter_DEFINED$/;"	d
SkKernel33ProcMaskFilter	effects/SkKernel33MaskFilter.h	/^    SkKernel33ProcMaskFilter(unsigned percent256 = 256)$/;"	f	class:SkKernel33ProcMaskFilter
SkKernel33ProcMaskFilter	effects/SkKernel33MaskFilter.h	/^class SkKernel33ProcMaskFilter : public SkMaskFilter {$/;"	c
SkKey	views/SkKey.h	/^enum SkKey {$/;"	g
SkKey_DEFINED	views/SkKey.h	/^#define SkKey_DEFINED$/;"	d
SkLONGLONG	core/SkPostConfig.h	/^            #define SkLONGLONG /;"	d
SkLayer	utils/SkLayer.h	/^class SkLayer : public SkRefCnt {$/;"	c
SkLayerDrawLooper	effects/SkLayerDrawLooper.h	/^class SK_API SkLayerDrawLooper : public SkDrawLooper {$/;"	c
SkLayerDrawLooper_DEFINED	effects/SkLayerDrawLooper.h	/^#define SkLayerDrawLooper_DEFINED$/;"	d
SkLayerRasterizer	effects/SkLayerRasterizer.h	/^class SkLayerRasterizer : public SkRasterizer {$/;"	c
SkLayerRasterizer_DEFINED	effects/SkLayerRasterizer.h	/^#define SkLayerRasterizer_DEFINED$/;"	d
SkLayer_DEFINED	utils/SkLayer.h	/^#define SkLayer_DEFINED$/;"	d
SkLineBoundary	utils/SkBoundaryPatch.h	/^class SkLineBoundary : public SkBoundary {$/;"	c
SkLineClipper	core/SkLineClipper.h	/^class SkLineClipper {$/;"	c
SkLineClipper_DEFINED	core/SkLineClipper.h	/^#define SkLineClipper_DEFINED$/;"	d
SkListSource	views/SkWidget.h	/^class SkListSource : public SkEventSink {$/;"	c
SkListSource	views/SkWidgetViews.h	/^class SkListSource : public SkRefCnt {$/;"	c
SkListView	views/SkWidget.h	/^class SkListView : public SkWidgetView {$/;"	c
SkListView	views/SkWidgetViews.h	/^class SkListView : public SkWidgetView {$/;"	c
SkMMAPStream	core/SkMMapStream.h	/^class SkMMAPStream : public SkMemoryStream {$/;"	c
SkMMapStream_DEFINED	core/SkMMapStream.h	/^#define SkMMapStream_DEFINED$/;"	d
SkMScalar	utils/SkMatrix44.h	/^    typedef double SkMScalar;$/;"	t
SkMScalar	utils/SkMatrix44.h	/^    typedef float SkMScalar;$/;"	t
SkMScalarToDouble	utils/SkMatrix44.h	/^    static inline double SkMScalarToDouble(double x) {$/;"	f
SkMScalarToDouble	utils/SkMatrix44.h	/^    static inline double SkMScalarToDouble(float x) {$/;"	f
SkMScalarToFloat	utils/SkMatrix44.h	/^    static inline float SkMScalarToFloat(double x) {$/;"	f
SkMScalarToFloat	utils/SkMatrix44.h	/^    static inline float SkMScalarToFloat(float x) {$/;"	f
SkMScalarToScalar	utils/SkMatrix44.h	/^        #define SkMScalarToScalar /;"	d
SkMScalarToScalar	utils/SkMatrix44.h	/^    #define SkMScalarToScalar /;"	d
SkMSec	SkTypes.h	/^typedef uint32_t SkMSec;$/;"	t
SkMSec	core/SkTypes.h	/^typedef uint32_t SkMSec;$/;"	t
SkMSec_LE	SkTypes.h	/^#define SkMSec_LE(/;"	d
SkMSec_LE	core/SkTypes.h	/^#define SkMSec_LE(/;"	d
SkMSec_LT	SkTypes.h	/^#define SkMSec_LT(/;"	d
SkMSec_LT	core/SkTypes.h	/^#define SkMSec_LT(/;"	d
SkMallocPixelRef	core/SkMallocPixelRef.h	/^class SkMallocPixelRef : public SkPixelRef {$/;"	c
SkMallocPixelRef_DEFINED	core/SkMallocPixelRef.h	/^#define SkMallocPixelRef_DEFINED$/;"	d
SkMask	core/SkMask.h	/^struct SkMask {$/;"	s
SkMaskFilter	core/SkMaskFilter.h	/^    SkMaskFilter() {}$/;"	f	class:SkMaskFilter
SkMaskFilter	core/SkMaskFilter.h	/^    SkMaskFilter(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkMaskFilter
SkMaskFilter	core/SkMaskFilter.h	/^class SkMaskFilter : public SkFlattenable {$/;"	c
SkMaskFilter_DEFINED	core/SkMaskFilter.h	/^#define SkMaskFilter_DEFINED$/;"	d
SkMask_DEFINED	core/SkMask.h	/^#define SkMask_DEFINED$/;"	d
SkMath_DEFINED	core/SkMath.h	/^#define SkMath_DEFINED$/;"	d
SkMatrix	core/SkMatrix.h	/^class SK_API SkMatrix {$/;"	c
SkMatrix3D	utils/SkCamera.h	/^struct SkMatrix3D {$/;"	s
SkMatrix44	utils/SkMatrix44.h	/^class SK_API SkMatrix44 {$/;"	c
SkMatrix44_DEFINED	utils/SkMatrix44.h	/^#define SkMatrix44_DEFINED$/;"	d
SkMatrixRef	effects/SkGroupShape.h	/^    SkMatrixRef() { this->reset(); }$/;"	f	class:SkMatrixRef
SkMatrixRef	effects/SkGroupShape.h	/^    explicit SkMatrixRef(const SkMatrix& matrix) {$/;"	f	class:SkMatrixRef
SkMatrixRef	effects/SkGroupShape.h	/^class SkMatrixRef : public SkTRefCnt<SkMatrix> {$/;"	c
SkMatrix_DEFINED	core/SkMatrix.h	/^#define SkMatrix_DEFINED$/;"	d
SkMax32	SkTypes.h	/^static inline int32_t SkMax32(int32_t a, int32_t b) {$/;"	f
SkMax32	core/SkTypes.h	/^static inline int32_t SkMax32(int32_t a, int32_t b) {$/;"	f
SkMaxScalar	core/SkScalar.h	/^    #define SkMaxScalar(/;"	d
SkMaxScalar	core/SkScalar.h	/^    inline SkScalar SkMaxScalar(SkScalar a, SkScalar b) { return a > b ? a : b; }$/;"	f
SkMeasureCacheProc	core/SkPaint.h	/^typedef const SkGlyph& (*SkMeasureCacheProc)(SkGlyphCache*, const char**);$/;"	t
SkMemoryStream	core/SkStream.h	/^class SkMemoryStream : public SkStream {$/;"	c
SkMemoryWStream	core/SkStream.h	/^class SkMemoryWStream : public SkWStream {$/;"	c
SkMemset16Proc	core/SkUtils.h	/^typedef void (*SkMemset16Proc)(uint16_t dst[], uint16_t value, int count);$/;"	t
SkMemset32Proc	core/SkUtils.h	/^typedef void (*SkMemset32Proc)(uint32_t dst[], uint32_t value, int count);$/;"	t
SkMergeImageFilter	effects/SkTestImageFilters.h	/^class SkMergeImageFilter : public SkImageFilter {$/;"	c
SkMesaGLContext	gpu/SkMesaGLContext.h	/^class SkMesaGLContext : public SkGLContext {$/;"	c
SkMesaGLContext_DEFINED	gpu/SkMesaGLContext.h	/^#define SkMesaGLContext_DEFINED$/;"	d
SkMeshIndices	utils/SkMeshUtils.h	/^class SkMeshIndices {$/;"	c
SkMeshUtils	utils/SkMeshUtils.h	/^class SkMeshUtils {$/;"	c
SkMeshUtils_DEFINED	utils/SkMeshUtils.h	/^#define SkMeshUtils_DEFINED$/;"	d
SkMetaData	core/SkMetaData.h	/^class SK_API SkMetaData {$/;"	c
SkMetaData_DEFINED	core/SkMetaData.h	/^#define SkMetaData_DEFINED$/;"	d
SkMin32	SkTypes.h	/^static inline int32_t SkMin32(int32_t a, int32_t b) {$/;"	f
SkMin32	core/SkTypes.h	/^static inline int32_t SkMin32(int32_t a, int32_t b) {$/;"	f
SkMinScalar	core/SkScalar.h	/^    #define SkMinScalar(/;"	d
SkMinScalar	core/SkScalar.h	/^    inline SkScalar SkMinScalar(SkScalar a, SkScalar b) { return a < b ? a : b; }$/;"	f
SkMorphologyImageFilter	effects/SkMorphologyImageFilter.h	/^class SK_API SkMorphologyImageFilter : public SkImageFilter {$/;"	c
SkMorphologyImageFilter_DEFINED	effects/SkMorphologyImageFilter.h	/^#define SkMorphologyImageFilter_DEFINED$/;"	d
SkMovie	images/SkMovie.h	/^class SkMovie : public SkRefCnt {$/;"	c
SkMovie_DEFINED	images/SkMovie.h	/^#define SkMovie_DEFINED$/;"	d
SkMul16ShiftRound	core/SkMath.h	/^static inline unsigned SkMul16ShiftRound(unsigned a, unsigned b, int shift) {$/;"	f
SkMulDiv255Ceiling	core/SkMath.h	/^static inline U8CPU SkMulDiv255Ceiling(U8CPU a, U8CPU b) {$/;"	f
SkMulDiv255Round	core/SkMath.h	/^static inline U8CPU SkMulDiv255Round(U8CPU a, U8CPU b) {$/;"	f
SkMulDiv255Trunc	core/SkMath.h	/^static inline U8CPU SkMulDiv255Trunc(U8CPU a, U8CPU b) {$/;"	f
SkMulS16	core/SkMath.h	/^        #define SkMulS16(/;"	d
SkMulS16	core/SkMath.h	/^        static inline int32_t SkMulS16(S16CPU x, S16CPU y) {$/;"	f
SkMulS16	core/SkMath.h	/^    static inline int32_t SkMulS16(S16CPU x, S16CPU y) {$/;"	f
SkMutex	core/SkThread_platform.h	/^class SkMutex : SkNoncopyable {$/;"	c
SkMutex	core/SkThread_platform.h	/^class SkMutex : public SkBaseMutex, SkNoncopyable {$/;"	c
SkNEW	core/SkPostConfig.h	/^    #define SkNEW(/;"	d
SkNEW_ARGS	core/SkPostConfig.h	/^    #define SkNEW_ARGS(/;"	d
SkNEW_ARRAY	core/SkPostConfig.h	/^    #define SkNEW_ARRAY(/;"	d
SkNO_RETURN_HINT	core/SkPostConfig.h	/^            void SkNO_RETURN_HINT() {}$/;"	f	namespace:__anon12
SkNWayCanvas	utils/SkNWayCanvas.h	/^class SkNWayCanvas : public SkCanvas {$/;"	c
SkNWayCanvas_DEFINED	utils/SkNWayCanvas.h	/^#define SkNWayCanvas_DEFINED$/;"	d
SkNativeGLContext	gpu/SkNativeGLContext.h	/^class SkNativeGLContext : public SkGLContext {$/;"	c
SkNativeGLContext_DEFINED	gpu/SkNativeGLContext.h	/^#define SkNativeGLContext_DEFINED$/;"	d
SkNextLog2	core/SkMath.h	/^static inline int SkNextLog2(uint32_t value) {$/;"	f
SkNextPixelRefGenerationID	SkPixelRef.cpp	/^int32_t SkNextPixelRefGenerationID() {$/;"	f
SkNextPow2	core/SkMath.h	/^static inline int SkNextPow2(int value) {$/;"	f
SkNinePatch	utils/SkNinePatch.h	/^class SkNinePatch {$/;"	c
SkNinePatch_DEFINED	utils/SkNinePatch.h	/^#define SkNinePatch_DEFINED$/;"	d
SkNoncopyable	SkTypes.h	/^    SkNoncopyable() {}$/;"	f	class:SkNoncopyable
SkNoncopyable	SkTypes.h	/^class SK_API SkNoncopyable {$/;"	c
SkNoncopyable	core/SkTypes.h	/^    SkNoncopyable() {}$/;"	f	class:SkNoncopyable
SkNoncopyable	core/SkTypes.h	/^class SK_API SkNoncopyable {$/;"	c
SkNullBlitter	core/SkBlitter.h	/^class SkNullBlitter : public SkBlitter {$/;"	c
SkNullGLContext	gpu/SkNullGLContext.h	/^    SkNullGLContext() {};$/;"	f	class:SkNullGLContext
SkNullGLContext	gpu/SkNullGLContext.h	/^class SkNullGLContext : public SkGLContext {$/;"	c
SkNullGLContext_DEFINED	gpu/SkNullGLContext.h	/^#define SkNullGLContext_DEFINED$/;"	d
SkOSFile	core/SkOSFile.h	/^class SkOSFile {$/;"	c
SkOSFile_DEFINED	core/SkOSFile.h	/^#define SkOSFile_DEFINED$/;"	d
SkOSMenu	views/SkOSMenu.h	/^class SkOSMenu {$/;"	c
SkOSMenu_DEFINED	views/SkOSMenu.h	/^#define SkOSMenu_DEFINED$/;"	d
SkOSWindow	views/SkOSWindow_Android.h	/^    SkOSWindow(void*) {}$/;"	f	class:SkOSWindow
SkOSWindow	views/SkOSWindow_Android.h	/^class SkOSWindow : public SkWindow {$/;"	c
SkOSWindow	views/SkOSWindow_Mac.h	/^class SkOSWindow : public SkWindow {$/;"	c
SkOSWindow	views/SkOSWindow_SDL.h	/^class SkOSWindow : public SkWindow {$/;"	c
SkOSWindow	views/SkOSWindow_Unix.h	/^class SkOSWindow : public SkWindow {$/;"	c
SkOSWindow	views/SkOSWindow_Win.h	/^class SkOSWindow : public SkWindow {$/;"	c
SkOSWindow	views/SkOSWindow_iOS.h	/^class SkOSWindow : public SkWindow {$/;"	c
SkOSWindow	views/SkOSWindow_wxwidgets.h	/^class SkOSWindow: public SkWindow$/;"	c
SkOSWindow_Android_DEFINED	views/SkOSWindow_Android.h	/^#define SkOSWindow_Android_DEFINED$/;"	d
SkOSWindow_MacCocoa_DEFINED	views/SkOSWindow_Mac.h	/^#define SkOSWindow_MacCocoa_DEFINED$/;"	d
SkOSWindow_SDL_DEFINED	views/SkOSWindow_SDL.h	/^#define SkOSWindow_SDL_DEFINED$/;"	d
SkOSWindow_Unix_DEFINED	views/SkOSWindow_Unix.h	/^#define SkOSWindow_Unix_DEFINED$/;"	d
SkOSWindow_Win_DEFINED	views/SkOSWindow_Win.h	/^#define SkOSWindow_Win_DEFINED$/;"	d
SkOSWindow_iOS_DEFINED	views/SkOSWindow_iOS.h	/^#define SkOSWindow_iOS_DEFINED$/;"	d
SkOSWindow_wxwidgets_DEFINED	views/SkOSWindow_wxwidgets.h	/^#define SkOSWindow_wxwidgets_DEFINED$/;"	d
SkOffsetImageFilter	effects/SkTestImageFilters.h	/^    SkOffsetImageFilter(SkScalar dx, SkScalar dy) {$/;"	f	class:SkOffsetImageFilter
SkOffsetImageFilter	effects/SkTestImageFilters.h	/^class SkOffsetImageFilter : public SkImageFilter {$/;"	c
SkOrderedReadBuffer	core/SkOrderedReadBuffer.h	/^    SkOrderedReadBuffer() : INHERITED() {}$/;"	f	class:SkOrderedReadBuffer
SkOrderedReadBuffer	core/SkOrderedReadBuffer.h	/^class SkOrderedReadBuffer : public SkFlattenableReadBuffer {$/;"	c
SkOrderedReadBuffer_DEFINED	core/SkOrderedReadBuffer.h	/^#define SkOrderedReadBuffer_DEFINED$/;"	d
SkOrderedWriteBuffer	core/SkOrderedWriteBuffer.h	/^class SkOrderedWriteBuffer : public SkFlattenableWriteBuffer {$/;"	c
SkOrderedWriteBuffer_DEFINED	core/SkOrderedWriteBuffer.h	/^#define SkOrderedWriteBuffer_DEFINED$/;"	d
SkPARAM	SkTypes.h	/^    #define SkPARAM(/;"	d
SkPARAM	core/SkTypes.h	/^    #define SkPARAM(/;"	d
SkPDFArray	pdf/SkPDFTypes.h	/^class SkPDFArray : public SkPDFObject {$/;"	c
SkPDFBool	pdf/SkPDFTypes.h	/^class SkPDFBool : public SkPDFObject {$/;"	c
SkPDFCatalog	pdf/SkPDFCatalog.h	/^class SK_API SkPDFCatalog {$/;"	c
SkPDFCatalog_DEFINED	pdf/SkPDFCatalog.h	/^#define SkPDFCatalog_DEFINED$/;"	d
SkPDFDevice	pdf/SkPDFDevice.h	/^class SkPDFDevice : public SkDevice {$/;"	c
SkPDFDevice_DEFINED	pdf/SkPDFDevice.h	/^#define SkPDFDevice_DEFINED$/;"	d
SkPDFDict	pdf/SkPDFTypes.h	/^class SkPDFDict : public SkPDFObject {$/;"	c
SkPDFDocument	pdf/SkPDFDocument.h	/^class SkPDFDocument {$/;"	c
SkPDFDocument_DEFINED	pdf/SkPDFDocument.h	/^#define SkPDFDocument_DEFINED$/;"	d
SkPDFFont	pdf/SkPDFFont.h	/^class SkPDFFont : public SkPDFDict {$/;"	c
SkPDFFont_DEFINED	pdf/SkPDFFont.h	/^#define SkPDFFont_DEFINED$/;"	d
SkPDFFormXObject	pdf/SkPDFFormXObject.h	/^class SkPDFFormXObject : public SkPDFStream {$/;"	c
SkPDFFormXObject_DEFINED	pdf/SkPDFFormXObject.h	/^#define SkPDFFormXObject_DEFINED$/;"	d
SkPDFGlyphSet	pdf/SkPDFFont.h	/^class SkPDFGlyphSet : public SkNoncopyable {$/;"	c
SkPDFGlyphSetMap	pdf/SkPDFFont.h	/^class SkPDFGlyphSetMap : public SkNoncopyable {$/;"	c
SkPDFGraphicState	pdf/SkPDFGraphicState.h	/^class SkPDFGraphicState : public SkPDFDict {$/;"	c
SkPDFGraphicState_DEFINED	pdf/SkPDFGraphicState.h	/^#define SkPDFGraphicState_DEFINED$/;"	d
SkPDFImage	pdf/SkPDFImage.h	/^class SkPDFImage : public SkPDFStream {$/;"	c
SkPDFImage_DEFINED	pdf/SkPDFImage.h	/^#define SkPDFImage_DEFINED$/;"	d
SkPDFInt	pdf/SkPDFTypes.h	/^class SkPDFInt : public SkPDFObject {$/;"	c
SkPDFName	pdf/SkPDFTypes.h	/^class SkPDFName : public SkPDFObject {$/;"	c
SkPDFObjRef	pdf/SkPDFTypes.h	/^class SkPDFObjRef : public SkPDFObject {$/;"	c
SkPDFObject	pdf/SkPDFTypes.h	/^class SkPDFObject : public SkRefCnt {$/;"	c
SkPDFPage	pdf/SkPDFPage.h	/^class SkPDFPage : public SkPDFDict {$/;"	c
SkPDFPage_DEFINED	pdf/SkPDFPage.h	/^#define SkPDFPage_DEFINED$/;"	d
SkPDFScalar	pdf/SkPDFTypes.h	/^class SkPDFScalar : public SkPDFObject {$/;"	c
SkPDFShader	pdf/SkPDFShader.h	/^class SkPDFShader {$/;"	c
SkPDFShader_DEFINED	pdf/SkPDFShader.h	/^#define SkPDFShader_DEFINED$/;"	d
SkPDFStream	pdf/SkPDFStream.h	/^class SkPDFStream : public SkPDFDict {$/;"	c
SkPDFStream_DEFINED	pdf/SkPDFStream.h	/^#define SkPDFStream_DEFINED$/;"	d
SkPDFString	pdf/SkPDFTypes.h	/^class SkPDFString : public SkPDFObject {$/;"	c
SkPDFTypes_DEFINED	pdf/SkPDFTypes.h	/^#define SkPDFTypes_DEFINED$/;"	d
SkPDFUtils	pdf/SkPDFUtils.h	/^class SkPDFUtils {$/;"	c
SkPDFUtils_DEFINED	pdf/SkPDFUtils.h	/^#define SkPDFUtils_DEFINED$/;"	d
SkPMColor	core/SkColor.h	/^typedef uint32_t SkPMColor;$/;"	t
SkPMColor16	SkColorPriv.h	/^typedef uint16_t SkPMColor16;$/;"	t
SkPMColor16	core/SkColorPriv.h	/^typedef uint16_t SkPMColor16;$/;"	t
SkPMColor16Assert	SkColorPriv.h	/^#define SkPMColor16Assert(/;"	d
SkPMColor16Assert	SkColorPriv.h	/^static inline void SkPMColor16Assert(U16CPU c) {$/;"	f
SkPMColor16Assert	core/SkColorPriv.h	/^#define SkPMColor16Assert(/;"	d
SkPMColor16Assert	core/SkColorPriv.h	/^static inline void SkPMColor16Assert(U16CPU c) {$/;"	f
SkPMColorAssert	SkColorPriv.h	/^    #define SkPMColorAssert(/;"	d
SkPMColorAssert	SkColorPriv.h	/^    static inline void SkPMColorAssert(SkPMColor c) {$/;"	f
SkPMColorAssert	core/SkColorPriv.h	/^    #define SkPMColorAssert(/;"	d
SkPMColorAssert	core/SkColorPriv.h	/^    static inline void SkPMColorAssert(SkPMColor c) {$/;"	f
SkPMColorToExpanded16x5	SkColorPriv.h	/^static inline uint32_t SkPMColorToExpanded16x5(SkPMColor c) {$/;"	f
SkPMColorToExpanded16x5	core/SkColorPriv.h	/^static inline uint32_t SkPMColorToExpanded16x5(SkPMColor c) {$/;"	f
SkPMSrcOver	SkColorPriv.h	/^static inline SkPMColor SkPMSrcOver(SkPMColor src, SkPMColor dst) {$/;"	f
SkPMSrcOver	core/SkColorPriv.h	/^static inline SkPMColor SkPMSrcOver(SkPMColor src, SkPMColor dst) {$/;"	f
SkPack888ToRGB16	SkColorPriv.h	/^static inline U16CPU SkPack888ToRGB16(U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkPack888ToRGB16	core/SkColorPriv.h	/^static inline U16CPU SkPack888ToRGB16(U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkPackARGB32	SkColorPriv.h	/^static inline SkPMColor SkPackARGB32(U8CPU a, U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkPackARGB32	core/SkColorPriv.h	/^static inline SkPMColor SkPackARGB32(U8CPU a, U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkPackARGB32NoCheck	SkColorPriv.h	/^static inline SkPMColor SkPackARGB32NoCheck(U8CPU a, U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkPackARGB32NoCheck	core/SkColorPriv.h	/^static inline SkPMColor SkPackARGB32NoCheck(U8CPU a, U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkPackARGB4444	SkColorPriv.h	/^static inline SkPMColor16 SkPackARGB4444(unsigned a, unsigned r,$/;"	f
SkPackARGB4444	core/SkColorPriv.h	/^static inline SkPMColor16 SkPackARGB4444(unsigned a, unsigned r,$/;"	f
SkPackBits	core/SkPackBits.h	/^class SkPackBits {$/;"	c
SkPackBits_DEFINED	core/SkPackBits.h	/^#define SkPackBits_DEFINED$/;"	d
SkPackRGB16	SkColorPriv.h	/^static inline uint16_t SkPackRGB16(unsigned r, unsigned g, unsigned b) {$/;"	f
SkPackRGB16	core/SkColorPriv.h	/^static inline uint16_t SkPackRGB16(unsigned r, unsigned g, unsigned b) {$/;"	f
SkPacked16ToB32	SkColorPriv.h	/^#define SkPacked16ToB32(/;"	d
SkPacked16ToB32	core/SkColorPriv.h	/^#define SkPacked16ToB32(/;"	d
SkPacked16ToG32	SkColorPriv.h	/^#define SkPacked16ToG32(/;"	d
SkPacked16ToG32	core/SkColorPriv.h	/^#define SkPacked16ToG32(/;"	d
SkPacked16ToR32	SkColorPriv.h	/^#define SkPacked16ToR32(/;"	d
SkPacked16ToR32	core/SkColorPriv.h	/^#define SkPacked16ToR32(/;"	d
SkPacked32ToB16	SkColorPriv.h	/^#define SkPacked32ToB16(/;"	d
SkPacked32ToB16	core/SkColorPriv.h	/^#define SkPacked32ToB16(/;"	d
SkPacked32ToG16	SkColorPriv.h	/^#define SkPacked32ToG16(/;"	d
SkPacked32ToG16	core/SkColorPriv.h	/^#define SkPacked32ToG16(/;"	d
SkPacked32ToR16	SkColorPriv.h	/^#define SkPacked32ToR16(/;"	d
SkPacked32ToR16	core/SkColorPriv.h	/^#define SkPacked32ToR16(/;"	d
SkPacked4444ToA32	SkColorPriv.h	/^#define SkPacked4444ToA32(/;"	d
SkPacked4444ToA32	core/SkColorPriv.h	/^#define SkPacked4444ToA32(/;"	d
SkPacked4444ToB32	SkColorPriv.h	/^#define SkPacked4444ToB32(/;"	d
SkPacked4444ToB32	core/SkColorPriv.h	/^#define SkPacked4444ToB32(/;"	d
SkPacked4444ToG32	SkColorPriv.h	/^#define SkPacked4444ToG32(/;"	d
SkPacked4444ToG32	core/SkColorPriv.h	/^#define SkPacked4444ToG32(/;"	d
SkPacked4444ToR32	SkColorPriv.h	/^#define SkPacked4444ToR32(/;"	d
SkPacked4444ToR32	core/SkColorPriv.h	/^#define SkPacked4444ToR32(/;"	d
SkPageFlipper	images/SkPageFlipper.h	/^class SkPageFlipper {$/;"	c
SkPageFlipper_DEFINED	images/SkPageFlipper.h	/^#define SkPageFlipper_DEFINED$/;"	d
SkPaint	core/SkPaint.h	/^class SK_API SkPaint {$/;"	c
SkPaintFlagsDrawFilter	effects/SkPaintFlagsDrawFilter.h	/^class SkPaintFlagsDrawFilter : public SkDrawFilter {$/;"	c
SkPaintFlagsDrawFilter_DEFINED	effects/SkPaintFlagsDrawFilter.h	/^#define SkPaintFlagsDrawFilter_DEFINED$/;"	d
SkPaintShape	effects/SkRectShape.h	/^class SkPaintShape : public SkShape {$/;"	c
SkPaint_DEFINED	core/SkPaint.h	/^#define SkPaint_DEFINED$/;"	d
SkPairPathEffect	core/SkPathEffect.h	/^class SkPairPathEffect : public SkPathEffect {$/;"	c
SkParse	utils/SkParse.h	/^class SkParse {$/;"	c
SkParsePaint_DEFINED	utils/SkParsePaint.h	/^#define SkParsePaint_DEFINED$/;"	d
SkParsePath	utils/SkParsePath.h	/^class SkParsePath {$/;"	c
SkParsePath_DEFINED	utils/SkParsePath.h	/^#define SkParsePath_DEFINED$/;"	d
SkParse_DEFINED	utils/SkParse.h	/^#define SkParse_DEFINED$/;"	d
SkPatch3D	utils/SkCamera.h	/^class SkPatch3D {$/;"	c
SkPath	core/SkPath.h	/^class SK_API SkPath {$/;"	c
SkPath1DPathEffect	effects/Sk1DPathEffect.h	/^class SkPath1DPathEffect : public Sk1DPathEffect {$/;"	c
SkPath2DPathEffect	effects/Sk2DPathEffect.h	/^class SkPath2DPathEffect : public Sk2DPathEffect {$/;"	c
SkPathEffect	core/SkPathEffect.h	/^    SkPathEffect() {}$/;"	f	class:SkPathEffect
SkPathEffect	core/SkPathEffect.h	/^    SkPathEffect(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkPathEffect
SkPathEffect	core/SkPathEffect.h	/^class SK_API SkPathEffect : public SkFlattenable {$/;"	c
SkPathEffect_DEFINED	core/SkPathEffect.h	/^#define SkPathEffect_DEFINED$/;"	d
SkPathMeasure	core/SkPathMeasure.h	/^class SkPathMeasure : SkNoncopyable {$/;"	c
SkPathMeasure_DEFINED	core/SkPathMeasure.h	/^#define SkPathMeasure_DEFINED$/;"	d
SkPath_DEFINED	core/SkPath.h	/^#define SkPath_DEFINED$/;"	d
SkPersp	core/SkMatrix.h	/^    typedef SkFract SkPersp;$/;"	t
SkPersp	core/SkMatrix.h	/^    typedef SkScalar SkPersp;$/;"	t
SkPerspIter	core/SkPerspIter.h	/^class SkPerspIter {$/;"	c
SkPerspIter_DEFINED	core/SkPerspIter.h	/^#define SkPerspIter_DEFINED$/;"	d
SkPerspToScalar	core/SkMatrix.h	/^    #define SkPerspToScalar(/;"	d
SkPicture	core/SkPicture.h	/^class SK_API SkPicture : public SkRefCnt {$/;"	c
SkPicture_DEFINED	core/SkPicture.h	/^#define SkPicture_DEFINED$/;"	d
SkPin32	SkTypes.h	/^static inline int32_t SkPin32(int32_t value, int32_t min, int32_t max) {$/;"	f
SkPin32	core/SkTypes.h	/^static inline int32_t SkPin32(int32_t value, int32_t min, int32_t max) {$/;"	f
SkPixel16ToColor	SkColorPriv.h	/^static inline SkColor SkPixel16ToColor(U16CPU src) {$/;"	f
SkPixel16ToColor	core/SkColorPriv.h	/^static inline SkColor SkPixel16ToColor(U16CPU src) {$/;"	f
SkPixel16ToPixel32	SkColorPriv.h	/^static inline SkPMColor SkPixel16ToPixel32(U16CPU src) {$/;"	f
SkPixel16ToPixel32	core/SkColorPriv.h	/^static inline SkPMColor SkPixel16ToPixel32(U16CPU src) {$/;"	f
SkPixel32ToPixel16	SkColorPriv.h	/^static inline U16CPU SkPixel32ToPixel16(SkPMColor c) {$/;"	f
SkPixel32ToPixel16	core/SkColorPriv.h	/^static inline U16CPU SkPixel32ToPixel16(SkPMColor c) {$/;"	f
SkPixel32ToPixel16_ToU16	SkColorPriv.h	/^#define SkPixel32ToPixel16_ToU16(/;"	d
SkPixel32ToPixel16_ToU16	core/SkColorPriv.h	/^#define SkPixel32ToPixel16_ToU16(/;"	d
SkPixel32ToPixel4444	SkColorPriv.h	/^static inline SkPMColor16 SkPixel32ToPixel4444(SkPMColor c) {$/;"	f
SkPixel32ToPixel4444	core/SkColorPriv.h	/^static inline SkPMColor16 SkPixel32ToPixel4444(SkPMColor c) {$/;"	f
SkPixel4444ToPixel32	SkColorPriv.h	/^static inline SkPMColor SkPixel4444ToPixel32(U16CPU c) {$/;"	f
SkPixel4444ToPixel32	core/SkColorPriv.h	/^static inline SkPMColor SkPixel4444ToPixel32(U16CPU c) {$/;"	f
SkPixelRef	SkPixelRef.cpp	/^SkPixelRef::SkPixelRef(SkBaseMutex* mutex) : fPreLocked(false) {$/;"	f	class:SkPixelRef
SkPixelRef	SkPixelRef.cpp	/^SkPixelRef::SkPixelRef(SkFlattenableReadBuffer& buffer, SkBaseMutex* mutex)$/;"	f	class:SkPixelRef
SkPixelRef	core/SkPixelRef.h	/^class SK_API SkPixelRef : public SkFlattenable {$/;"	c
SkPixelRef_DEFINED	core/SkPixelRef.h	/^#define SkPixelRef_DEFINED$/;"	d
SkPixelXorXfermode	effects/SkPixelXorXfermode.h	/^    SkPixelXorXfermode(SkColor opColor) : fOpColor(opColor) {}$/;"	f	class:SkPixelXorXfermode
SkPixelXorXfermode	effects/SkPixelXorXfermode.h	/^class SkPixelXorXfermode : public SkXfermode {$/;"	c
SkPixelXorXfermode_DEFINED	effects/SkPixelXorXfermode.h	/^#define SkPixelXorXfermode_DEFINED$/;"	d
SkPoint	core/SkPoint.h	/^struct SK_API SkPoint {$/;"	s
SkPoint3D	utils/SkCamera.h	/^struct SkPoint3D {$/;"	s
SkPoint_DEFINED	core/SkPoint.h	/^#define SkPoint_DEFINED$/;"	d
SkPorterDuff	effects/SkPorterDuff.h	/^class SkPorterDuff {$/;"	c
SkPorterDuff_DEFINED	effects/SkPorterDuff.h	/^#define SkPorterDuff_DEFINED$/;"	d
SkPostConfig_DEFINED	core/SkPostConfig.h	/^#define SkPostConfig_DEFINED$/;"	d
SkPreConfig_DEFINED	core/SkPreConfig.h	/^#define SkPreConfig_DEFINED$/;"	d
SkPremultiplyARGBInline	SkColorPriv.h	/^SkPMColor SkPremultiplyARGBInline(U8CPU a, U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkPremultiplyARGBInline	core/SkColorPriv.h	/^SkPMColor SkPremultiplyARGBInline(U8CPU a, U8CPU r, U8CPU g, U8CPU b) {$/;"	f
SkProcXfermode	core/SkXfermode.h	/^    SkProcXfermode(SkXfermodeProc proc) : fProc(proc) {}$/;"	f	class:SkProcXfermode
SkProcXfermode	core/SkXfermode.h	/^class SkProcXfermode : public SkXfermode {$/;"	c
SkProgressBarView	views/SkProgressBarView.h	/^class SkProgressBarView : public SkWidgetView {$/;"	c
SkProgressBarView_DEFINED	views/SkProgressBarView.h	/^#define SkProgressBarView_DEFINED$/;"	d
SkProgressView	views/SkWidget.h	/^class SkProgressView : public SkView {$/;"	c
SkProxyCanvas	utils/SkProxyCanvas.h	/^    SkProxyCanvas() : fProxy(NULL) {}$/;"	f	class:SkProxyCanvas
SkProxyCanvas	utils/SkProxyCanvas.h	/^class SkProxyCanvas : public SkCanvas {$/;"	c
SkProxyCanvas_DEFINED	utils/SkProxyCanvas.h	/^#define SkProxyCanvas_DEFINED$/;"	d
SkPtrSet	core/SkPtrRecorder.h	/^class SkPtrSet : public SkRefCnt {$/;"	c
SkPtrSet_DEFINED	core/SkPtrRecorder.h	/^#define SkPtrSet_DEFINED$/;"	d
SkPushButtonView	views/SkWidget.h	/^class SkPushButtonView : public SkHasLabelView {$/;"	c
SkPushButtonWidget	views/SkWidget.h	/^    SkPushButtonWidget(uint32_t flags = 0) : SkButtonWidget(flags) {}$/;"	f	class:SkPushButtonWidget
SkPushButtonWidget	views/SkWidget.h	/^class SkPushButtonWidget : public SkButtonWidget {$/;"	c
SkR16Assert	SkColorPriv.h	/^#define SkR16Assert(/;"	d
SkR16Assert	core/SkColorPriv.h	/^#define SkR16Assert(/;"	d
SkR16ToR32	SkColorPriv.h	/^static inline unsigned SkR16ToR32(unsigned r) {$/;"	f
SkR16ToR32	core/SkColorPriv.h	/^static inline unsigned SkR16ToR32(unsigned r) {$/;"	f
SkR32Assert	SkColorPriv.h	/^#define SkR32Assert(/;"	d
SkR32Assert	core/SkColorPriv.h	/^#define SkR32Assert(/;"	d
SkR32To4444	SkColorPriv.h	/^#define SkR32To4444(/;"	d
SkR32To4444	core/SkColorPriv.h	/^#define SkR32To4444(/;"	d
SkR32ToR16	SkColorPriv.h	/^    #define SkR32ToR16(/;"	d
SkR32ToR16	SkColorPriv.h	/^    static inline unsigned SkR32ToR16(unsigned r) {$/;"	f
SkR32ToR16	core/SkColorPriv.h	/^    #define SkR32ToR16(/;"	d
SkR32ToR16	core/SkColorPriv.h	/^    static inline unsigned SkR32ToR16(unsigned r) {$/;"	f
SkR32ToR16_MACRO	SkColorPriv.h	/^#define SkR32ToR16_MACRO(/;"	d
SkR32ToR16_MACRO	core/SkColorPriv.h	/^#define SkR32ToR16_MACRO(/;"	d
SkR4444ToR32	SkColorPriv.h	/^#define SkR4444ToR32(/;"	d
SkR4444ToR32	core/SkColorPriv.h	/^#define SkR4444ToR32(/;"	d
SkR4444ToR565	SkColorPriv.h	/^static inline unsigned SkR4444ToR565(unsigned r) {$/;"	f
SkR4444ToR565	core/SkColorPriv.h	/^static inline unsigned SkR4444ToR565(unsigned r) {$/;"	f
SkRBuffer	core/SkBuffer.h	/^    SkRBuffer() : fData(0), fPos(0), fStop(0) {}$/;"	f	class:SkRBuffer
SkRBuffer	core/SkBuffer.h	/^    SkRBuffer(const void* data) {$/;"	f	class:SkRBuffer
SkRBuffer	core/SkBuffer.h	/^    SkRBuffer(const void* data, size_t size) {$/;"	f	class:SkRBuffer
SkRBuffer	core/SkBuffer.h	/^class SkRBuffer : SkNoncopyable {$/;"	c
SkRGB16Add	SkColorPriv.h	/^    #define SkRGB16Add(/;"	d
SkRGB16Add	SkColorPriv.h	/^    static inline U16CPU SkRGB16Add(U16CPU a, U16CPU b) {$/;"	f
SkRGB16Add	core/SkColorPriv.h	/^    #define SkRGB16Add(/;"	d
SkRGB16Add	core/SkColorPriv.h	/^    static inline U16CPU SkRGB16Add(U16CPU a, U16CPU b) {$/;"	f
SkROLockPixelsPixelRef	gpu/SkGrTexturePixelRef.h	/^class SK_API SkROLockPixelsPixelRef : public SkPixelRef {$/;"	c
SkRandom	core/SkRandom.h	/^    SkRandom() : fSeed(0) {}$/;"	f	class:SkRandom
SkRandom	core/SkRandom.h	/^    SkRandom(uint32_t seed) : fSeed(seed) {}$/;"	f	class:SkRandom
SkRandom	core/SkRandom.h	/^class SkRandom {$/;"	c
SkRandom_DEFINED	core/SkRandom.h	/^#define SkRandom_DEFINED$/;"	d
SkRasterizer	core/SkRasterizer.h	/^    SkRasterizer() {}$/;"	f	class:SkRasterizer
SkRasterizer	core/SkRasterizer.h	/^    SkRasterizer(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkRasterizer
SkRasterizer	core/SkRasterizer.h	/^class SkRasterizer : public SkFlattenable {$/;"	c
SkRasterizer_DEFINED	core/SkRasterizer.h	/^#define SkRasterizer_DEFINED$/;"	d
SkReader32	core/SkReader32.h	/^    SkReader32() : fCurr(NULL), fStop(NULL), fBase(NULL) {}$/;"	f	class:SkReader32
SkReader32	core/SkReader32.h	/^    SkReader32(const void* data, size_t size)  {$/;"	f	class:SkReader32
SkReader32	core/SkReader32.h	/^class SkReader32 : SkNoncopyable {$/;"	c
SkReader32_DEFINED	core/SkReader32.h	/^#define SkReader32_DEFINED$/;"	d
SkRect	SkRect.h	/^struct SK_API SkRect {$/;"	s
SkRect	core/SkRect.h	/^struct SK_API SkRect {$/;"	s
SkRectClipBlitter	core/SkBlitter.h	/^class SkRectClipBlitter : public SkBlitter {$/;"	c
SkRectCompareType	core/SkScalarCompare.h	/^    typedef SkIRect SkRectCompareType;$/;"	t
SkRectCompareType	core/SkScalarCompare.h	/^    typedef SkRect SkRectCompareType;$/;"	t
SkRectShape	effects/SkRectShape.h	/^class SkRectShape : public SkPaintShape {$/;"	c
SkRectShape_DEFINED	effects/SkRectShape.h	/^#define SkRectShape_DEFINED$/;"	d
SkRect_DEFINED	SkRect.h	/^#define SkRect_DEFINED$/;"	d
SkRect_DEFINED	core/SkRect.h	/^#define SkRect_DEFINED$/;"	d
SkRefCnt	core/SkRefCnt.h	/^    SkRefCnt() : fRefCnt(1) {}$/;"	f	class:SkRefCnt
SkRefCnt	core/SkRefCnt.h	/^class SK_API SkRefCnt : SkNoncopyable {$/;"	c
SkRefCntSet	core/SkFlattenable.h	/^class SkRefCntSet : public SkTPtrSet<SkRefCnt*> {$/;"	c
SkRefCnt_DEFINED	core/SkRefCnt.h	/^#define SkRefCnt_DEFINED$/;"	d
SkRefCnt_SafeAssign	core/SkRefCnt.h	/^#define SkRefCnt_SafeAssign(/;"	d
SkRefDict	core/SkRefDict.h	/^class SK_API SkRefDict : SkNoncopyable {$/;"	c
SkRefDict_DEFINED	core/SkRefDict.h	/^#define SkRefDict_DEFINED$/;"	d
SkRefPtr	core/SkRefCnt.h	/^    SkRefPtr() : fObj(NULL) {}$/;"	f	class:SkRefPtr
SkRefPtr	core/SkRefCnt.h	/^    SkRefPtr(T* obj) : fObj(obj) { SkSafeRef(fObj); }$/;"	f	class:SkRefPtr
SkRefPtr	core/SkRefCnt.h	/^    SkRefPtr(const SkRefPtr& o) : fObj(o.fObj) { SkSafeRef(fObj); }$/;"	f	class:SkRefPtr
SkRefPtr	core/SkRefCnt.h	/^template <typename T> class SkRefPtr {$/;"	c
SkRegion	core/SkRegion.h	/^class SK_API SkRegion {$/;"	c
SkRegion_DEFINED	core/SkRegion.h	/^#define SkRegion_DEFINED$/;"	d
SkRegion_gEmptyRunHeadPtr	core/SkRegion.h	/^#define SkRegion_gEmptyRunHeadPtr /;"	d
SkRegion_gRectRunHeadPtr	core/SkRegion.h	/^#define SkRegion_gRectRunHeadPtr /;"	d
SkReplicateNibble	SkColorPriv.h	/^static inline U8CPU SkReplicateNibble(unsigned nib) {$/;"	f
SkReplicateNibble	core/SkColorPriv.h	/^static inline U8CPU SkReplicateNibble(unsigned nib) {$/;"	f
SkRgnClipBlitter	core/SkBlitter.h	/^class SkRgnClipBlitter : public SkBlitter {$/;"	c
SkRotationDirection	core/SkGeometry.h	/^enum SkRotationDirection {$/;"	g
SkSTArray	core/SkTArray.h	/^    SkSTArray() : INHERITED(&fStorage) {$/;"	f	class:SkSTArray
SkSTArray	core/SkTArray.h	/^    SkSTArray(const SkSTArray& array)$/;"	f	class:SkSTArray
SkSTArray	core/SkTArray.h	/^    SkSTArray(const T* array, int count)$/;"	f	class:SkSTArray
SkSTArray	core/SkTArray.h	/^    explicit SkSTArray(const INHERITED& array)$/;"	f	class:SkSTArray
SkSTArray	core/SkTArray.h	/^class SkSTArray : public SkTArray<T, DATA_TYPE> {$/;"	c
SkSVGAttribute	svg/SkSVGAttribute.h	/^struct SkSVGAttribute {$/;"	s
SkSVGAttribute_DEFINED	svg/SkSVGAttribute.h	/^#define SkSVGAttribute_DEFINED$/;"	d
SkSVGBase	svg/SkSVGBase.h	/^class SkSVGBase {$/;"	c
SkSVGBase_DEFINED	svg/SkSVGBase.h	/^#define SkSVGBase_DEFINED$/;"	d
SkSVGPaint	svg/SkSVGPaintState.h	/^class SkSVGPaint : public SkSVGBase {$/;"	c
SkSVGPaintState_DEFINED	svg/SkSVGPaintState.h	/^#define SkSVGPaintState_DEFINED$/;"	d
SkSVGParser	svg/SkSVGParser.h	/^class SkSVGParser : public SkXMLParser {$/;"	c
SkSVGParser_DEFINED	svg/SkSVGParser.h	/^#define SkSVGParser_DEFINED$/;"	d
SkSVGType_Circle	svg/SkSVGTypes.h	/^    SkSVGType_Circle,$/;"	e	enum:SkSVGTypes
SkSVGType_ClipPath	svg/SkSVGTypes.h	/^    SkSVGType_ClipPath,$/;"	e	enum:SkSVGTypes
SkSVGType_Defs	svg/SkSVGTypes.h	/^    SkSVGType_Defs,$/;"	e	enum:SkSVGTypes
SkSVGType_Ellipse	svg/SkSVGTypes.h	/^    SkSVGType_Ellipse,$/;"	e	enum:SkSVGTypes
SkSVGType_FeColorMatrix	svg/SkSVGTypes.h	/^    SkSVGType_FeColorMatrix,$/;"	e	enum:SkSVGTypes
SkSVGType_Filter	svg/SkSVGTypes.h	/^    SkSVGType_Filter,$/;"	e	enum:SkSVGTypes
SkSVGType_G	svg/SkSVGTypes.h	/^    SkSVGType_G,$/;"	e	enum:SkSVGTypes
SkSVGType_Image	svg/SkSVGTypes.h	/^    SkSVGType_Image,$/;"	e	enum:SkSVGTypes
SkSVGType_Line	svg/SkSVGTypes.h	/^    SkSVGType_Line,$/;"	e	enum:SkSVGTypes
SkSVGType_LinearGradient	svg/SkSVGTypes.h	/^    SkSVGType_LinearGradient,$/;"	e	enum:SkSVGTypes
SkSVGType_Mask	svg/SkSVGTypes.h	/^    SkSVGType_Mask,$/;"	e	enum:SkSVGTypes
SkSVGType_Metadata	svg/SkSVGTypes.h	/^    SkSVGType_Metadata,$/;"	e	enum:SkSVGTypes
SkSVGType_Path	svg/SkSVGTypes.h	/^    SkSVGType_Path,$/;"	e	enum:SkSVGTypes
SkSVGType_Polygon	svg/SkSVGTypes.h	/^    SkSVGType_Polygon,$/;"	e	enum:SkSVGTypes
SkSVGType_Polyline	svg/SkSVGTypes.h	/^    SkSVGType_Polyline,$/;"	e	enum:SkSVGTypes
SkSVGType_RadialGradient	svg/SkSVGTypes.h	/^    SkSVGType_RadialGradient,$/;"	e	enum:SkSVGTypes
SkSVGType_Rect	svg/SkSVGTypes.h	/^    SkSVGType_Rect,$/;"	e	enum:SkSVGTypes
SkSVGType_SVG	svg/SkSVGTypes.h	/^    SkSVGType_SVG,$/;"	e	enum:SkSVGTypes
SkSVGType_Stop	svg/SkSVGTypes.h	/^    SkSVGType_Stop,$/;"	e	enum:SkSVGTypes
SkSVGType_Symbol	svg/SkSVGTypes.h	/^    SkSVGType_Symbol,$/;"	e	enum:SkSVGTypes
SkSVGType_Text	svg/SkSVGTypes.h	/^    SkSVGType_Text,$/;"	e	enum:SkSVGTypes
SkSVGType_Tspan	svg/SkSVGTypes.h	/^    SkSVGType_Tspan,$/;"	e	enum:SkSVGTypes
SkSVGType_Unknown	svg/SkSVGTypes.h	/^	SkSVGType_Unknown,$/;"	e	enum:SkSVGTypes
SkSVGType_Use	svg/SkSVGTypes.h	/^    SkSVGType_Use$/;"	e	enum:SkSVGTypes
SkSVGTypes	svg/SkSVGTypes.h	/^enum SkSVGTypes {$/;"	g
SkSVGTypes_DEFINED	svg/SkSVGTypes.h	/^#define SkSVGTypes_DEFINED$/;"	d
SkSafeRef	core/SkRefCnt.h	/^template <typename T> static inline void SkSafeRef(T* obj) {$/;"	f
SkSafeUnref	core/SkRefCnt.h	/^template <typename T> static inline void SkSafeUnref(T* obj) {$/;"	f
SkScalar	core/SkScalar.h	/^    typedef SkFixed SkScalar;$/;"	t
SkScalar	core/SkScalar.h	/^    typedef float   SkScalar;$/;"	t
SkScalarACos	core/SkScalar.h	/^    #define SkScalarACos(/;"	d
SkScalarASin	core/SkScalar.h	/^    #define SkScalarASin(/;"	d
SkScalarATan2	core/SkScalar.h	/^    #define SkScalarATan2(/;"	d
SkScalarAbs	core/SkScalar.h	/^    #define SkScalarAbs(/;"	d
SkScalarAs2sCompliment	core/SkFloatBits.h	/^    #define SkScalarAs2sCompliment(/;"	d
SkScalarAve	core/SkScalar.h	/^    #define SkScalarAve(/;"	d
SkScalarCeil	core/SkScalar.h	/^#define SkScalarCeil(/;"	d
SkScalarCeilToInt	core/SkScalar.h	/^    #define SkScalarCeilToInt(/;"	d
SkScalarCeilToScalar	core/SkScalar.h	/^    #define SkScalarCeilToScalar(/;"	d
SkScalarClampMax	core/SkScalar.h	/^    #define SkScalarClampMax(/;"	d
SkScalarClampMax	core/SkScalar.h	/^    inline SkScalar SkScalarClampMax(SkScalar x, SkScalar max) {$/;"	f
SkScalarCompareType	core/SkScalarCompare.h	/^    typedef SkScalar SkScalarCompareType;$/;"	t
SkScalarCompareType	core/SkScalarCompare.h	/^    typedef int32_t SkScalarCompareType;$/;"	t
SkScalarCompare_DEFINED	core/SkScalarCompare.h	/^#define SkScalarCompare_DEFINED$/;"	d
SkScalarCopySign	core/SkScalar.h	/^    #define SkScalarCopySign(/;"	d
SkScalarCos	core/SkScalar.h	/^    #define SkScalarCos(/;"	d
SkScalarDiv	core/SkScalar.h	/^    #define SkScalarDiv(/;"	d
SkScalarExp	core/SkScalar.h	/^    #define SkScalarExp(/;"	d
SkScalarFastInvert	core/SkScalar.h	/^    #define SkScalarFastInvert(/;"	d
SkScalarFloor	core/SkScalar.h	/^#define SkScalarFloor(/;"	d
SkScalarFloorToInt	core/SkScalar.h	/^    #define SkScalarFloorToInt(/;"	d
SkScalarFloorToScalar	core/SkScalar.h	/^    #define SkScalarFloorToScalar(/;"	d
SkScalarFraction	core/SkScalar.h	/^    #define SkScalarFraction(/;"	d
SkScalarHalf	core/SkScalar.h	/^    #define SkScalarHalf(/;"	d
SkScalarInterp	core/SkScalar.h	/^static inline SkScalar SkScalarInterp(SkScalar A, SkScalar B, SkScalar t) {$/;"	f
SkScalarInvert	core/SkScalar.h	/^    #define SkScalarInvert(/;"	d
SkScalarIsFinite	core/SkScalar.h	/^    #define SkScalarIsFinite(/;"	d
SkScalarIsFinite	core/SkScalar.h	/^    static inline bool SkScalarIsFinite(float x) {$/;"	f
SkScalarIsInt	core/SkScalar.h	/^    static inline bool SkScalarIsInt(SkFixed x) {$/;"	f
SkScalarIsInt	core/SkScalar.h	/^    static inline bool SkScalarIsInt(SkScalar x) {$/;"	f
SkScalarIsNaN	core/SkScalar.h	/^    #define SkScalarIsNaN(/;"	d
SkScalarIsNaN	core/SkScalar.h	/^    static inline bool SkScalarIsNaN(float x) { return x != x; }$/;"	f
SkScalarLog	core/SkScalar.h	/^    #define SkScalarLog(/;"	d
SkScalarMean	core/SkScalar.h	/^    #define SkScalarMean(/;"	d
SkScalarMod	core/SkScalar.h	/^    #define SkScalarMod(/;"	d
SkScalarMul	core/SkScalar.h	/^    #define SkScalarMul(/;"	d
SkScalarMulAdd	core/SkScalar.h	/^    #define SkScalarMulAdd(/;"	d
SkScalarMulCeil	core/SkScalar.h	/^    #define SkScalarMulCeil(/;"	d
SkScalarMulDiv	core/SkScalar.h	/^    #define SkScalarMulDiv(/;"	d
SkScalarMulFloor	core/SkScalar.h	/^    #define SkScalarMulFloor(/;"	d
SkScalarMulRound	core/SkScalar.h	/^    #define SkScalarMulRound(/;"	d
SkScalarNearlyEqual	core/SkScalar.h	/^static inline bool SkScalarNearlyEqual(SkScalar x, SkScalar y,$/;"	f
SkScalarNearlyZero	core/SkScalar.h	/^static inline bool SkScalarNearlyZero(SkScalar x,$/;"	f
SkScalarPin	core/SkScalar.h	/^    #define SkScalarPin(/;"	d
SkScalarPin	core/SkScalar.h	/^    inline SkScalar SkScalarPin(SkScalar x, SkScalar min, SkScalar max) {$/;"	f
SkScalarRound	core/SkScalar.h	/^#define SkScalarRound(/;"	d
SkScalarRoundToInt	core/SkScalar.h	/^    #define SkScalarRoundToInt(/;"	d
SkScalarRoundToScalar	core/SkScalar.h	/^    #define SkScalarRoundToScalar(/;"	d
SkScalarSignAsInt	core/SkScalar.h	/^static inline int SkScalarSignAsInt(SkScalar x) {$/;"	f
SkScalarSignAsScalar	core/SkScalar.h	/^static inline SkScalar SkScalarSignAsScalar(SkScalar x) {$/;"	f
SkScalarSin	core/SkScalar.h	/^    #define SkScalarSin(/;"	d
SkScalarSinCos	core/SkScalar.h	/^    #define SkScalarSinCos(/;"	d
SkScalarSqrt	core/SkScalar.h	/^    #define SkScalarSqrt(/;"	d
SkScalarSquare	core/SkScalar.h	/^    #define SkScalarSquare(/;"	d
SkScalarSquare	core/SkScalar.h	/^    inline SkScalar SkScalarSquare(SkScalar x) { return x * x; }$/;"	f
SkScalarTan	core/SkScalar.h	/^    #define SkScalarTan(/;"	d
SkScalarToCompareType	core/SkScalarCompare.h	/^    #define SkScalarToCompareType(/;"	d
SkScalarToDouble	core/SkScalar.h	/^        #define SkScalarToDouble(/;"	d
SkScalarToDouble	core/SkScalar.h	/^    #define SkScalarToDouble(/;"	d
SkScalarToFDot6	core/SkFDot6.h	/^    #define SkScalarToFDot6(/;"	d
SkScalarToFixed	core/SkScalar.h	/^    #define SkScalarToFixed(/;"	d
SkScalarToFixed48	core/SkFixed.h	/^    #define SkScalarToFixed48(/;"	d
SkScalarToFloat	core/SkScalar.h	/^        #define SkScalarToFloat(/;"	d
SkScalarToFloat	core/SkScalar.h	/^    #define SkScalarToFloat(/;"	d
SkScalarToMScalar	utils/SkMatrix44.h	/^        #define SkScalarToMScalar /;"	d
SkScalarToMScalar	utils/SkMatrix44.h	/^    #define SkScalarToMScalar /;"	d
SkScalarToPersp	core/SkMatrix.h	/^    #define SkScalarToPersp(/;"	d
SkScalar_DEFINED	core/SkScalar.h	/^#define SkScalar_DEFINED$/;"	d
SkScalerContext	core/SkScalerContext.h	/^class SkScalerContext {$/;"	c
SkScalerContext_DEFINED	core/SkScalerContext.h	/^#define SkScalerContext_DEFINED$/;"	d
SkScan	core/SkScan.h	/^class SkScan {$/;"	c
SkScan_DEFINED	core/SkScan.h	/^#define SkScan_DEFINED$/;"	d
SkScrollBarView	views/SkScrollBarView.h	/^class SkScrollBarView : public SkWidgetView {$/;"	c
SkScrollBarView_DEFINED	views/SkScrollBarView.h	/^#define SkScrollBarView_DEFINED$/;"	d
SkSetClearMask	SkTypes.h	/^static inline uint32_t SkSetClearMask(uint32_t bits, bool cond,$/;"	f
SkSetClearMask	core/SkTypes.h	/^static inline uint32_t SkSetClearMask(uint32_t bits, bool cond,$/;"	f
SkSetClearShift	SkTypes.h	/^static inline uint32_t SkSetClearShift(uint32_t bits, bool cond,$/;"	f
SkSetClearShift	core/SkTypes.h	/^static inline uint32_t SkSetClearShift(uint32_t bits, bool cond,$/;"	f
SkSetFourByteTag	SkTypes.h	/^#define SkSetFourByteTag(/;"	d
SkSetFourByteTag	core/SkTypes.h	/^#define SkSetFourByteTag(/;"	d
SkSfntTable_head	utils/SkSfntUtils.h	/^struct SkSfntTable_head {$/;"	s
SkSfntTable_maxp	utils/SkSfntUtils.h	/^struct SkSfntTable_maxp {$/;"	s
SkSfntUtils	utils/SkSfntUtils.h	/^class SkSfntUtils {$/;"	c
SkSfntUtils_DEFINED	utils/SkSfntUtils.h	/^#define SkSfntUtils_DEFINED$/;"	d
SkShader	core/SkShader.h	/^class SK_API SkShader : public SkFlattenable {$/;"	c
SkShader_DEFINED	core/SkShader.h	/^#define SkShader_DEFINED$/;"	d
SkShape	core/SkShape.h	/^class SkShape : public SkFlattenable {$/;"	c
SkShape_DEFINED	core/SkShape.h	/^#define SkShape_DEFINED$/;"	d
SkShouldDitherXY	SkColorPriv.h	/^#define SkShouldDitherXY(/;"	d
SkShouldDitherXY	core/SkColorPriv.h	/^#define SkShouldDitherXY(/;"	d
SkSign32	SkTypes.h	/^static inline int32_t SkSign32(int32_t a) {$/;"	f
SkSign32	core/SkTypes.h	/^static inline int32_t SkSign32(int32_t a) {$/;"	f
SkSignBitTo2sCompliment	core/SkFloatBits.h	/^static inline int32_t SkSignBitTo2sCompliment(int32_t x) {$/;"	f
SkSize	core/SkSize.h	/^struct SkSize : public SkTSize<SkScalar> {$/;"	s
SkSize_DEFINED	core/SkSize.h	/^#define SkSize_DEFINED$/;"	d
SkSkTScopedPtr_DEFINED	utils/win/SkTScopedComPtr.h	/^#define SkSkTScopedPtr_DEFINED$/;"	d
SkSliderView	views/SkWidget.h	/^class SkSliderView : public SkWidgetView {$/;"	c
SkSqrt32	core/SkMath.h	/^#define SkSqrt32(/;"	d
SkSrcOver32To16	SkColorPriv.h	/^static inline U16CPU SkSrcOver32To16(SkPMColor src, uint16_t dst) {$/;"	f
SkSrcOver32To16	core/SkColorPriv.h	/^static inline U16CPU SkSrcOver32To16(SkPMColor src, uint16_t dst) {$/;"	f
SkSrcOver4444To16	SkColorPriv.h	/^static inline uint16_t SkSrcOver4444To16(SkPMColor16 s, uint16_t d) {$/;"	f
SkSrcOver4444To16	core/SkColorPriv.h	/^static inline uint16_t SkSrcOver4444To16(SkPMColor16 s, uint16_t d) {$/;"	f
SkStackViewLayout	views/SkStackViewLayout.h	/^class SkStackViewLayout : public SkView::Layout {$/;"	c
SkStackViewLayout_DEFINED	views/SkStackViewLayout.h	/^#define SkStackViewLayout_DEFINED$/;"	d
SkStaticTextView	views/SkWidget.h	/^class SkStaticTextView : public SkView {$/;"	c
SkStaticTextView	views/SkWidgetViews.h	/^class SkStaticTextView : public SkView {$/;"	c
SkStrAppendS32_MaxSize	core/SkString.h	/^#define SkStrAppendS32_MaxSize /;"	d
SkStrAppendS64_MaxSize	core/SkString.h	/^#define SkStrAppendS64_MaxSize /;"	d
SkStrAppendScalar	core/SkString.h	/^    #define SkStrAppendScalar /;"	d
SkStrAppendScalar_MaxSize	core/SkString.h	/^#define SkStrAppendScalar_MaxSize /;"	d
SkStrContains	core/SkString.h	/^static bool SkStrContains(const char string[], const char substring[]) {$/;"	f
SkStrStartsWith	core/SkString.h	/^static bool SkStrStartsWith(const char string[], const char prefix[]) {$/;"	f
SkStream	core/SkStream.h	/^class SK_API SkStream : public SkRefCnt {$/;"	c
SkStream_DEFINED	core/SkStream.h	/^#define SkStream_DEFINED$/;"	d
SkStream_Win_DEFINED	ports/SkStream_Win.h	/^#define SkStream_Win_DEFINED$/;"	d
SkString	core/SkString.h	/^class SkString {$/;"	c
SkString_DEFINED	core/SkString.h	/^#define SkString_DEFINED$/;"	d
SkStroke	core/SkStroke.h	/^class SkStroke {$/;"	c
SkStroke_DEFINED	core/SkStroke.h	/^#define SkStroke_DEFINED$/;"	d
SkSumPathEffect	core/SkPathEffect.h	/^    SkSumPathEffect(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkSumPathEffect
SkSumPathEffect	core/SkPathEffect.h	/^    SkSumPathEffect(SkPathEffect* first, SkPathEffect* second)$/;"	f	class:SkSumPathEffect
SkSumPathEffect	core/SkPathEffect.h	/^class SkSumPathEffect : public SkPairPathEffect {$/;"	c
SkSystemEventTypes_DEFINED	views/SkSystemEventTypes.h	/^#define SkSystemEventTypes_DEFINED$/;"	d
SkTArray	core/SkTArray.h	/^    SkTArray() {$/;"	f	class:SkTArray
SkTArray	core/SkTArray.h	/^    SkTArray(SkAlignedSTStorage<N,T>* storage) {$/;"	f	class:SkTArray
SkTArray	core/SkTArray.h	/^    SkTArray(const SkTArray& array, SkAlignedSTStorage<N,T>* storage) {$/;"	f	class:SkTArray
SkTArray	core/SkTArray.h	/^    SkTArray(const T* array, int count) {$/;"	f	class:SkTArray
SkTArray	core/SkTArray.h	/^    SkTArray(const T* array, int count, SkAlignedSTStorage<N,T>* storage) {$/;"	f	class:SkTArray
SkTArray	core/SkTArray.h	/^    explicit SkTArray(const SkTArray& array) {$/;"	f	class:SkTArray
SkTArray	core/SkTArray.h	/^    explicit SkTArray(int reserveCount) {$/;"	f	class:SkTArray
SkTArray	core/SkTArray.h	/^template <typename T, bool MEM_COPY> class SkTArray {$/;"	c
SkTArrayExt	core/SkTArray.h	/^namespace SkTArrayExt {$/;"	n
SkTArray_DEFINED	core/SkTArray.h	/^#define SkTArray_DEFINED$/;"	d
SkTBitOr	SkTypes.h	/^T SkTBitOr(T a, T b) {$/;"	f
SkTBitOr	core/SkTypes.h	/^T SkTBitOr(T a, T b) {$/;"	f
SkTCast	SkTypes.h	/^template <typename Dst> Dst SkTCast(const void* ptr) {$/;"	f
SkTCast	core/SkTypes.h	/^template <typename Dst> Dst SkTCast(const void* ptr) {$/;"	f
SkTDArray	core/SkTDArray.h	/^    SkTDArray() {$/;"	f	class:SkTDArray
SkTDArray	core/SkTDArray.h	/^    SkTDArray(const SkTDArray<T>& src) {$/;"	f	class:SkTDArray
SkTDArray	core/SkTDArray.h	/^    SkTDArray(const T src[], size_t count) {$/;"	f	class:SkTDArray
SkTDArray	core/SkTDArray.h	/^template <typename T> class SK_API SkTDArray {$/;"	c
SkTDArray_DEFINED	core/SkTDArray.h	/^#define SkTDArray_DEFINED$/;"	d
SkTDStack	core/SkTDStack.h	/^    SkTDStack() : fCount(0), fTotalCount(0) {$/;"	f	class:SkTDStack
SkTDStack	core/SkTDStack.h	/^template <typename T> class SkTDStack : SkNoncopyable {$/;"	c
SkTDStack_DEFINED	core/SkTDStack.h	/^#define SkTDStack_DEFINED$/;"	d
SkTDict	core/SkTDict.h	/^    SkTDict(size_t minStringAlloc) : fStrings(minStringAlloc) {}$/;"	f	class:SkTDict
SkTDict	core/SkTDict.h	/^template <typename T> class SkTDict : SkNoncopyable {$/;"	c
SkTDict_DEFINED	core/SkTDict.h	/^#define SkTDict_DEFINED$/;"	d
SkTEndianSwap16	core/SkEndian.h	/^template<uint16_t N> struct SkTEndianSwap16 {$/;"	s
SkTEndianSwap32	core/SkEndian.h	/^template<uint32_t N> struct SkTEndianSwap32 {$/;"	s
SkTEndian_SwapBE16	core/SkEndian.h	/^    #define SkTEndian_SwapBE16(/;"	d
SkTEndian_SwapBE32	core/SkEndian.h	/^    #define SkTEndian_SwapBE32(/;"	d
SkTEndian_SwapLE16	core/SkEndian.h	/^    #define SkTEndian_SwapLE16(/;"	d
SkTEndian_SwapLE32	core/SkEndian.h	/^    #define SkTEndian_SwapLE32(/;"	d
SkTLazy	core/SkTLazy.h	/^    SkTLazy() : fPtr(NULL) {}$/;"	f	class:SkTLazy
SkTLazy	core/SkTLazy.h	/^    SkTLazy(const SkTLazy<T>& src) : fPtr(NULL) {$/;"	f	class:SkTLazy
SkTLazy	core/SkTLazy.h	/^    explicit SkTLazy(const T* src) : fPtr(NULL) {$/;"	f	class:SkTLazy
SkTLazy	core/SkTLazy.h	/^template <typename T> class SkTLazy {$/;"	c
SkTLazy_DEFINED	core/SkTLazy.h	/^#define SkTLazy_DEFINED$/;"	d
SkTPtrSet	core/SkPtrRecorder.h	/^template <typename T> class SkTPtrSet : public SkPtrSet {$/;"	c
SkTRefCnt	effects/SkGroupShape.h	/^    SkTRefCnt() : fRefCnt(1) {}$/;"	f	class:SkTRefCnt
SkTRefCnt	effects/SkGroupShape.h	/^template <typename T> class SkTRefCnt : public T {$/;"	c
SkTRegistry	core/SkTRegistry.h	/^    SkTRegistry(Factory fact) {$/;"	f	class:SkTRegistry
SkTRegistry	core/SkTRegistry.h	/^template <typename T, typename P> class SkTRegistry : SkNoncopyable {$/;"	c
SkTRegistry_DEFINED	core/SkTRegistry.h	/^#define SkTRegistry_DEFINED$/;"	d
SkTRelay	core/SkRelay.h	/^    SkTRelay(T* ptr) : fPtr(ptr) {}$/;"	f	class:SkTRelay
SkTRelay	core/SkRelay.h	/^template <template T> class SkTRelay : public SkRefCnt {$/;"	c
SkTRelay_DEFINED	core/SkRelay.h	/^#define SkTRelay_DEFINED$/;"	d
SkTScopedComPtr	utils/win/SkTScopedComPtr.h	/^    explicit SkTScopedComPtr(T *ptr = NULL) : fPtr(ptr) { }$/;"	f	class:SkTScopedComPtr
SkTScopedComPtr	utils/win/SkTScopedComPtr.h	/^class SkTScopedComPtr : SkNoncopyable {$/;"	c
SkTScopedPtr	core/SkTScopedPtr.h	/^    explicit SkTScopedPtr(T* o = NULL) : fObj(o) {}$/;"	f	class:SkTScopedPtr
SkTScopedPtr	core/SkTScopedPtr.h	/^template <typename T> class SkTScopedPtr : SkNoncopyable {$/;"	c
SkTScopedPtr_DEFINED	core/SkTScopedPtr.h	/^#define SkTScopedPtr_DEFINED$/;"	d
SkTSearch	core/SkTSearch.h	/^int SkTSearch(const T* base, int count, const T& target, size_t elemSize)$/;"	f
SkTSearch	core/SkTSearch.h	/^int SkTSearch(const T* base, int count, const T& target, size_t elemSize,$/;"	f
SkTSearch	core/SkTSearch.h	/^int SkTSearch(const T** base, int count, const T* target, size_t elemSize,$/;"	f
SkTSearch_DEFINED	core/SkTSearch.h	/^#define SkTSearch_DEFINED$/;"	d
SkTSize	core/SkSize.h	/^template <typename T> struct SkTSize {$/;"	s
SkTSwap	SkTypes.h	/^template <typename T> inline void SkTSwap(T& a, T& b) {$/;"	f
SkTSwap	core/SkTypes.h	/^template <typename T> inline void SkTSwap(T& a, T& b) {$/;"	f
SkTableColorFilter	effects/SkTableColorFilter.h	/^class SK_API SkTableColorFilter {$/;"	c
SkTableColorFilter_DEFINED	effects/SkTableColorFilter.h	/^#define SkTableColorFilter_DEFINED$/;"	d
SkTableMaskFilter	effects/SkTableMaskFilter.h	/^class SkTableMaskFilter : public SkMaskFilter {$/;"	c
SkTableMaskFilter_DEFINED	effects/SkTableMaskFilter.h	/^#define SkTableMaskFilter_DEFINED$/;"	d
SkTemplates_DEFINED	core/SkTemplates.h	/^#define SkTemplates_DEFINED$/;"	d
SkTextBox	utils/SkTextBox.h	/^class SkTextBox {$/;"	c
SkTextBox	views/SkTextBox.h	/^class SkTextBox {$/;"	c
SkTextBox_DEFINED	utils/SkTextBox.h	/^#define SkTextBox_DEFINED$/;"	d
SkTextBox_DEFINED	views/SkTextBox.h	/^#define SkTextBox_DEFINED$/;"	d
SkTextLayout	text/SkTextLayout.h	/^class SkTextLayout {$/;"	c
SkTextLayout_DEFINED	text/SkTextLayout.h	/^#define SkTextLayout_DEFINED$/;"	d
SkTextLineBreaker	utils/SkTextBox.h	/^class SkTextLineBreaker {$/;"	c
SkTextLineBreaker	views/SkTextBox.h	/^class SkTextLineBreaker {$/;"	c
SkTextStyle	text/SkTextLayout.h	/^class SkTextStyle : public SkRefCnt {$/;"	c
SkTextToPathIter	core/SkDraw.h	/^class SkTextToPathIter {$/;"	c
SkTextView	views/SkWidget.h	/^class SkTextView : public SkView {$/;"	c
SkThread_DEFINED	core/SkThread.h	/^#define SkThread_DEFINED$/;"	d
SkThread_platform_DEFINED	core/SkThread_platform.h	/^#define SkThread_platform_DEFINED$/;"	d
SkTime	core/SkTime.h	/^class SkTime {$/;"	c
SkTimeCode	utils/SkInterpolator.h	/^    struct SkTimeCode {$/;"	s	class:SkInterpolatorBase
SkTime_DEFINED	core/SkTime.h	/^#define SkTime_DEFINED$/;"	d
SkToBool	SkTypes.h	/^#define SkToBool(/;"	d
SkToBool	core/SkTypes.h	/^#define SkToBool(/;"	d
SkToS16	SkTypes.h	/^    #define SkToS16(/;"	d
SkToS16	core/SkTypes.h	/^    #define SkToS16(/;"	d
SkToS32	SkTypes.h	/^    #define SkToS32(/;"	d
SkToS32	core/SkTypes.h	/^    #define SkToS32(/;"	d
SkToS8	SkTypes.h	/^    #define SkToS8(/;"	d
SkToS8	core/SkTypes.h	/^    #define SkToS8(/;"	d
SkToU16	SkTypes.h	/^    #define SkToU16(/;"	d
SkToU16	core/SkTypes.h	/^    #define SkToU16(/;"	d
SkToU32	SkTypes.h	/^    #define SkToU32(/;"	d
SkToU32	core/SkTypes.h	/^    #define SkToU32(/;"	d
SkToU8	SkTypes.h	/^    #define SkToU8(/;"	d
SkToU8	core/SkTypes.h	/^    #define SkToU8(/;"	d
SkTouchGesture	views/SkTouchGesture.h	/^class SkTouchGesture {$/;"	c
SkTouchGesture_DEFINED	views/SkTouchGesture.h	/^#define SkTouchGesture_DEFINED$/;"	d
SkTrace_DEFINED	core/SkTrace.h	/^#define SkTrace_DEFINED$/;"	d
SkTransparentShader	effects/SkTransparentShader.h	/^    SkTransparentShader() {}$/;"	f	class:SkTransparentShader
SkTransparentShader	effects/SkTransparentShader.h	/^    SkTransparentShader(SkFlattenableReadBuffer& buffer) : INHERITED(buffer) {}$/;"	f	class:SkTransparentShader
SkTransparentShader	effects/SkTransparentShader.h	/^class SkTransparentShader : public SkShader {$/;"	c
SkTransparentShader_DEFINED	effects/SkTransparentShader.h	/^#define SkTransparentShader_DEFINED$/;"	d
SkTypeface	core/SkTypeface.h	/^class SK_API SkTypeface : public SkWeakRefCnt {$/;"	c
SkTypeface_DEFINED	core/SkTypeface.h	/^#define SkTypeface_DEFINED$/;"	d
SkTypeface_ValidScript	ports/SkTypeface_android.h	/^#define SkTypeface_ValidScript(/;"	d
SkTypeface_android_DEFINED	ports/SkTypeface_android.h	/^#define SkTypeface_android_DEFINED$/;"	d
SkTypeface_mac_DEFINED	ports/SkTypeface_mac.h	/^#define SkTypeface_mac_DEFINED$/;"	d
SkTypeface_win_DEFINED	ports/SkTypeface_win.h	/^#define SkTypeface_win_DEFINED$/;"	d
SkTypes_DEFINED	SkTypes.h	/^#define SkTypes_DEFINED$/;"	d
SkTypes_DEFINED	core/SkTypes.h	/^#define SkTypes_DEFINED$/;"	d
SkURLStream	core/SkStream.h	/^typedef SkFILEStream SkURLStream;$/;"	t
SkURLStream	ports/SkStream_Win.h	/^class SkURLStream : public SkStream {$/;"	c
SkUTF16_IsHighSurrogate	core/SkUtils.h	/^#define SkUTF16_IsHighSurrogate(/;"	d
SkUTF16_IsLowSurrogate	core/SkUtils.h	/^#define SkUTF16_IsLowSurrogate(/;"	d
SkUTF16_Str	core/SkOSFile.h	/^class SkUTF16_Str {$/;"	c
SkUTF8_CountUTF8Bytes	core/SkUtils.h	/^inline int SkUTF8_CountUTF8Bytes(const char utf8[]) {$/;"	f
SkUTF8_LeadByteToCount	core/SkUtils.h	/^    #define SkUTF8_LeadByteToCount(/;"	d
SkUnPreMultiply	core/SkUnPreMultiply.h	/^class SK_API SkUnPreMultiply {$/;"	c
SkUnPreMultiply_DEFINED	core/SkUnPreMultiply.h	/^#define SkUnPreMultiply_DEFINED$/;"	d
SkUnichar	SkTypes.h	/^typedef int32_t SkUnichar;$/;"	t
SkUnichar	core/SkTypes.h	/^typedef int32_t SkUnichar;$/;"	t
SkUnichar_IsVariationSelector	core/SkUtils.h	/^inline bool SkUnichar_IsVariationSelector(SkUnichar uni) {$/;"	f
SkUnit3D	utils/SkCamera.h	/^struct SkUnit3D {$/;"	s
SkUnitMapper	core/SkUnitMapper.h	/^    SkUnitMapper() {}$/;"	f	class:SkUnitMapper
SkUnitMapper	core/SkUnitMapper.h	/^    SkUnitMapper(SkFlattenableReadBuffer& rb) : SkFlattenable(rb) {}$/;"	f	class:SkUnitMapper
SkUnitMapper	core/SkUnitMapper.h	/^class SkUnitMapper : public SkFlattenable {$/;"	c
SkUnitMapper_DEFINED	core/SkUnitMapper.h	/^#define SkUnitMapper_DEFINED$/;"	d
SkUnitMappers_DEFINED	utils/SkUnitMappers.h	/^#define SkUnitMappers_DEFINED$/;"	d
SkUnitScalar	utils/SkCamera.h	/^    typedef SkFract SkUnitScalar;$/;"	t
SkUnitScalar	utils/SkCamera.h	/^    typedef float   SkUnitScalar;$/;"	t
SkUnitScalarDiv	utils/SkCamera.h	/^    #define SkUnitScalarDiv(/;"	d
SkUnitScalarMul	utils/SkCamera.h	/^    #define SkUnitScalarMul(/;"	d
SkUnixWindow	views/SkOSWindow_Unix.h	/^struct SkUnixWindow {$/;"	s
SkUpscale31To32	SkColorPriv.h	/^static inline int SkUpscale31To32(int value) {$/;"	f
SkUpscale31To32	core/SkColorPriv.h	/^static inline int SkUpscale31To32(int value) {$/;"	f
SkUserConfig_DEFINED	config/SkUserConfig.h	/^#define SkUserConfig_DEFINED$/;"	d
SkUtils_DEFINED	core/SkUtils.h	/^#define SkUtils_DEFINED$/;"	d
SkVector	core/SkPoint.h	/^typedef SkPoint SkVector;$/;"	t
SkVector3D	utils/SkCamera.h	/^typedef SkPoint3D SkVector3D;$/;"	t
SkVector4	utils/SkMatrix44.h	/^    SkVector4() {$/;"	f	struct:SkVector4
SkVector4	utils/SkMatrix44.h	/^    SkVector4(SkScalar x, SkScalar y, SkScalar z, SkScalar w = SK_Scalar1) {$/;"	f	struct:SkVector4
SkVector4	utils/SkMatrix44.h	/^    SkVector4(const SkVector4& src) {$/;"	f	struct:SkVector4
SkVector4	utils/SkMatrix44.h	/^struct SkVector4 {$/;"	s
SkView	views/SkView.h	/^class SkView : public SkEventSink {$/;"	c
SkViewInflate	views/SkViewInflate.h	/^class SkViewInflate {$/;"	c
SkViewInflate_DEFINED	views/SkViewInflate.h	/^#define SkViewInflate_DEFINED$/;"	d
SkView_DEFINED	views/SkView.h	/^#define SkView_DEFINED$/;"	d
SkWBuffer	core/SkBuffer.h	/^    SkWBuffer() : fData(0), fPos(0), fStop(0) {}$/;"	f	class:SkWBuffer
SkWBuffer	core/SkBuffer.h	/^    SkWBuffer(void* data) { reset(data); }$/;"	f	class:SkWBuffer
SkWBuffer	core/SkBuffer.h	/^    SkWBuffer(void* data, size_t size) { reset(data, size); }$/;"	f	class:SkWBuffer
SkWBuffer	core/SkBuffer.h	/^class SkWBuffer : SkNoncopyable {$/;"	c
SkWGLExtensions	utils/SkWGL.h	/^class SkWGLExtensions {$/;"	c
SkWGL_DEFINED	utils/SkWGL.h	/^#define SkWGL_DEFINED$/;"	d
SkWIStream	utils/win/SkIStream.h	/^class SkWIStream : public SkBaseIStream {$/;"	c
SkWStream	core/SkStream.h	/^class SK_API SkWStream : SkNoncopyable {$/;"	c
SkWeakRefCnt	core/SkWeakRefCnt.h	/^    SkWeakRefCnt() : SkRefCnt(), fWeakCnt(1) {}$/;"	f	class:SkWeakRefCnt
SkWeakRefCnt	core/SkWeakRefCnt.h	/^class SK_API SkWeakRefCnt : public SkRefCnt {$/;"	c
SkWeakRefCnt_DEFINED	core/SkWeakRefCnt.h	/^#define SkWeakRefCnt_DEFINED$/;"	d
SkWidget	views/SkWidget.h	/^    SkWidget(uint32_t flags = 0) : SkView(flags | kFocusable_Mask | kEnabled_Mask) {}$/;"	f	class:SkWidget
SkWidget	views/SkWidget.h	/^class SkWidget : public SkView {$/;"	c
SkWidgetEnum	views/SkWidgetViews.h	/^enum SkWidgetEnum {$/;"	g
SkWidgetView	views/SkWidget.h	/^class SkWidgetView : public SkView {$/;"	c
SkWidgetView	views/SkWidgetViews.h	/^class SkWidgetView : public SkView {$/;"	c
SkWidgetViews_DEFINED	views/SkWidgetViews.h	/^#define SkWidgetViews_DEFINED$/;"	d
SkWidget_DEFINED	views/SkWidget.h	/^#define SkWidget_DEFINED$/;"	d
SkWindow	views/SkWindow.h	/^class SkWindow : public SkView {$/;"	c
SkWindow_DEFINED	views/SkWindow.h	/^#define SkWindow_DEFINED$/;"	d
SkWriter32	core/SkWriter32.h	/^    SkWriter32(size_t minSize)$/;"	f	class:SkWriter32
SkWriter32	core/SkWriter32.h	/^class SkWriter32 : SkNoncopyable {$/;"	c
SkWriter32_DEFINED	core/SkWriter32.h	/^#define SkWriter32_DEFINED$/;"	d
SkXMLParser	xml/SkXMLParser.h	/^class SkXMLParser {$/;"	c
SkXMLParserError	xml/SkXMLParser.h	/^class SkXMLParserError {$/;"	c
SkXMLParserWriter	xml/SkXMLWriter.h	/^class SkXMLParserWriter : public SkXMLWriter {$/;"	c
SkXMLParser_DEFINED	xml/SkXMLParser.h	/^#define SkXMLParser_DEFINED$/;"	d
SkXMLStreamWriter	xml/SkXMLWriter.h	/^class SkXMLStreamWriter : public SkXMLWriter {$/;"	c
SkXMLWriter	xml/SkXMLWriter.h	/^class SkXMLWriter {$/;"	c
SkXMLWriter_DEFINED	xml/SkXMLWriter.h	/^#define SkXMLWriter_DEFINED$/;"	d
SkXRay	core/SkGeometry.h	/^typedef SkPoint SkXRay;$/;"	t
SkXRect	core/SkScan.h	/^typedef SkIRect SkXRect;$/;"	t
SkXfermode	core/SkXfermode.h	/^    SkXfermode() {}$/;"	f	class:SkXfermode
SkXfermode	core/SkXfermode.h	/^    SkXfermode(SkFlattenableReadBuffer& rb) : SkFlattenable(rb) {}$/;"	f	class:SkXfermode
SkXfermode	core/SkXfermode.h	/^class SK_API SkXfermode : public SkFlattenable {$/;"	c
SkXfermodeProc	core/SkColor.h	/^typedef SkPMColor (*SkXfermodeProc)(SkPMColor src, SkPMColor dst);$/;"	t
SkXfermodeProc16	core/SkColor.h	/^typedef uint16_t (*SkXfermodeProc16)(SkPMColor src, uint16_t dst);$/;"	t
SkXfermode_DEFINED	core/SkXfermode.h	/^#define SkXfermode_DEFINED$/;"	d
Sk_FracHalf	core/SkFixed.h	/^#define Sk_FracHalf /;"	d
SkinEnum	views/SkWidgetViews.h	/^enum SkinEnum {$/;"	g
SpacingAlign	utils/SkTextBox.h	/^    enum SpacingAlign {$/;"	g	class:SkTextBox
SpacingAlign	views/SkTextBox.h	/^    enum SpacingAlign {$/;"	g	class:SkTextBox
Spanerator	core/SkRegion.h	/^    class Spanerator {$/;"	c	class:SkRegion
SrcDepth	images/SkImageDecoder.h	/^    enum SrcDepth {$/;"	g	class:SkImageDecoder
StageKey	gpu/GrCustomStage.h	/^    typedef GrProgramStageFactory::StageKey StageKey;$/;"	t	class:GrCustomStage
StageKey	gpu/GrProgramStageFactory.h	/^    typedef uint16_t StageKey;$/;"	t	class:GrProgramStageFactory
State	effects/SkBlurDrawLooper.h	/^    enum State {$/;"	g	class:SkBlurDrawLooper
State	effects/SkColorMatrixFilter.h	/^    struct State {$/;"	s	class:SkColorMatrixFilter
State	pdf/SkPDFStream.h	/^    enum State {$/;"	g	class:SkPDFStream
State	views/SkTouchGesture.h	/^    enum State {$/;"	g	class:SkTouchGesture
State	views/SkView.h	/^        enum State {$/;"	g	class:SkView::Click
State	views/SkWidget.h	/^    enum State {$/;"	g	class:SkButtonWidget
State	views/SkWidget.h	/^    enum State {$/;"	g	class:SkCheckBoxView
Status	pipe/SkGPipe.h	/^    #undef Status$/;"	d
Status	pipe/SkGPipe.h	/^    enum Status {$/;"	g	class:SkGPipeReader
Style	core/SkPaint.h	/^    enum Style {$/;"	g	class:SkPaint
Style	core/SkTypeface.h	/^    enum Style {$/;"	g	class:SkTypeface
Style	effects/Sk1DPathEffect.h	/^    enum Style {$/;"	g	class:SkPath1DPathEffect
StyleFlags	core/SkAdvancedTypefaceMetrics.h	/^    enum StyleFlags {$/;"	g	class:SkAdvancedTypefaceMetrics
SubToFixed	core/SkScalerContext.h	/^    static SkFixed SubToFixed(unsigned sub) {$/;"	f	struct:SkGlyph
SubstituteMapping	pdf/SkPDFCatalog.h	/^        SubstituteMapping(SkPDFObject* original, SkPDFObject* substitute)$/;"	f	struct:SkPDFCatalog::SubstituteMapping
SubstituteMapping	pdf/SkPDFCatalog.h	/^    struct SubstituteMapping {$/;"	s	class:SkPDFCatalog
TexCache	gpu/SkGpuDevice.h	/^    typedef GrContext::TextureCacheEntry TexCache;$/;"	t	class:SkGpuDevice
TextBufferDirection	core/SkPaint.h	/^    enum TextBufferDirection {$/;"	g	class:SkPaint
TextEncoding	core/SkPaint.h	/^    enum TextEncoding {$/;"	g	class:SkPaint
TextFlags	core/SkDevice.h	/^    struct TextFlags {$/;"	s	class:SkDevice
TextureCacheEntry	gpu/GrContext.h	/^        TextureCacheEntry() : fEntry(NULL) {}$/;"	f	class:GrContext::TextureCacheEntry
TextureCacheEntry	gpu/GrContext.h	/^        TextureCacheEntry(const TextureCacheEntry& e) : fEntry(e.fEntry) {}$/;"	f	class:GrContext::TextureCacheEntry
TextureCacheEntry	gpu/GrContext.h	/^        explicit TextureCacheEntry(GrResourceEntry* entry) { fEntry = entry; }$/;"	f	class:GrContext::TextureCacheEntry
TextureCacheEntry	gpu/GrContext.h	/^    class SK_API TextureCacheEntry {$/;"	c	class:GrContext
TextureKey	gpu/GrContext.h	/^    typedef uint64_t TextureKey;$/;"	t	class:GrContext
TileMode	core/SkShader.h	/^    enum TileMode {$/;"	g	class:SkShader
Timeline	animator/SkAnimator.h	/^    class Timeline {$/;"	c	class:SkAnimator
TriState	views/SkOSMenu.h	/^    enum TriState {$/;"	g	class:SkOSMenu
Type	core/SkDrawFilter.h	/^    enum Type {$/;"	g	class:SkDrawFilter
Type	core/SkMetaData.h	/^    enum Type {$/;"	g	class:SkMetaData
Type	images/SkImageEncoder.h	/^    enum Type {$/;"	g	class:SkImageEncoder
Type	utils/SkJSON.h	/^    enum Type {$/;"	g	class:SkJSON
Type	views/SkOSMenu.h	/^    enum Type {$/;"	g	class:SkOSMenu
Type	xml/SkDOM.h	/^    enum Type {$/;"	g	class:SkDOM
TypeMask	core/SkMatrix.h	/^    enum TypeMask {$/;"	g	class:SkMatrix
U16CPU	SkTypes.h	/^typedef unsigned U16CPU;$/;"	t
U16CPU	core/SkTypes.h	/^typedef unsigned U16CPU;$/;"	t
U8CPU	SkTypes.h	/^typedef unsigned U8CPU;$/;"	t
U8CPU	core/SkTypes.h	/^typedef unsigned U8CPU;$/;"	t
UnpackFixedX	gpu/GrGlyph.h	/^    static inline GrFixed UnpackFixedX(PackedID packed) {$/;"	f	struct:GrGlyph
UnpackFixedY	gpu/GrGlyph.h	/^    static inline GrFixed UnpackFixedY(PackedID packed) {$/;"	f	struct:GrGlyph
UnpackID	gpu/GrGlyph.h	/^    static inline uint16_t UnpackID(PackedID packed) {$/;"	f	struct:GrGlyph
Usage	core/SkDevice.h	/^    enum Usage {$/;"	g	class:SkDevice
Verb	core/SkPath.h	/^    enum Verb {$/;"	g	class:SkPath
Verb	utils/SkDumpCanvas.h	/^    enum Verb {$/;"	g	class:SkDumpCanvas
VertexMode	core/SkCanvas.h	/^    enum VertexMode {$/;"	g	class:SkCanvas
VerticalAdvanceRange	core/SkAdvancedTypefaceMetrics.h	/^    typedef AdvanceMetric<VerticalMetric> VerticalAdvanceRange;$/;"	t	class:SkAdvancedTypefaceMetrics
VerticalMetric	core/SkAdvancedTypefaceMetrics.h	/^    struct VerticalMetric {$/;"	s	class:SkAdvancedTypefaceMetrics
WBMPImageDecoder	images/SkImageDecoder.h	/^DECLARE_DECODER_CREATOR(WBMPImageDecoder);$/;"	v
WIN32_IS_MEAN_WAS_LOCALLY_DEFINED	core/SkPostConfig.h	/^        #define WIN32_IS_MEAN_WAS_LOCALLY_DEFINED$/;"	d
WIN32_LEAN_AND_MEAN	core/SkPostConfig.h	/^        #define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	core/SkPostConfig.h	/^        #undef WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	utils/SkWGL.h	/^    #define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	utils/SkWGL.h	/^    #undef WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	utils/win/SkAutoCoInitialize.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	utils/win/SkIStream.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WidthRange	core/SkAdvancedTypefaceMetrics.h	/^    typedef AdvanceMetric<int16_t> WidthRange;$/;"	t	class:SkAdvancedTypefaceMetrics
WrapMode	gpu/GrSamplerState.h	/^    enum WrapMode {$/;"	g	class:GrSamplerState
XKEYS_TOSKKEYS_H	utils/unix/XkeysToSkKeys.h	/^#define XKEYS_TOSKKEYS_H$/;"	d
XKeyToSkKey	utils/unix/XkeysToSkKeys.h	/^SkKey XKeyToSkKey(KeySym keysym) {$/;"	f
XRect_round	core/SkScan.h	/^static inline void XRect_round(const SkXRect& xr, SkIRect* dst) {$/;"	f
XRect_roundOut	core/SkScan.h	/^static inline void XRect_roundOut(const SkXRect& xr, SkIRect* dst) {$/;"	f
XRect_set	core/SkScan.h	/^static inline void XRect_set(SkXRect* xr, const SkIRect& src) {$/;"	f
XRect_set	core/SkScan.h	/^static inline void XRect_set(SkXRect* xr, const SkRect& src) {$/;"	f
_ANDROID_TO_SKIA_KEYCODES_H	utils/android/AndroidKeyToSkKey.h	/^#define _ANDROID_TO_SKIA_KEYCODES_H$/;"	d
_SkTestImageFilters_h	effects/SkTestImageFilters.h	/^#define _SkTestImageFilters_h$/;"	d
__STDC_CONSTANT_MACROS	gpu/GrConfig.h	/^#define __STDC_CONSTANT_MACROS$/;"	d
__STDC_LIMIT_MACROS	gpu/GrConfig.h	/^#define __STDC_LIMIT_MACROS$/;"	d
_addAttribute	svg/SkSVGParser.h	/^    void _addAttribute(const char* attrName, SkString& attrValue) {$/;"	f	class:SkSVGParser
_addAttribute	svg/SkSVGParser.h	/^    void _addAttribute(const char* attrName, const char* attrValue) {$/;"	f	class:SkSVGParser
_addAttributeLen	svg/SkSVGParser.h	/^    void _addAttributeLen(const char* attrName, const char* attrValue, size_t len) {$/;"	f	class:SkSVGParser
_endElement	svg/SkSVGParser.h	/^    void _endElement() { fXMLWriter.endElement(); }$/;"	f	class:SkSVGParser
_refcount	utils/win/SkIStream.h	/^    LONG _refcount;$/;"	m	class:SkBaseIStream
_startElement	svg/SkSVGParser.h	/^    void _startElement(const char name[]) { fXMLWriter.startElement(name); }$/;"	f	class:SkSVGParser
accessRenderTarget	core/SkDevice.h	/^    virtual SkGpuRenderTarget* accessRenderTarget() { return NULL; }$/;"	f	class:SkDevice
acquire	core/SkThread_platform.h	/^    void    acquire() { pthread_mutex_lock(&fMutex); }$/;"	f	struct:SkBaseMutex
add	core/Sk64.h	/^    void    add(const Sk64& other) { this->add(other.fHi, other.fLo); }$/;"	f	struct:Sk64
add	core/Sk64.h	/^    void add(int32_t hi, uint32_t lo) {$/;"	f	struct:Sk64
add	core/Sk64.h	/^    void add(int32_t lo) {$/;"	f	struct:Sk64
add	core/SkPtrRecorder.h	/^    uint32_t add(T ptr) {$/;"	f	class:SkTPtrSet
addEntry	core/SkDescriptor.h	/^    void* addEntry(uint32_t tag, uint32_t length, const void* data = NULL)$/;"	f	class:SkDescriptor
addGetFixed	core/Sk64.h	/^    SkFixed addGetFixed(const Sk64& other) const {$/;"	f	struct:Sk64
addGetFixed	core/Sk64.h	/^    SkFixed addGetFixed(int32_t hi, uint32_t lo) const {$/;"	f	struct:Sk64
addLayer	effects/SkLayerDrawLooper.h	/^    void addLayer() { this->addLayer(0, 0); }$/;"	f	class:SkLayerDrawLooper
addLayer	effects/SkLayerRasterizer.h	/^    void addLayer(const SkPaint& paint) {$/;"	f	class:SkLayerRasterizer
addPath	core/SkPath.h	/^    void addPath(const SkPath& src) {$/;"	f	class:SkPath
addShape	effects/SkGroupShape.h	/^    void addShape(int index, SkShape* shape, const SkMatrix& matrix) {$/;"	f	class:SkGroupShape
adjust	core/SkAutoKern.h	/^    SkFixed  adjust(const SkGlyph&  glyph) $/;"	f	class:SkAutoKern
afterChild	views/SkView.h	/^    virtual void afterChild(SkView* child, SkCanvas* canvas) {}$/;"	f	class:SkView
afterChildren	views/SkView.h	/^    virtual void afterChildren(SkCanvas* orig) {}$/;"	f	class:SkView
allocPixelRef	SkBitmap.cpp	/^bool SkBitmap::HeapAllocator::allocPixelRef(SkBitmap* dst,$/;"	f	class:SkBitmap::HeapAllocator
allocPixels	SkBitmap.cpp	/^bool SkBitmap::allocPixels(Allocator* allocator, SkColorTable* ctable) {$/;"	f	class:SkBitmap
allocPixels	SkBitmap.h	/^    bool allocPixels(SkColorTable* ctable = NULL) {$/;"	f	class:SkBitmap
allocPixels	core/SkBitmap.h	/^    bool allocPixels(SkColorTable* ctable = NULL) {$/;"	f	class:SkBitmap
allocThrow	core/SkChunkAlloc.h	/^    void* allocThrow(size_t bytes) {$/;"	f	class:SkChunkAlloc
android	core/SkRegion.h	/^namespace android {$/;"	n
append	core/SkString.h	/^    void append(const SkString& str) { this->insert((size_t)-1, str); }$/;"	f	class:SkString
append	core/SkString.h	/^    void append(const char text[]) { this->insert((size_t)-1, text); }$/;"	f	class:SkString
append	core/SkString.h	/^    void append(const char text[], size_t len) { this->insert((size_t)-1, text, len); }$/;"	f	class:SkString
append	core/SkTDArray.h	/^    T* append() {$/;"	f	class:SkTDArray
append	core/SkTDArray.h	/^    T* append(size_t count, const T* src = NULL) {$/;"	f	class:SkTDArray
appendClear	core/SkTDArray.h	/^    T* appendClear() {$/;"	f	class:SkTDArray
appendHex	core/SkString.h	/^    void appendHex(uint32_t value, int minDigits = 0) { this->insertHex((size_t)-1, value, minDigits); }$/;"	f	class:SkString
appendS32	core/SkString.h	/^    void appendS32(int32_t value) { this->insertS32((size_t)-1, value); }$/;"	f	class:SkString
appendS64	core/SkString.h	/^    void appendS64(int64_t value, int minDigits = 0) { this->insertS64((size_t)-1, value, minDigits); }$/;"	f	class:SkString
appendScalar	core/SkString.h	/^    void appendScalar(SkScalar value) { this->insertScalar((size_t)-1, value); }$/;"	f	class:SkString
appendShape	effects/SkGroupShape.h	/^    SkShape* appendShape(SkShape* shape, SkMatrixRef* mr = NULL) {$/;"	f	class:SkGroupShape
appendShape	effects/SkGroupShape.h	/^    SkShape* appendShape(SkShape* shape, const SkMatrix& matrix) {$/;"	f	class:SkGroupShape
appendUnichar	core/SkString.h	/^    void appendUnichar(SkUnichar uni) { this->insertUnichar((size_t)-1, uni); }$/;"	f	class:SkString
arcTo	core/SkPath.h	/^    void arcTo(const SkPoint p1, const SkPoint p2, SkScalar radius) {$/;"	f	class:SkPath
area	gpu/GrRect.h	/^    int area() const { return this->width() * this->height(); }$/;"	f	struct:GrIRect16
arrays	utils/SkJSON.h	/^        Array* const* arrays() const {$/;"	f	class:SkJSON::Array
asRenderTarget	gpu/GrTexture.h	/^    GrRenderTarget* asRenderTarget() { return fRenderTarget; }$/;"	f	class:GrTexture
asRenderTarget	gpu/GrTexture.h	/^    const GrRenderTarget* asRenderTarget() const { return fRenderTarget; }$/;"	f	class:GrTexture
asTexture	gpu/GrRenderTarget.h	/^    GrTexture* asTexture() {return fTexture;}$/;"	f	class:GrRenderTarget
assertChecksum	core/SkDescriptor.h	/^    void assertChecksum() const$/;"	f	class:SkDescriptor
attach	views/SkOSWindow_Android.h	/^    bool attach(SkBackEndTypes \/* attachType *\/, int \/* msaaSampleCount *\/) {$/;"	f	class:SkOSWindow
available	core/SkReader32.h	/^    uint32_t available() const { return fStop - fCurr; }$/;"	f	class:SkReader32
back	core/SkDeque.h	/^    void* back() {$/;"	f	class:SkDeque
back	core/SkTArray.h	/^    T& back() { SkASSERT(fCount); return fItemArray[fCount - 1];}$/;"	f	class:SkTArray
back	core/SkTArray.h	/^    const T& back() const { SkASSERT(fCount > 0); return fItemArray[fCount - 1];}$/;"	f	class:SkTArray
base	core/SkOrderedReadBuffer.h	/^    const void* base() { return fReader.base(); }$/;"	f	class:SkOrderedReadBuffer
base	core/SkReader32.h	/^    const void* base() const { return fBase; }$/;"	f	class:SkReader32
beforeChild	views/SkView.h	/^    virtual void beforeChild(SkView* child, SkCanvas* canvas) {}$/;"	f	class:SkView
beforeChildren	views/SkView.h	/^    virtual SkCanvas* beforeChildren(SkCanvas* c) { return c; }$/;"	f	class:SkView
begin	core/SkTDArray.h	/^    T*  begin() const { return fArray; }$/;"	f	class:SkTDArray
begin	images/SkImageDecoder.h	/^        virtual void begin(int count) {}$/;"	f	class:SkImageDecoder::Chooser
bitmap	images/SkFlipPixelRef.h	/^    const SkBitmap& bitmap() const { return fBitmap; }$/;"	f	class:SkAutoFlipUpdate
blockCount	core/SkChunkAlloc.h	/^    int blockCount() const { return fBlockCount; }$/;"	f	class:SkChunkAlloc
bools	utils/SkJSON.h	/^        bool* bools() const {$/;"	f	class:SkJSON::Array
bottom	SkRect.h	/^    SkScalar    bottom() const { return fBottom; }$/;"	f	struct:SkRect
bottom	SkRect.h	/^    int bottom() const { return fBottom; }$/;"	f	struct:SkIRect
bottom	core/SkRect.h	/^    SkScalar    bottom() const { return fBottom; }$/;"	f	struct:SkRect
bottom	core/SkRect.h	/^    int bottom() const { return fBottom; }$/;"	f	struct:SkIRect
buildMipMap	SkBitmap.cpp	/^void SkBitmap::buildMipMap(bool forceRebuild) {$/;"	f	class:SkBitmap
bytes	core/SkData.h	/^    const uint8_t* bytes() const {$/;"	f	class:SkAutoDataUnref
bytes	core/SkData.h	/^    const uint8_t* bytes() const {$/;"	f	class:SkData
bytes	core/SkTDArray.h	/^    size_t bytes() const { return fCount * sizeof(T); }$/;"	f	class:SkTDArray
bytesPerPixel	SkBitmap.h	/^    int bytesPerPixel() const { return fBytesPerPixel; }$/;"	f	class:SkBitmap
bytesPerPixel	core/SkBitmap.h	/^    int bytesPerPixel() const { return fBytesPerPixel; }$/;"	f	class:SkBitmap
bytesWritten	core/SkStream.h	/^    size_t bytesWritten() const { return fBytesWritten; }$/;"	f	class:SkDynamicMemoryWStream
bytesWritten	core/SkStream.h	/^    size_t bytesWritten() const { return fBytesWritten; }$/;"	f	class:SkMemoryWStream
c_str	core/SkString.h	/^    const char* c_str() const { return fRec->data(); }$/;"	f	class:SkString
cacheEntry	gpu/GrContext.h	/^        GrResourceEntry* cacheEntry() { return fEntry; }$/;"	f	class:GrContext::TextureCacheEntry
canCallShadeSpan16	core/SkShader.h	/^    bool canCallShadeSpan16() {$/;"	f	class:SkShader
canComputeFastBounds	core/SkPaint.h	/^    bool canComputeFastBounds() const {$/;"	f	class:SkPaint
canCopyTo	SkBitmap.cpp	/^bool SkBitmap::canCopyTo(Config dstConfig) const {$/;"	f	class:SkBitmap
canNormalize	core/SkPoint.h	/^    bool canNormalize() const {$/;"	f	struct:SkPoint
cancelDecode	images/SkImageDecoder.h	/^    void cancelDecode() {$/;"	f	class:SkImageDecoder
centerX	SkRect.h	/^    SkScalar    centerX() const { return SkScalarHalf(fLeft + fRight); }$/;"	f	struct:SkRect
centerX	core/SkRect.h	/^    SkScalar    centerX() const { return SkScalarHalf(fLeft + fRight); }$/;"	f	struct:SkRect
centerY	SkRect.h	/^    SkScalar    centerY() const { return SkScalarHalf(fTop + fBottom); }$/;"	f	struct:SkRect
centerY	core/SkRect.h	/^    SkScalar    centerY() const { return SkScalarHalf(fTop + fBottom); }$/;"	f	struct:SkRect
cheapEqualTo	core/SkMatrix.h	/^    bool cheapEqualTo(const SkMatrix& m) const {$/;"	f	class:SkMatrix
cheapIsDirection	core/SkPath.h	/^    bool cheapIsDirection(Direction dir) const {$/;"	f	class:SkPath
checkRealloc	core/SkTArray.h	/^    inline void checkRealloc(int delta) {$/;"	f	class:SkTArray
clampNegToZero	core/SkSize.h	/^    void clampNegToZero() {$/;"	f	struct:SkTSize
clear	core/SkRelay.h	/^    void clear() { this->set(NULL); }$/;"	f	class:SkTRelay
clear	utils/SkDeferredCanvas.h	/^        virtual void clear(SkColor color)$/;"	f	class:SkDeferredCanvas::DeferredDevice
clearTypeMask	core/SkMatrix.h	/^    void clearTypeMask(int mask) {$/;"	f	class:SkMatrix
clipDevRect	core/SkClipStack.h	/^    void clipDevRect(const SkIRect& ir, SkRegion::Op op) {$/;"	f	class:SkClipStack
collaps4444	SkBitmap.cpp	/^static U16CPU collaps4444(uint32_t c) {$/;"	f	file:
colorTable	core/SkPixelRef.h	/^    SkColorTable* colorTable() const { return fColorTable; }$/;"	f	class:SkPixelRef
colors	SkBitmap.h	/^    const SkPMColor* colors() const { return fColors; }$/;"	f	class:SkAutoLockColors
colors	core/SkBitmap.h	/^    const SkPMColor* colors() const { return fColors; }$/;"	f	class:SkAutoLockColors
computeChecksum	core/SkDescriptor.h	/^    void computeChecksum()$/;"	f	class:SkDescriptor
computeFastBounds	core/SkPaint.h	/^    const SkRect& computeFastBounds(const SkRect& orig, SkRect* storage) const {$/;"	f	class:SkPaint
computeFastStrokeBounds	core/SkPaint.h	/^    const SkRect& computeFastStrokeBounds(const SkRect& orig,$/;"	f	class:SkPaint
config	SkBitmap.h	/^    Config  config() const { return (Config)fConfig; }$/;"	f	class:SkBitmap
config	core/SkBitmap.h	/^    Config  config() const { return (Config)fConfig; }$/;"	f	class:SkBitmap
config	core/SkDevice.h	/^    SkBitmap::Config config() const { return fBitmap.getConfig(); }$/;"	f	class:SkDevice
config	gpu/GrRenderTarget.h	/^    GrPixelConfig config() const { return fConfig; }$/;"	f	class:GrRenderTarget
config	gpu/GrTexture.h	/^    GrPixelConfig config() const { return fConfig; }$/;"	f	class:GrTexture
contains	SkRect.h	/^    bool contains(SkScalar x, SkScalar y) const {$/;"	f	struct:SkRect
contains	SkRect.h	/^    bool contains(const SkIRect& r) const {$/;"	f	struct:SkIRect
contains	SkRect.h	/^    bool contains(const SkPoint& p) const {$/;"	f	struct:SkRect
contains	SkRect.h	/^    bool contains(const SkRect& r) const {$/;"	f	struct:SkRect
contains	SkRect.h	/^    bool contains(int32_t left, int32_t top, int32_t right, int32_t bottom) const {$/;"	f	struct:SkIRect
contains	SkRect.h	/^    bool contains(int32_t x, int32_t y) const {$/;"	f	struct:SkIRect
contains	core/SkRect.h	/^    bool contains(SkScalar x, SkScalar y) const {$/;"	f	struct:SkRect
contains	core/SkRect.h	/^    bool contains(const SkIRect& r) const {$/;"	f	struct:SkIRect
contains	core/SkRect.h	/^    bool contains(const SkPoint& p) const {$/;"	f	struct:SkRect
contains	core/SkRect.h	/^    bool contains(const SkRect& r) const {$/;"	f	struct:SkRect
contains	core/SkRect.h	/^    bool contains(int32_t left, int32_t top, int32_t right, int32_t bottom) const {$/;"	f	struct:SkIRect
contains	core/SkRect.h	/^    bool contains(int32_t x, int32_t y) const {$/;"	f	struct:SkIRect
contains	core/SkString.h	/^    bool contains(const char substring[]) const {$/;"	f	class:SkString
containsNoEmptyCheck	SkRect.h	/^    bool containsNoEmptyCheck(int32_t left, int32_t top,$/;"	f	struct:SkIRect
containsNoEmptyCheck	core/SkRect.h	/^    bool containsNoEmptyCheck(int32_t left, int32_t top,$/;"	f	struct:SkIRect
context	gpu/SkGpuDevice.h	/^    GrContext* context() const { return fContext; }$/;"	f	class:SkGpuDevice
copy	core/SkDescriptor.h	/^    SkDescriptor* copy() const$/;"	f	class:SkDescriptor
copy	core/SkTArray.h	/^inline void copy(SkTArray<T, false>* self, const T* array) {$/;"	f	namespace:SkTArrayExt
copy	core/SkTArray.h	/^inline void copy(SkTArray<T, true>* self, const T* array) {$/;"	f	namespace:SkTArrayExt
copyAndDelete	core/SkTArray.h	/^inline void copyAndDelete(SkTArray<T, false>* self, char* newMemArray) {$/;"	f	namespace:SkTArrayExt
copyAndDelete	core/SkTArray.h	/^inline void copyAndDelete(SkTArray<T, true>* self, char* newMemArray) {$/;"	f	namespace:SkTArrayExt
copyPixelsTo	SkBitmap.cpp	/^bool SkBitmap::copyPixelsTo(void* const dst, size_t dstSize, $/;"	f	class:SkBitmap
copyTo	SkBitmap.cpp	/^bool SkBitmap::copyTo(SkBitmap* dst, Config dstConfig, Allocator* alloc) const {$/;"	f	class:SkBitmap
copyToArray	core/SkPtrRecorder.h	/^    void copyToArray(T* array) const {$/;"	f	class:SkTPtrSet
count	SkBitmap.h	/^    int count() const { return fCount; }$/;"	f	class:SkColorTable
count	core/SkBitmap.h	/^    int count() const { return fCount; }$/;"	f	class:SkColorTable
count	core/SkDeque.h	/^    int     count() const { return fCount; }$/;"	f	class:SkDeque
count	core/SkPtrRecorder.h	/^    int count() const { return fList.count(); }$/;"	f	class:SkPtrSet
count	core/SkString.h	/^    int count() const { return fCount; }$/;"	f	class:SkAutoUCS2
count	core/SkTArray.h	/^    int count() const { return fCount; }$/;"	f	class:SkTArray
count	core/SkTDArray.h	/^    int count() const { return fCount; }$/;"	f	class:SkTDArray
count	core/SkTDStack.h	/^    int count() const { return fTotalCount; }$/;"	f	class:SkTDStack
count	core/SkTDict.h	/^    int count() const { return fArray.count(); }$/;"	f	class:SkTDict
count	core/SkTemplates.h	/^    size_t count() const { return fCount; }$/;"	f	class:SkAutoSTArray
count	utils/SkJSON.h	/^        int count() const { return fCount; }$/;"	f	class:SkJSON::Array
countPoints	core/SkPath.h	/^    int countPoints() const {$/;"	f	class:SkPath
countText	core/SkPaint.h	/^    int countText(const void* text, size_t byteLength) const {$/;"	f	class:SkPaint
cross	core/SkPoint.h	/^    SkScalar cross(const SkPoint& vec) const {$/;"	f	struct:SkPoint
cubicTo	core/SkPath.h	/^    void cubicTo(const SkPoint& p1, const SkPoint& p2, const SkPoint& p3) {$/;"	f	class:SkPath
data	core/SkData.h	/^    const void* data() const { return fData; }$/;"	f	class:SkAutoDataUnref
data	core/SkData.h	/^    const void* data() const { return fPtr; }$/;"	f	class:SkData
data	core/SkMetaData.h	/^        const void* data() const { return (this + 1); }$/;"	f	struct:SkMetaData::Rec
data	core/SkMetaData.h	/^        void*       data() { return (this + 1); }$/;"	f	struct:SkMetaData::Rec
data	core/SkString.h	/^        char* data() { return &fBeginningOfData; }$/;"	f	struct:SkString::Rec
data	core/SkString.h	/^        const char* data() const { return &fBeginningOfData; }$/;"	f	struct:SkString::Rec
decPtr	core/SkPtrRecorder.h	/^    virtual void decPtr(void* ptr) {}$/;"	f	class:SkPtrSet
decode	images/SkImageDecoder.h	/^    bool decode(SkStream* stream, SkBitmap* bitmap, Mode mode) {$/;"	f	class:SkImageDecoder
deepCopy	core/SkPixelRef.h	/^    virtual SkPixelRef* deepCopy(SkBitmap::Config config) { return NULL; }$/;"	f	class:SkPixelRef
deepCopyTo	SkBitmap.cpp	/^bool SkBitmap::deepCopyTo(SkBitmap* dst, Config dstConfig) const {$/;"	f	class:SkBitmap
deleteAll	core/SkTDArray.h	/^    void deleteAll() {$/;"	f	class:SkTDArray
depth	core/SkTDStack.h	/^    int depth() const { return fTotalCount; }$/;"	f	class:SkTDStack
detach	SkTypes.h	/^    void* detach() { return this->set(NULL); }$/;"	f	class:SkAutoFree
detach	SkTypes.h	/^    void* detach() {$/;"	f	class:SkAutoMalloc
detach	core/SkRefCnt.h	/^    T* detach() {$/;"	f	class:SkAutoTUnref
detach	core/SkTDArray.h	/^    T* detach() {$/;"	f	class:SkTDArray
detach	core/SkTemplates.h	/^    T*      detach() { T* array = fArray; fArray = NULL; return array; }$/;"	f	class:SkAutoTDeleteArray
detach	core/SkTemplates.h	/^    T*      detach() { T* obj = fObj; fObj = NULL; return obj; }$/;"	f	class:SkAutoTDelete
detach	core/SkTemplates.h	/^    T* detach() { T* obj = fObj; fObj = NULL; return obj; }$/;"	f	class:SkAutoTCallIProc
detach	core/SkTemplates.h	/^    T* detach() { T* obj = fObj; fObj = NULL; return obj; }$/;"	f	class:SkAutoTCallVProc
detach	core/SkTypes.h	/^    void* detach() { return this->set(NULL); }$/;"	f	class:SkAutoFree
detach	core/SkTypes.h	/^    void* detach() {$/;"	f	class:SkAutoMalloc
detach	views/SkOSWindow_Android.h	/^    void detach() {}$/;"	f	class:SkOSWindow
dirty	images/SkFlipPixelRef.h	/^    const SkRegion& dirty() const { return *fDirty; }$/;"	f	class:SkAutoFlipUpdate
dirtyMatrixTypeCache	core/SkMatrix.h	/^    void dirtyMatrixTypeCache() {$/;"	f	class:SkMatrix
dirtyRgn	images/SkFlipPixelRef.h	/^    const SkRegion& dirtyRgn() const { return fFlipper.dirtyRgn(); }$/;"	f	class:SkFlipPixelRef
dirtyRgn	images/SkPageFlipper.h	/^    const SkRegion& dirtyRgn() const { return *fDirty1; }$/;"	f	class:SkPageFlipper
distanceToLineBetween	core/SkPoint.h	/^    SkScalar distanceToLineBetween(const SkPoint& a,$/;"	f	struct:SkPoint
distanceToLineSegmentBetween	core/SkPoint.h	/^    SkScalar distanceToLineSegmentBetween(const SkPoint& a,$/;"	f	struct:SkPoint
distanceToOrigin	core/SkPoint.h	/^    SkScalar distanceToOrigin() const { return this->length(); }$/;"	f	struct:SkPoint
distanceToSqd	core/SkPoint.h	/^    SkScalar distanceToSqd(const SkPoint& pt) const {$/;"	f	struct:SkPoint
done	core/SkCanvas.h	/^        bool done() const { return fDone; }$/;"	f	class:SkCanvas::LayerIter
done	core/SkRegion.h	/^        bool done() const { return fDone; }$/;"	f	class:SkRegion::Iterator
done	core/SkRegion.h	/^        bool done() { return fDone; }$/;"	f	class:SkRegion::Cliperator
dot	core/SkPoint.h	/^    SkScalar dot(const SkPoint& vec) const {$/;"	f	struct:SkPoint
dotWith	utils/SkCamera.h	/^    SkScalar dotWith(const SkVector3D& v) const$/;"	f	class:SkPatch3D
downsampleby2_proc16	SkBitmap.cpp	/^static void downsampleby2_proc16(SkBitmap* dst, int x, int y,$/;"	f	file:
downsampleby2_proc32	SkBitmap.cpp	/^static void downsampleby2_proc32(SkBitmap* dst, int x, int y,$/;"	f	file:
downsampleby2_proc4444	SkBitmap.cpp	/^static void downsampleby2_proc4444(SkBitmap* dst, int x, int y,$/;"	f	file:
draw	utils/SkLayer.h	/^    void draw(SkCanvas* canvas) {$/;"	f	class:SkLayer
drawBitmap	utils/SkDeferredCanvas.h	/^        virtual void drawBitmap(const SkDraw&, const SkBitmap& bitmap,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawDevice	utils/SkDeferredCanvas.h	/^        virtual void drawDevice(const SkDraw&, SkDevice*, int x, int y,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawIRect	core/SkCanvas.h	/^    void drawIRect(const SkIRect& rect, const SkPaint& paint)$/;"	f	class:SkCanvas
drawPaint	utils/SkDeferredCanvas.h	/^        virtual void drawPaint(const SkDraw&, const SkPaint& paint)$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawPath	core/SkDraw.h	/^    void drawPath(const SkPath& src, const SkPaint& paint) const {$/;"	f	class:SkDraw
drawPath	utils/SkDeferredCanvas.h	/^        virtual void drawPath(const SkDraw&, const SkPath& path,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawPoints	utils/SkDeferredCanvas.h	/^        virtual void drawPoints(const SkDraw&, SkCanvas::PointMode mode,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawPosText	utils/SkDeferredCanvas.h	/^        virtual void drawPosText(const SkDraw&, const void* text, size_t len,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawPosTextOnPath	utils/SkDeferredCanvas.h	/^        virtual void drawPosTextOnPath(const SkDraw& draw, const void* text,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawRect	utils/SkDeferredCanvas.h	/^        virtual void drawRect(const SkDraw&, const SkRect& r,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawSprite	utils/SkDeferredCanvas.h	/^        virtual void drawSprite(const SkDraw&, const SkBitmap& bitmap,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawText	utils/SkDeferredCanvas.h	/^        virtual void drawText(const SkDraw&, const void* text, size_t len,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawTextOnPath	utils/SkDeferredCanvas.h	/^        virtual void drawTextOnPath(const SkDraw&, const void* text,$/;"	f	class:SkDeferredCanvas::DeferredDevice
drawVertices	utils/SkDeferredCanvas.h	/^        virtual void drawVertices(const SkDraw&, SkCanvas::VertexMode,$/;"	f	class:SkDeferredCanvas::DeferredDevice
elemSize	core/SkDeque.h	/^    size_t  elemSize() const { return fElemSize; }$/;"	f	class:SkDeque
empty	SkBitmap.h	/^    bool empty() const { return 0 == fWidth || 0 == fHeight; }$/;"	f	class:SkBitmap
empty	core/SkBitmap.h	/^    bool empty() const { return 0 == fWidth || 0 == fHeight; }$/;"	f	class:SkBitmap
empty	core/SkDeque.h	/^    bool    empty() const { return 0 == fCount; }$/;"	f	class:SkDeque
empty	core/SkTArray.h	/^    bool empty() const { return !fCount; }$/;"	f	class:SkTArray
empty	core/SkTDStack.h	/^    bool empty() const { return fTotalCount == 0; }$/;"	f	class:SkTDStack
end	core/SkTDArray.h	/^    T*  end() const { return fArray ? fArray + fCount : NULL; }$/;"	f	class:SkTDArray
endElement	xml/SkXMLWriter.h	/^    void    endElement() { this->onEndElement(); }$/;"	f	class:SkXMLWriter
endUpdate	images/SkFlipPixelRef.h	/^    void endUpdate() {$/;"	f	class:SkAutoFlipUpdate
endsWith	core/SkString.h	/^    bool endsWith(const char suffix[]) const {$/;"	f	class:SkString
eof	core/SkBuffer.h	/^    bool    eof() const { return fPos >= fStop; }$/;"	f	class:SkRBuffer
eof	core/SkOrderedReadBuffer.h	/^    bool eof() { return fReader.eof(); }$/;"	f	class:SkOrderedReadBuffer
eof	core/SkReader32.h	/^    bool eof() const { return fCurr >= fStop; }$/;"	f	class:SkReader32
equals	core/SkDescriptor.h	/^    bool equals(const SkDescriptor& other) const$/;"	f	class:SkDescriptor
equals	core/SkPoint.h	/^    bool equals(SkScalar x, SkScalar y) const { return fX == x && fY == y; }$/;"	f	struct:SkPoint
equals	core/SkPoint.h	/^    bool equals(int32_t x, int32_t y) const {$/;"	f	struct:SkIPoint
equals	core/SkSize.h	/^    bool equals(T w, T h) const {$/;"	f	struct:SkTSize
equals	utils/SkMatrix44.h	/^    bool equals(SkScalar x, SkScalar y, SkScalar z, SkScalar w = SK_Scalar1) {$/;"	f	struct:SkVector4
equalsWithinTolerance	core/SkPoint.h	/^    bool equalsWithinTolerance(const SkPoint& p) const {$/;"	f	struct:SkPoint
equalsWithinTolerance	core/SkPoint.h	/^    bool equalsWithinTolerance(const SkPoint& p, SkScalar tol) const {$/;"	f	struct:SkPoint
eraseARGB	SkBitmap.cpp	/^void SkBitmap::eraseARGB(U8CPU a, U8CPU r, U8CPU g, U8CPU b) const {$/;"	f	class:SkBitmap
eraseColor	SkBitmap.h	/^    void eraseColor(SkColor c) const {$/;"	f	class:SkBitmap
eraseColor	core/SkBitmap.h	/^    void eraseColor(SkColor c) const {$/;"	f	class:SkBitmap
eraseColor	core/SkDevice.h	/^    void eraseColor(SkColor eraseColor) { this->clear(eraseColor); }$/;"	f	class:SkDevice
eraseRGB	SkBitmap.h	/^    void eraseRGB(U8CPU r, U8CPU g, U8CPU b) const {$/;"	f	class:SkBitmap
eraseRGB	core/SkBitmap.h	/^    void eraseRGB(U8CPU r, U8CPU g, U8CPU b) const {$/;"	f	class:SkBitmap
event	views/SkWidgetViews.h	/^    SkEvent&        event() { return fEvent; }$/;"	f	class:SkWidgetView
event	views/SkWidgetViews.h	/^    const SkEvent&  event() const { return fEvent; }$/;"	f	class:SkWidgetView
expand16	SkBitmap.cpp	/^static inline uint32_t expand16(U16CPU c) {$/;"	f	file:
expand4444	SkBitmap.cpp	/^static uint32_t expand4444(U16CPU c) {$/;"	f	file:
exportTo	pdf/SkBitSet.h	/^    void exportTo(SkTDArray<T>* array) const {$/;"	f	class:SkBitSet
extractAlpha	SkBitmap.cpp	/^bool SkBitmap::extractAlpha(SkBitmap* dst, const SkPaint* paint,$/;"	f	class:SkBitmap
extractAlpha	SkBitmap.h	/^    bool extractAlpha(SkBitmap* dst) const {$/;"	f	class:SkBitmap
extractAlpha	SkBitmap.h	/^    bool extractAlpha(SkBitmap* dst, const SkPaint* paint,$/;"	f	class:SkBitmap
extractAlpha	core/SkBitmap.h	/^    bool extractAlpha(SkBitmap* dst) const {$/;"	f	class:SkBitmap
extractAlpha	core/SkBitmap.h	/^    bool extractAlpha(SkBitmap* dst, const SkPaint* paint,$/;"	f	class:SkBitmap
extractMipLevel	SkBitmap.cpp	/^int SkBitmap::extractMipLevel(SkBitmap* dst, SkFixed sx, SkFixed sy) {$/;"	f	class:SkBitmap
extractSubset	SkBitmap.cpp	/^bool SkBitmap::extractSubset(SkBitmap* result, const SkIRect& subset) const {$/;"	f	class:SkBitmap
f16BitCache	SkBitmap.h	/^    uint16_t*   f16BitCache;$/;"	m	class:SkColorTable
f16BitCache	core/SkBitmap.h	/^    uint16_t*   f16BitCache;$/;"	m	class:SkColorTable
f32	views/SkEvent.h	/^    uint32_t        f32;$/;"	m	class:SkEvent
fAAFillRectIndexBuffer	gpu/GrContext.h	/^    GrIndexBuffer*              fAAFillRectIndexBuffer;$/;"	m	class:GrContext
fAAStrokeRectIndexBuffer	gpu/GrContext.h	/^    GrIndexBuffer*              fAAStrokeRectIndexBuffer;$/;"	m	class:GrContext
fActive	views/SkTouchGesture.h	/^    bool        fActive;$/;"	m	struct:SkFlingState
fActiveTexture	gpu/GrGLInterface.h	/^    GrGLActiveTextureProc fActiveTexture;$/;"	m	struct:GrGLInterface
fAddr	core/SkMMapStream.h	/^    void*   fAddr;$/;"	m	class:SkMMAPStream
fAdvance	core/SkAdvancedTypefaceMetrics.h	/^        SkTDArray<Data> fAdvance;$/;"	m	struct:SkAdvancedTypefaceMetrics::AdvanceMetric
fAdvance	effects/Sk1DPathEffect.h	/^    SkScalar    fAdvance;       \/\/ copied from constructor$/;"	m	class:SkPath1DPathEffect
fAdvanceX	core/SkScalerContext.h	/^    SkFixed     fAdvanceX, fAdvanceY;$/;"	m	struct:SkGlyph
fAdvanceY	core/SkScalerContext.h	/^    SkFixed     fAdvanceX, fAdvanceY;$/;"	m	struct:SkGlyph
fAlign	views/SkStackViewLayout.h	/^    uint8_t     fOrient, fPack, fAlign, fRound;$/;"	m	class:SkStackViewLayout
fAlloc	xml/SkDOM.h	/^    SkChunkAlloc    fAlloc;$/;"	m	class:SkDOM
fAllocCount	core/SkTArray.h	/^    int fAllocCount;$/;"	m	class:SkTArray
fAllocator	images/SkImageDecoder.h	/^    SkBitmap::Allocator*    fAllocator;$/;"	m	class:SkImageDecoder
fAlpha	effects/SkTransparentShader.h	/^    uint8_t         fAlpha;$/;"	m	class:SkTransparentShader
fAmbient	effects/SkEmbossMaskFilter.h	/^        uint8_t     fAmbient;$/;"	m	struct:SkEmbossMaskFilter::Light
fAnim	views/SkBorderView.h	/^    SkAnimator fAnim;$/;"	m	class:SkBorderView
fAnim	views/SkImageView.h	/^        SkAnimator* fAnim;$/;"	m	union:SkImageView::__anon43
fAnim	views/SkProgressBarView.h	/^        SkAnimator  fAnim;$/;"	m	class:SkProgressBarView
fAnim	views/SkScrollBarView.h	/^    SkAnimator  fAnim;$/;"	m	class:SkScrollBarView
fAnimContentDirty	views/SkWidgetViews.h	/^    SkBool8         fAnimContentDirty;$/;"	m	class:SkListView
fAnimFocusDirty	views/SkWidgetViews.h	/^    SkBool8         fAnimFocusDirty;$/;"	m	class:SkListView
fAnimator	animator/SkAnimatorView.h	/^    SkAnimator* fAnimator;$/;"	m	class:SkAnimatorView
fAnims	views/SkWidgetViews.h	/^    SkAnimator*     fAnims;$/;"	m	class:SkListView
fAntiAlias	gpu/GrPaint.h	/^    bool                        fAntiAlias;$/;"	m	class:GrPaint
fArray	core/SkTDArray.h	/^    T*      fArray;$/;"	m	class:SkTDArray
fArray	core/SkTDict.h	/^    SkTDArray<Pair> fArray;$/;"	m	class:SkTDict
fArray	core/SkTemplates.h	/^    T*      fArray;$/;"	m	class:SkAutoSTArray
fArray	core/SkTemplates.h	/^    T*  fArray;$/;"	m	class:SkAutoTArray
fArray	core/SkTemplates.h	/^    T*  fArray;$/;"	m	class:SkAutoTDeleteArray
fArray	effects/SkColorMatrixFilter.h	/^        int32_t fArray[20];$/;"	m	struct:SkColorMatrixFilter::State
fArray	utils/SkJSON.h	/^        } fArray;$/;"	m	class:SkJSON::Array	typeref:union:SkJSON::Array::__anon42
fArrays	utils/SkJSON.h	/^            Array**  fArrays;$/;"	m	union:SkJSON::Array::__anon42
fAsQuad	utils/SkCullPoints.h	/^    SkIPoint     fAsQuad[4];     \/\/ cache of fR as 4 points$/;"	m	class:SkCullPoints
fAscent	core/SkAdvancedTypefaceMetrics.h	/^    int16_t fAscent;       \/\/ Max height above baseline, not including accents.$/;"	m	class:SkAdvancedTypefaceMetrics
fAscent	core/SkPaint.h	/^        SkScalar    fAscent;    \/\/!< The recommended distance above the baseline (will be <= 0)$/;"	m	struct:SkPaint::FontMetrics
fAtlas	gpu/GrGlyph.h	/^    GrAtlas*    fAtlas;$/;"	m	struct:GrGlyph
fAtlasLocation	gpu/GrGlyph.h	/^    GrIPoint16  fAtlasLocation;$/;"	m	struct:GrGlyph
fAttachShader	gpu/GrGLInterface.h	/^    GrGLAttachShaderProc fAttachShader;$/;"	m	struct:GrGLInterface
fAttached	views/SkOSWindow_Win.h	/^    SkBackEndTypes      fAttached;$/;"	m	class:SkOSWindow
fAttr	xml/SkDOM.h	/^        const Attr* fAttr;$/;"	m	class:SkDOM::AttrIter
fAttrNames	xml/SkBML_WXMLParser.h	/^    char*       fAttrNames[256];$/;"	m	class:BML_WXMLParser
fAttrValues	xml/SkBML_WXMLParser.h	/^    char*       fAttrValues[256];$/;"	m	class:BML_WXMLParser
fAttrsCount	xml/SkBML_WXMLParser.h	/^    int fAttrsCount, fNamesReused, fValuesReused;$/;"	m	class:BML_WXMLParser
fAutoKern	core/SkDraw.h	/^    SkAutoKern      fAutoKern;$/;"	m	class:SkTextToPathIter
fAvgCharWidth	core/SkPaint.h	/^        SkScalar    fAvgCharWidth;  \/\/!< the average charactor width (>= 0)$/;"	m	struct:SkPaint::FontMetrics
fAxis	utils/SkCamera.h	/^    SkPoint3D   fAxis;$/;"	m	class:SkCamera3D
fBBox	core/SkAdvancedTypefaceMetrics.h	/^    SkIRect fBBox;  \/\/ The bounding box of all glyphs (in font units).$/;"	m	class:SkAdvancedTypefaceMetrics
fBack	core/SkDeque.h	/^    Head*   fBack;$/;"	m	class:SkDeque
fBase	core/SkReader32.h	/^    const char* fBase;  \/\/ beginning of buffer$/;"	m	class:SkReader32
fBaseGlyphCount	core/SkScalerContext.h	/^    unsigned    fBaseGlyphCount;$/;"	m	class:SkScalerContext
fBeginQuery	gpu/GrGLInterface.h	/^    GrGLBeginQueryProc fBeginQuery;$/;"	m	struct:GrGLInterface
fBeginningOfData	core/SkString.h	/^        char        fBeginningOfData;$/;"	m	struct:SkString::Rec
fBindAttribLocation	gpu/GrGLInterface.h	/^    GrGLBindAttribLocationProc fBindAttribLocation;$/;"	m	struct:GrGLInterface
fBindBuffer	gpu/GrGLInterface.h	/^    GrGLBindBufferProc fBindBuffer;$/;"	m	struct:GrGLInterface
fBindFragDataLocation	gpu/GrGLInterface.h	/^    GrGLBindFragDataLocationProc fBindFragDataLocation;$/;"	m	struct:GrGLInterface
fBindFragDataLocationIndexed	gpu/GrGLInterface.h	/^    GrGLBindFragDataLocationIndexedProc fBindFragDataLocationIndexed;$/;"	m	struct:GrGLInterface
fBindFramebuffer	gpu/GrGLInterface.h	/^    GrGLBindFramebufferProc fBindFramebuffer;$/;"	m	struct:GrGLInterface
fBindRenderbuffer	gpu/GrGLInterface.h	/^    GrGLBindRenderbufferProc fBindRenderbuffer;$/;"	m	struct:GrGLInterface
fBindTexture	gpu/GrGLInterface.h	/^    GrGLBindTextureProc fBindTexture;$/;"	m	struct:GrGLInterface
fBindingCount	views/SkWidgetViews.h	/^    uint16_t        fVisibleRowCount, fBindingCount;$/;"	m	class:SkListView
fBindings	views/SkWidgetViews.h	/^    BindingRec*     fBindings;$/;"	m	class:SkListView
fBindingsExported	gpu/GrGLInterface.h	/^    GrGLBinding fBindingsExported;$/;"	m	struct:GrGLInterface
fBitCount	pdf/SkBitSet.h	/^    size_t fBitCount;$/;"	m	class:SkBitSet
fBitData	pdf/SkBitSet.h	/^    SkAutoFree fBitData;$/;"	m	class:SkBitSet
fBitSet	pdf/SkPDFFont.h	/^    SkBitSet fBitSet;$/;"	m	class:SkPDFGlyphSet
fBitmap	SkBitmap.h	/^    const SkBitmap& fBitmap;$/;"	m	class:SkAutoLockPixels
fBitmap	core/SkBitmap.h	/^    const SkBitmap& fBitmap;$/;"	m	class:SkAutoLockPixels
fBitmap	core/SkDevice.h	/^    SkBitmap    fBitmap;$/;"	m	class:SkDevice
fBitmap	core/SkDraw.h	/^    const SkBitmap* fBitmap;        \/\/ required$/;"	m	class:SkDraw
fBitmap	gpu/SkGrTexturePixelRef.h	/^    SkBitmap    fBitmap;$/;"	m	class:SkROLockPixelsPixelRef
fBitmap	images/SkFlipPixelRef.h	/^    SkBitmap        fBitmap;$/;"	m	class:SkAutoFlipUpdate
fBitmap	images/SkImageRef.h	/^    SkBitmap fBitmap;$/;"	m	class:SkImageRef
fBitmap	images/SkMovie.h	/^    SkBitmap    fBitmap;$/;"	m	class:SkMovie
fBitmap	views/SkImageView.h	/^        SkBitmap* fBitmap;$/;"	m	union:SkImageView::__anon43
fBitmap	views/SkWidget.h	/^    SkBitmap    fBitmap;$/;"	m	class:SkBitmapView
fBitmap	views/SkWindow.h	/^    SkBitmap    fBitmap;$/;"	m	class:SkWindow
fBlend	utils/SkInterpolator.h	/^        SkScalar fBlend[4];$/;"	m	struct:SkInterpolatorBase::SkTimeCode
fBlendColor	gpu/GrGLInterface.h	/^    GrGLBlendColorProc fBlendColor;$/;"	m	struct:GrGLInterface
fBlendFunc	gpu/GrGLInterface.h	/^    GrGLBlendFuncProc fBlendFunc;$/;"	m	struct:GrGLInterface
fBlitFramebuffer	gpu/GrGLInterface.h	/^    GrGLBlitFramebufferProc fBlitFramebuffer;$/;"	m	struct:GrGLInterface
fBlitter	core/SkBlitter.h	/^    SkBlitter*      fBlitter;$/;"	m	class:SkRgnClipBlitter
fBlitter	core/SkBlitter.h	/^    SkBlitter*  fBlitter;$/;"	m	class:SkRectClipBlitter
fBlock	core/SkChunkAlloc.h	/^    Block*  fBlock;$/;"	m	class:SkChunkAlloc
fBlockCount	core/SkChunkAlloc.h	/^    int     fBlockCount;$/;"	m	class:SkChunkAlloc
fBlur	effects/SkBlurDrawLooper.h	/^    SkMaskFilter*   fBlur;$/;"	m	class:SkBlurDrawLooper
fBlurColor	effects/SkBlurDrawLooper.h	/^    SkColor         fBlurColor;$/;"	m	class:SkBlurDrawLooper
fBlurFlags	effects/SkBlurDrawLooper.h	/^    uint32_t        fBlurFlags;  $/;"	m	class:SkBlurDrawLooper
fBlurRadius	effects/SkEmbossMaskFilter.h	/^    SkScalar    fBlurRadius;$/;"	m	class:SkEmbossMaskFilter
fBools	utils/SkJSON.h	/^            bool*    fBools;$/;"	m	union:SkJSON::Array::__anon42
fBottom	SkRect.h	/^    SkScalar    fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkRect
fBottom	SkRect.h	/^    int32_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkIRect
fBottom	core/SkPaint.h	/^        SkScalar    fBottom;    \/\/!< The greatest distance below the baseline for any glyph (will be >= 0)$/;"	m	struct:SkPaint::FontMetrics
fBottom	core/SkRect.h	/^    SkScalar    fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkRect
fBottom	core/SkRect.h	/^    int32_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkIRect
fBottom	gpu/GrRect.h	/^    int16_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:GrIRect16
fBottom	views/SkBorderView.h	/^    SkScalar fLeft, fRight, fTop, fBottom;  \/\/margin on each side$/;"	m	class:SkBorderView
fBoundary	utils/SkBoundaryPatch.h	/^    SkBoundary* fBoundary;$/;"	m	class:SkBoundaryPatch
fBounder	core/SkCanvas.h	/^    SkBounder*  fBounder;$/;"	m	class:SkCanvas
fBounder	core/SkDraw.h	/^    SkBounder*      fBounder;       \/\/ optional$/;"	m	class:SkDraw
fBounds	core/SkMask.h	/^    SkIRect     fBounds;$/;"	m	struct:SkMask
fBounds	core/SkPath.h	/^    mutable SkRect      fBounds;$/;"	m	class:SkPath
fBounds	core/SkRegion.h	/^    SkIRect     fBounds;$/;"	m	class:SkRegion
fBounds	effects/SkRectShape.h	/^    SkRect  fBounds;$/;"	m	class:SkRectShape
fBounds	gpu/GrGlyph.h	/^    GrIRect16   fBounds;$/;"	m	struct:GrGlyph
fBounds	text/SkTextLayout.h	/^    SkRect          fBounds;$/;"	m	class:SkTextLayout
fBoundsIsDirty	core/SkPath.h	/^    mutable uint8_t     fBoundsIsDirty;$/;"	m	class:SkPath
fBox	utils/SkTextBox.h	/^    SkRect      fBox;$/;"	m	class:SkTextBox
fBox	views/SkTextBox.h	/^    SkRect      fBox;$/;"	m	class:SkTextBox
fBroadcastTo	views/SkViewInflate.h	/^    SkTDArray<IDStr>    fListenTo, fBroadcastTo;$/;"	m	class:SkViewInflate
fBuffer	core/SkStream.h	/^    char*       fBuffer;$/;"	m	class:SkBufferStream
fBuffer	core/SkStream.h	/^    char*   fBuffer;$/;"	m	class:SkMemoryWStream
fBuffer	images/SkJpegUtility.h	/^    char    fBuffer[kBufferSize];$/;"	m	struct:skjpeg_source_mgr
fBuffer	images/SkJpegUtility.h	/^    uint8_t fBuffer[kBufferSize];$/;"	m	struct:skjpeg_destination_mgr
fBufferData	gpu/GrGLInterface.h	/^    GrGLBufferDataProc fBufferData;$/;"	m	struct:GrGLInterface
fBufferOffset	core/SkStream.h	/^    size_t      fOrigBufferSize, fBufferSize, fBufferOffset;$/;"	m	class:SkBufferStream
fBufferSize	core/SkStream.h	/^    size_t      fOrigBufferSize, fBufferSize, fBufferOffset;$/;"	m	class:SkBufferStream
fBufferSubData	gpu/GrGLInterface.h	/^    GrGLBufferSubDataProc fBufferSubData;$/;"	m	struct:GrGLInterface
fBytesAllocated	core/SkUtils.h	/^    size_t      fBytesAllocated;$/;"	m	class:SkAutoMemoryUsageProbe
fBytesPerPixel	SkBitmap.h	/^    uint8_t     fBytesPerPixel; \/\/ based on config$/;"	m	class:SkBitmap
fBytesPerPixel	core/SkBitmap.h	/^    uint8_t     fBytesPerPixel; \/\/ based on config$/;"	m	class:SkBitmap
fBytesWritten	core/SkStream.h	/^    size_t  fBytesWritten;$/;"	m	class:SkDynamicMemoryWStream
fBytesWritten	core/SkStream.h	/^    size_t  fBytesWritten;$/;"	m	class:SkMemoryWStream
fCP	utils/SkCullPoints.h	/^    SkCullPoints    fCP;$/;"	m	class:SkCullPointsPath
fCTable	SkBitmap.h	/^    SkColorTable*    fCTable;$/;"	m	class:SkAutoLockColors
fCTable	core/SkBitmap.h	/^    SkColorTable*    fCTable;$/;"	m	class:SkAutoLockColors
fCTable	core/SkMallocPixelRef.h	/^    SkColorTable*   fCTable;$/;"	m	class:SkMallocPixelRef
fCache	core/SkDraw.h	/^    SkGlyphCache*   fCache;$/;"	m	class:SkTextToPathIter
fCache	gpu/SkGpuDevice.h	/^    TexCache            fCache;$/;"	m	class:SkGpuDevice
fCallback	gpu/GrGLInterface.h	/^    GrGLInterfaceCallbackProc fCallback;$/;"	m	struct:GrGLInterface
fCallbackData	gpu/GrGLInterface.h	/^    GrGLInterfaceCallbackData fCallbackData;$/;"	m	struct:GrGLInterface
fCamera	utils/SkCamera.h	/^    SkCamera3D  fCamera;$/;"	m	class:Sk3DView
fCanvas	core/SkCanvas.h	/^        const SkCanvas* fCanvas;$/;"	m	class:SkCanvas::AutoValidateClip
fCanvas	core/SkCanvas.h	/^    SkCanvas*   fCanvas;$/;"	m	class:SkAutoCanvasRestore
fCanvas	core/SkPicture.h	/^    SkCanvas*   fCanvas;$/;"	m	class:SkAutoPictureRecord
fCanvas	pipe/SkGPipe.h	/^    SkCanvas*           fCanvas;$/;"	m	class:SkGPipeReader
fCanvas	pipe/SkGPipe.h	/^    class SkGPipeCanvas* fCanvas;$/;"	m	class:SkGPipeWriter	typeref:class:SkGPipeWriter::SkGPipeCanvas
fCap	core/SkStroke.h	/^    uint8_t     fCap, fJoin;$/;"	m	class:SkStroke
fCapHeight	core/SkAdvancedTypefaceMetrics.h	/^    int16_t fCapHeight;    \/\/ Height (from baseline) of top of flat capitals.$/;"	m	class:SkAdvancedTypefaceMetrics
fCatalog	pdf/SkPDFCatalog.h	/^    SkTDArray<struct Rec> fCatalog;$/;"	m	class:SkPDFCatalog
fCatalog	pdf/SkPDFDocument.h	/^    SkTScopedPtr<SkPDFCatalog> fCatalog;$/;"	m	class:SkPDFDocument
fCellSize	views/SkWidget.h	/^    SkPoint         fCellSize;$/;"	m	class:SkGridView
fChain	core/SkTRegistry.h	/^    SkTRegistry* fChain;$/;"	m	class:SkTRegistry
fCheckFramebufferStatus	gpu/GrGLInterface.h	/^    GrGLCheckFramebufferStatusProc fCheckFramebufferStatus;$/;"	m	struct:GrGLInterface
fCheckState	views/SkWidgetViews.h	/^    uint8_t  fCheckState;$/;"	m	class:SkCheckButtonView
fCheckSumAdjustment	utils/SkSfntUtils.h	/^    uint32_t    fCheckSumAdjustment;$/;"	m	struct:SkSfntTable_head
fChecksum	core/SkDescriptor.h	/^    uint32_t fChecksum;  \/\/ must be first$/;"	m	class:SkDescriptor
fChild	views/SkView.h	/^        SkView* fFirstChild, *fChild;$/;"	m	class:SkView::B2FIter
fChild	views/SkView.h	/^        SkView* fFirstChild, *fChild;$/;"	m	class:SkView::F2BIter
fChildren	svg/SkSVGParser.h	/^    SkTDArray<SkSVGElement*> fChildren;$/;"	m	class:SkSVGParser
fChildrenMatrix	utils/SkLayer.h	/^    SkMatrix    fChildrenMatrix;$/;"	m	class:SkLayer
fChoosePixelFormat	utils/SkWGL.h	/^    ChoosePixelFormatProc fChoosePixelFormat;$/;"	m	class:SkWGLExtensions
fChooser	images/SkImageDecoder.h	/^    Chooser*                fChooser;$/;"	m	class:SkImageDecoder
fChunkSize	core/SkChunkAlloc.h	/^    size_t  fChunkSize;$/;"	m	class:SkChunkAlloc
fClear	gpu/GrGLInterface.h	/^    GrGLClearProc fClear;$/;"	m	struct:GrGLInterface
fClearColor	gpu/GrGLInterface.h	/^    GrGLClearColorProc fClearColor;$/;"	m	struct:GrGLInterface
fClearFlags	effects/SkPaintFlagsDrawFilter.h	/^    uint16_t    fClearFlags;    \/\/ user specified$/;"	m	class:SkPaintFlagsDrawFilter
fClearStencil	gpu/GrGLInterface.h	/^    GrGLClearStencilProc fClearStencil;$/;"	m	struct:GrGLInterface
fClicks	views/SkWindow.h	/^    SkTDArray<Click*>       fClicks; \/\/ to track clicks$/;"	m	class:SkWindow
fClip	core/SkBounder.h	/^    const SkRegion* fClip;$/;"	m	class:SkBounder
fClip	core/SkClipStack.h	/^        Clip             fClip;$/;"	m	class:SkClipStack::B2FIter
fClip	core/SkDraw.h	/^    const SkRegion* fClip;          \/\/ DEPRECATED$/;"	m	class:SkDraw
fClip	core/SkRegion.h	/^        SkIRect     fClip;$/;"	m	class:SkRegion::Cliperator
fClipRect	core/SkBlitter.h	/^    SkIRect     fClipRect;$/;"	m	class:SkRectClipBlitter
fClipStack	core/SkCanvas.h	/^    SkClipStack fClipStack;$/;"	m	class:SkCanvas
fClipStack	core/SkDraw.h	/^    const SkClipStack* fClipStack;  \/\/ optional$/;"	m	class:SkDraw
fClipStack	gpu/SkGr.h	/^    const SkClipStack*                  fClipStack;$/;"	m	class:SkGrClipIterator
fCloseLine	core/SkPath.h	/^        SkBool8         fCloseLine;$/;"	m	class:SkPath::Iter
fCloseWhenDone	core/SkStream.h	/^    bool    fCloseWhenDone;$/;"	m	class:SkFDStream
fCode	xml/SkXMLParser.h	/^    ErrorCode fCode;$/;"	m	class:SkXMLParserError
fColor	core/SkColorShader.h	/^    SkColor     fColor;         \/\/ ignored if fInheritColor is true$/;"	m	class:SkColorShader
fColor	core/SkPaint.h	/^    SkColor         fColor;$/;"	m	class:SkPaint
fColor	gpu/GrPaint.h	/^    GrColor                     fColor;$/;"	m	class:GrPaint
fColor16	core/SkColorShader.h	/^    uint16_t    fColor16;       \/\/ cached after setContext()$/;"	m	class:SkColorShader
fColorCount	core/SkShader.h	/^        int         fColorCount;    \/\/!< In-out parameter, specifies passed size$/;"	m	struct:SkShader::GradientInfo
fColorFilter	core/SkPaint.h	/^    SkColorFilter*  fColorFilter;$/;"	m	class:SkPaint
fColorFilter	effects/SkBlurDrawLooper.h	/^    SkColorFilter*  fColorFilter;$/;"	m	class:SkBlurDrawLooper
fColorFilter	effects/SkTestImageFilters.h	/^    SkColorFilter*  fColorFilter;$/;"	m	class:SkColorFilterImageFilter
fColorFilterColor	gpu/GrPaint.h	/^    GrColor                     fColorFilterColor;$/;"	m	class:GrPaint
fColorFilterXfermode	gpu/GrPaint.h	/^    SkXfermode::Mode            fColorFilterXfermode;$/;"	m	class:GrPaint
fColorMask	gpu/GrGLInterface.h	/^    GrGLColorMaskProc fColorMask;$/;"	m	struct:GrGLInterface
fColorMatrix	gpu/GrPaint.h	/^    float                       fColorMatrix[20];$/;"	m	class:GrPaint
fColorMatrixEnabled	gpu/GrPaint.h	/^    bool                        fColorMatrixEnabled;$/;"	m	class:GrPaint
fColorMode	effects/SkLayerDrawLooper.h	/^        SkXfermode::Mode    fColorMode;$/;"	m	struct:SkLayerDrawLooper::LayerInfo
fColorOffsets	core/SkShader.h	/^        SkScalar*   fColorOffsets;  \/\/!< The unit offset for color transitions.$/;"	m	struct:SkShader::GradientInfo
fColorPointer	gpu/GrGLInterface.h	/^    GrGLColorPointerProc fColorPointer;$/;"	m	struct:GrGLInterface
fColorTable	SkBitmap.h	/^    mutable SkColorTable* fColorTable;    \/\/ only meaningful for kIndex8$/;"	m	class:SkBitmap
fColorTable	core/SkBitmap.h	/^    mutable SkColorTable* fColorTable;    \/\/ only meaningful for kIndex8$/;"	m	class:SkBitmap
fColorTable	core/SkPixelRef.h	/^    SkColorTable*   fColorTable;    \/\/ we do not track ownership, subclass does$/;"	m	class:SkPixelRef
fColors	SkBitmap.h	/^    SkPMColor*  fColors;$/;"	m	class:SkColorTable
fColors	SkBitmap.h	/^    const SkPMColor* fColors;$/;"	m	class:SkAutoLockColors
fColors	core/SkBitmap.h	/^    SkPMColor*  fColors;$/;"	m	class:SkColorTable
fColors	core/SkBitmap.h	/^    const SkPMColor* fColors;$/;"	m	class:SkAutoLockColors
fColors	core/SkShader.h	/^        SkColor*    fColors;        \/\/!< The colors in the gradient.$/;"	m	struct:SkShader::GradientInfo
fCompileShader	gpu/GrGLInterface.h	/^    GrGLCompileShaderProc fCompileShader;$/;"	m	struct:GrGLInterface
fCompressedTexImage2D	gpu/GrGLInterface.h	/^    GrGLCompressedTexImage2DProc fCompressedTexImage2D;$/;"	m	struct:GrGLInterface
fConfig	SkBitmap.h	/^    uint8_t     fConfig;$/;"	m	class:SkBitmap
fConfig	core/SkBitmap.h	/^    uint8_t     fConfig;$/;"	m	class:SkBitmap
fConfig	gpu/GrRenderTarget.h	/^    GrPixelConfig     fConfig;$/;"	m	class:GrRenderTarget
fConfig	gpu/GrTexture.h	/^    GrPixelConfig fConfig;$/;"	m	class:GrTexture
fConfig	gpu/GrTypes.h	/^    GrPixelConfig                   fConfig;        \/\/<! color format$/;"	m	struct:GrPlatformRenderTargetDesc
fConfig	gpu/GrTypes.h	/^    GrPixelConfig                   fConfig;        \/\/<! color format$/;"	m	struct:GrPlatformTextureDesc
fConfig	gpu/GrTypes.h	/^    GrPixelConfig          fConfig;$/;"	m	struct:GrTextureDesc
fConfig	images/SkFlipPixelRef.h	/^    SkBitmap::Config fConfig;$/;"	m	class:SkFlipPixelRef
fConfig	images/SkImageRef.h	/^    SkBitmap::Config        fConfig;$/;"	m	class:SkImageRef
fConfig	views/SkWindow.h	/^    SkBitmap::Config    fConfig;$/;"	m	class:SkWindow
fConnection	ports/SkStream_Win.h	/^    HINTERNET fConnection;$/;"	m	class:SkURLStream
fConservativeBounds	gpu/GrClip.h	/^    GrRect              fConservativeBounds;$/;"	m	class:GrClip
fConservativeBoundsValid	gpu/GrClip.h	/^    bool                fConservativeBoundsValid;$/;"	m	class:GrClip
fContainsFocus	views/SkView.h	/^    uint8_t     fContainsFocus;$/;"	m	class:SkView
fContentEntries	pdf/SkPDFDevice.h	/^    SkTScopedPtr<ContentEntry> fContentEntries;$/;"	m	class:SkPDFDevice
fContentSize	pdf/SkPDFDevice.h	/^    SkISize fContentSize;$/;"	m	class:SkPDFDevice
fContentStream	pdf/SkPDFPage.h	/^    SkRefPtr<SkPDFStream> fContentStream;$/;"	m	class:SkPDFPage
fContext	gpu/GrContext.h	/^        GrContext*      fContext;$/;"	m	class:GrContext::AutoRenderTarget
fContext	gpu/GrContext.h	/^    GrContext*                    fContext;$/;"	m	class:GrAutoScratchTexture
fContext	gpu/GrContext.h	/^    GrContext*  fContext;$/;"	m	class:GrAutoMatrix
fContext	gpu/GrTextContext.h	/^    GrContext*      fContext;$/;"	m	class:GrTextContext
fContext	gpu/SkGpuCanvas.h	/^    GrContext* fContext;$/;"	m	class:SkGpuCanvas
fContext	gpu/SkGpuDevice.h	/^    GrContext*      fContext;$/;"	m	class:SkGpuDevice
fContext	gpu/SkMesaGLContext.h	/^    Context fContext;$/;"	m	class:SkMesaGLContext
fContext	gpu/SkNativeGLContext.h	/^    AGLContext fContext;$/;"	m	class:SkNativeGLContext
fContext	gpu/SkNativeGLContext.h	/^    EGLContext fContext;$/;"	m	class:SkNativeGLContext
fContext	gpu/SkNativeGLContext.h	/^    GLXContext fContext;$/;"	m	class:SkNativeGLContext
fContext	views/SkOSWindow_Win.h	/^    EGLContext          fContext;$/;"	m	class:SkOSWindow
fContext	xml/SkJS.h	/^    JSContext *fContext;$/;"	m	class:SkJS
fContexts	gpu/GrContextFactory.h	/^    SkTArray<GPUContext, true> fContexts;$/;"	m	class:GrContextFactory
fContrastScale	core/SkDeviceProfile.h	/^    float           fContrastScale;$/;"	m	class:SkDeviceProfile
fController	pipe/SkGPipe.h	/^    SkGPipeController*   fController;$/;"	m	class:SkGPipeWriter
fConvexity	core/SkPath.h	/^    mutable uint8_t     fConvexity;$/;"	m	class:SkPath
fCopy	core/SkStream.h	/^    mutable SkData* fCopy;  \/\/ is invalidated if we write after it is created$/;"	m	class:SkDynamicMemoryWStream
fCount	SkBitmap.h	/^    uint16_t    fCount;$/;"	m	class:SkColorTable
fCount	core/SkBitmap.h	/^    uint16_t    fCount;$/;"	m	class:SkColorTable
fCount	core/SkDeque.h	/^    int     fCount;$/;"	m	class:SkDeque
fCount	core/SkDescriptor.h	/^    uint32_t fCount;$/;"	m	class:SkDescriptor
fCount	core/SkPerspIter.h	/^    int             fCount;$/;"	m	class:SkPerspIter
fCount	core/SkString.h	/^    int         fCount;$/;"	m	class:SkAutoUCS2
fCount	core/SkTArray.h	/^    int fCount;$/;"	m	class:SkTArray
fCount	core/SkTDArray.h	/^    size_t  fReserve, fCount;$/;"	m	class:SkTDArray
fCount	core/SkTDStack.h	/^    int     fCount, fTotalCount;$/;"	m	class:SkTDStack
fCount	core/SkTemplates.h	/^    size_t  fCount;$/;"	m	class:SkAutoSTArray
fCount	effects/SkDashPathEffect.h	/^    int32_t     fCount;$/;"	m	class:SkDashPathEffect
fCount	effects/SkLayerDrawLooper.h	/^    int     fCount;$/;"	m	class:SkLayerDrawLooper
fCount	effects/SkTestImageFilters.h	/^    int                 fCount;$/;"	m	class:SkMergeImageFilter
fCount	utils/SkJSON.h	/^        int fCount;$/;"	m	class:SkJSON::Array
fCount0	core/SkClampRange.h	/^    int fCount0;    \/\/ count for fV0$/;"	m	struct:SkClampRange
fCount1	core/SkClampRange.h	/^    int fCount1;    \/\/ count for interpolating (fV0...fV1)$/;"	m	struct:SkClampRange
fCount2	core/SkClampRange.h	/^    int fCount2;    \/\/ count for fV1$/;"	m	struct:SkClampRange
fCoverage	gpu/GrPaint.h	/^    uint8_t                     fCoverage;$/;"	m	class:GrPaint
fCreateContextAttribs	utils/SkWGL.h	/^    CreateContextAttribsProc fCreateContextAttribs;$/;"	m	class:SkWGLExtensions
fCreateProgram	gpu/GrGLInterface.h	/^    GrGLCreateProgramProc fCreateProgram;$/;"	m	struct:GrGLInterface
fCreateShader	gpu/GrGLInterface.h	/^    GrGLCreateShaderProc fCreateShader;$/;"	m	struct:GrGLInterface
fCullFace	gpu/GrGLInterface.h	/^    GrGLCullFaceProc fCullFace;$/;"	m	struct:GrGLInterface
fCurr	core/SkReader32.h	/^    const char* fCurr;  \/\/ current position within buffer$/;"	m	class:SkReader32
fCurr	gpu/SkGr.h	/^    const SkClipStack::B2FIter::Clip*   fCurr;$/;"	m	class:SkGrClipIterator
fCurr	views/SkView.h	/^        SkPoint     fOrig, fPrev, fCurr;$/;"	m	class:SkView::Click
fCurrElement	svg/SkSVGParser.h	/^    SkSVGElement*   fCurrElement;$/;"	m	class:SkSVGParser
fCurrIndex	views/SkWidget.h	/^    int             fCurrIndex;     \/\/ logical index$/;"	m	class:SkGridView
fCurrIndex	views/SkWidget.h	/^    int             fCurrIndex;     \/\/ logical index$/;"	m	class:SkListView
fCurrIndex	views/SkWidgetViews.h	/^    int16_t         fScrollIndex, fCurrIndex;$/;"	m	class:SkListView
fCurrPoint	core/SkEdgeClipper.h	/^    SkPoint*        fCurrPoint;$/;"	m	class:SkEdgeClipper
fCurrRec	effects/SkLayerDrawLooper.h	/^    Rec* fCurrRec;$/;"	m	class:SkLayerDrawLooper
fCurrStageClassID	gpu/GrProgramStageFactory.h	/^    static int32_t fCurrStageClassID;$/;"	m	class:GrProgramStageFactory
fCurrTime	images/SkMovie.h	/^    SkMSec      fCurrTime;$/;"	m	class:SkMovie
fCurrVerb	core/SkEdgeClipper.h	/^    SkPath::Verb*   fCurrVerb;$/;"	m	class:SkEdgeClipper
fCustomStage	gpu/GrSamplerState.h	/^    GrCustomStage*      fCustomStage;$/;"	m	class:GrSamplerState
fDIR	core/SkOSFile.h	/^        DIR*        fDIR;$/;"	m	class:SkOSFile::Iter
fData	core/SkBuffer.h	/^    char* fData;$/;"	m	class:SkWBuffer
fData	core/SkBuffer.h	/^    const char* fData;$/;"	m	class:SkRBuffer
fData	core/SkData.h	/^    const void* fData;$/;"	m	class:SkAutoDataUnref
fData	core/SkStream.h	/^    SkData* fData;$/;"	m	class:SkMemoryStream
fData	core/SkTDArray.h	/^    ArrayT* fData;$/;"	m	class:SkTDArray
fData	core/SkTemplates.h	/^        char    fData[N];$/;"	m	union:SkAlignedSStorage::__anon24
fData	pdf/SkPDFStream.h	/^    SkRefPtr<SkStream> fData;$/;"	m	class:SkPDFStream
fData	utils/SkMatrix44.h	/^    SkScalar fData[4];$/;"	m	struct:SkVector4
fData	views/SkImageView.h	/^    } fData;$/;"	m	class:SkImageView	typeref:union:SkImageView::__anon43
fDataCount	core/SkMetaData.h	/^        uint16_t    fDataCount; \/\/ number of elements$/;"	m	struct:SkMetaData::Rec
fDataIsAnim	views/SkImageView.h	/^    SkBool8     fDataIsAnim;    \/\/ as opposed to bitmap$/;"	m	class:SkImageView
fDataLen	core/SkMetaData.h	/^        uint8_t     fDataLen;   \/\/ sizeof a single element$/;"	m	struct:SkMetaData::Rec
fDateCreated	utils/SkSfntUtils.h	/^    Sk64        fDateCreated;$/;"	m	struct:SkSfntTable_head
fDateModified	utils/SkSfntUtils.h	/^    Sk64        fDateModified;$/;"	m	struct:SkSfntTable_head
fDay	core/SkTime.h	/^        uint8_t  fDay;           \/\/!< 1..31$/;"	m	struct:SkTime::DateTime
fDayOfWeek	core/SkTime.h	/^        uint8_t  fDayOfWeek;     \/\/!< 0..6, 0==Sunday$/;"	m	struct:SkTime::DateTime
fDecoder	images/SkJpegUtility.h	/^    SkImageDecoder* fDecoder;$/;"	m	struct:skjpeg_source_mgr
fDefaultPaint	core/SkCanvas.h	/^        SkPaint           fDefaultPaint;$/;"	m	class:SkCanvas::LayerIter
fDefaultPref	images/SkImageDecoder.h	/^    SkBitmap::Config        fDefaultPref;   \/\/ use if fUsePrefTable is false$/;"	m	class:SkImageDecoder
fDefaultStyle	text/SkTextLayout.h	/^    SkTextStyle*    fDefaultStyle;$/;"	m	class:SkTextLayout
fDeferredDrawing	utils/SkDeferredCanvas.h	/^    bool            fDeferredDrawing;$/;"	m	class:SkDeferredCanvas
fDeleteBuffers	gpu/GrGLInterface.h	/^    GrGLDeleteBuffersProc fDeleteBuffers;$/;"	m	struct:GrGLInterface
fDeleteFramebuffers	gpu/GrGLInterface.h	/^    GrGLDeleteFramebuffersProc fDeleteFramebuffers;$/;"	m	struct:GrGLInterface
fDeleteProgram	gpu/GrGLInterface.h	/^    GrGLDeleteProgramProc fDeleteProgram;$/;"	m	struct:GrGLInterface
fDeleteQueries	gpu/GrGLInterface.h	/^    GrGLDeleteQueriesProc fDeleteQueries;$/;"	m	struct:GrGLInterface
fDeleteRenderbuffers	gpu/GrGLInterface.h	/^    GrGLDeleteRenderbuffersProc fDeleteRenderbuffers;$/;"	m	struct:GrGLInterface
fDeleteShader	gpu/GrGLInterface.h	/^    GrGLDeleteShaderProc fDeleteShader;$/;"	m	struct:GrGLInterface
fDeleteTextures	gpu/GrGLInterface.h	/^    GrGLDeleteTexturesProc fDeleteTextures;$/;"	m	struct:GrGLInterface
fDeleteWhenDone	core/SkTemplates.h	/^    bool fDeleteWhenDone;$/;"	m	class:SkAutoTDelete
fDepthMask	gpu/GrGLInterface.h	/^    GrGLDepthMaskProc fDepthMask;$/;"	m	struct:GrGLInterface
fDeque	core/SkClipStack.h	/^    SkDeque fDeque;$/;"	m	class:SkClipStack
fDesc	core/SkDescriptor.h	/^    SkDescriptor*   fDesc;$/;"	m	class:SkAutoDescriptor
fDescent	core/SkAdvancedTypefaceMetrics.h	/^    int16_t fDescent;      \/\/ Max depth below baseline (negative).$/;"	m	class:SkAdvancedTypefaceMetrics
fDescent	core/SkPaint.h	/^        SkScalar    fDescent;   \/\/!< The recommended distance below the baseline (will be >= 0)$/;"	m	struct:SkPaint::FontMetrics
fDescriptor	pdf/SkPDFFont.h	/^    SkRefPtr<SkPDFDict> fDescriptor;$/;"	m	class:SkPDFFont
fDevice	core/SkDraw.h	/^    SkDevice*       fDevice;        \/\/ optional$/;"	m	class:SkDraw
fDevice	effects/SkTransparentShader.h	/^    const SkBitmap* fDevice;$/;"	m	class:SkTransparentShader
fDevice	pdf/SkPDFPage.h	/^    SkRefPtr<SkPDFDevice> fDevice;$/;"	m	class:SkPDFPage
fDeviceCMDirty	core/SkCanvas.h	/^    bool fDeviceCMDirty;            \/\/ cleared by updateDeviceCMCache()$/;"	m	class:SkCanvas
fDeviceConfig	core/SkShader.h	/^    uint8_t             fDeviceConfig;$/;"	m	class:SkShader
fDeviceContext	gpu/SkNativeGLContext.h	/^    HDC fDeviceContext;$/;"	m	class:SkNativeGLContext
fDeviceContext	utils/SkDeferredCanvas.h	/^        DeviceContext* fDeviceContext;$/;"	m	class:SkDeferredCanvas::DeferredDevice
fDidLock	SkBitmap.h	/^    bool            fDidLock;$/;"	m	class:SkAutoLockPixels
fDidLock	core/SkBitmap.h	/^    bool            fDidLock;$/;"	m	class:SkAutoLockPixels
fDirection	effects/SkEmbossMaskFilter.h	/^        SkScalar    fDirection[3];  \/\/ x,y,z$/;"	m	struct:SkEmbossMaskFilter::Light
fDirection	views/SkTouchGesture.h	/^    SkPoint     fDirection;$/;"	m	struct:SkFlingState
fDirty	images/SkFlipPixelRef.h	/^    const SkRegion* fDirty;$/;"	m	class:SkAutoFlipUpdate
fDirty0	images/SkPageFlipper.h	/^    SkRegion*   fDirty0;$/;"	m	class:SkPageFlipper
fDirty0Storage	images/SkPageFlipper.h	/^    SkRegion    fDirty0Storage;$/;"	m	class:SkPageFlipper
fDirty1	images/SkPageFlipper.h	/^    SkRegion*   fDirty1;$/;"	m	class:SkPageFlipper
fDirty1Storage	images/SkPageFlipper.h	/^    SkRegion    fDirty1Storage;$/;"	m	class:SkPageFlipper
fDirtyRgn	views/SkWindow.h	/^    SkRegion    fDirtyRgn;$/;"	m	class:SkWindow
fDisable	gpu/GrGLInterface.h	/^    GrGLDisableProc fDisable;$/;"	m	struct:GrGLInterface
fDisableVertexAttribArray	gpu/GrGLInterface.h	/^    GrGLDisableVertexAttribArrayProc fDisableVertexAttribArray;$/;"	m	struct:GrGLInterface
fDisplay	gpu/SkNativeGLContext.h	/^    Display* fDisplay;$/;"	m	class:SkNativeGLContext
fDisplay	gpu/SkNativeGLContext.h	/^    EGLDisplay fDisplay;$/;"	m	class:SkNativeGLContext
fDisplay	views/SkOSWindow_Unix.h	/^  Display* fDisplay;$/;"	m	struct:SkUnixWindow
fDisplay	views/SkOSWindow_Win.h	/^    EGLDisplay          fDisplay;$/;"	m	class:SkOSWindow
fDistMul	effects/SkAvoidXfermode.h	/^    uint32_t    fDistMul;   \/\/ x.14$/;"	m	class:SkAvoidXfermode
fDistance	core/SkPathMeasure.h	/^        SkScalar    fDistance;  \/\/ total distance up to this point$/;"	m	struct:SkPathMeasure::Segment
fDither	gpu/GrPaint.h	/^    bool                        fDither;$/;"	m	class:GrPaint
fDitherImage	images/SkImageDecoder.h	/^    bool                    fDitherImage;$/;"	m	class:SkImageDecoder
fDoAA	core/SkClipStack.h	/^            bool            fDoAA;$/;"	m	struct:SkClipStack::B2FIter::Clip
fDoAA	gpu/GrClip.h	/^        bool         fDoAA;$/;"	m	struct:GrClip::Element
fDoDither	images/SkImageRef.h	/^    bool                    fDoDither;$/;"	m	class:SkImageRef
fDoEscapeMarkup	xml/SkXMLWriter.h	/^    bool fDoEscapeMarkup;$/;"	m	class:SkXMLWriter
fDoFill	core/SkStroke.h	/^    SkBool8     fDoFill;$/;"	m	class:SkStroke
fDoInterp	views/SkWidget.h	/^    bool    fDoInterp;$/;"	m	class:SkTextView
fDoInterp	views/SkWidget.h	/^    bool fDoInterp;$/;"	m	class:SkProgressView
fDocCatalog	pdf/SkPDFDocument.h	/^    SkRefPtr<SkPDFDict> fDocCatalog;$/;"	m	class:SkPDFDocument
fDocumentFlags	pdf/SkPDFCatalog.h	/^    SkPDFDocument::Flags fDocumentFlags;$/;"	m	class:SkPDFCatalog
fDone	core/SkCanvas.h	/^        bool              fDone;$/;"	m	class:SkCanvas::LayerIter
fDone	core/SkRegion.h	/^        bool            fDone;$/;"	m	class:SkRegion::Iterator
fDone	core/SkRegion.h	/^        bool        fDone;$/;"	m	class:SkRegion::Cliperator
fDone	core/SkRegion.h	/^        bool    fDone;$/;"	m	class:SkRegion::Spanerator
fDouble	core/SkTemplates.h	/^        double  fDouble;$/;"	m	union:SkAlignedSStorage::__anon24
fDrawArrays	gpu/GrGLInterface.h	/^    GrGLDrawArraysProc fDrawArrays;$/;"	m	struct:GrGLInterface
fDrawBuffer	gpu/GrContext.h	/^    GrInOrderDrawBuffer*        fDrawBuffer;$/;"	m	class:GrContext
fDrawBuffer	gpu/GrGLInterface.h	/^    GrGLDrawBufferProc fDrawBuffer;$/;"	m	struct:GrGLInterface
fDrawBufferIBAllocPool	gpu/GrContext.h	/^    GrIndexBufferAllocPool*     fDrawBufferIBAllocPool;$/;"	m	class:GrContext
fDrawBufferVBAllocPool	gpu/GrContext.h	/^    GrVertexBufferAllocPool*    fDrawBufferVBAllocPool;$/;"	m	class:GrContext
fDrawBuffers	gpu/GrGLInterface.h	/^    GrGLDrawBuffersProc fDrawBuffers;$/;"	m	struct:GrGLInterface
fDrawElements	gpu/GrGLInterface.h	/^    GrGLDrawElementsProc fDrawElements;$/;"	m	struct:GrGLInterface
fDrawProcs	gpu/SkGpuDevice.h	/^    GrSkDrawProcs*  fDrawProcs;$/;"	m	class:SkGpuDevice
fDrawState	gpu/GrContext.h	/^    GrDrawState*        fDrawState;$/;"	m	class:GrContext
fDrawingArea	pdf/SkPDFDevice.h	/^    DrawingArea fDrawingArea;$/;"	m	class:SkPDFDevice
fDstBlendCoeff	gpu/GrPaint.h	/^    GrBlendCoeff                fDstBlendCoeff;$/;"	m	class:GrPaint
fDumper	utils/SkDumpCanvas.h	/^    Dumper* fDumper;$/;"	m	class:SkDumpCanvas
fDuration	images/SkMovie.h	/^        SkMSec  fDuration;$/;"	m	struct:SkMovie::Info
fDwordCount	pdf/SkBitSet.h	/^    size_t fDwordCount;$/;"	m	class:SkBitSet
fDx	effects/SkBlurDrawLooper.h	/^    SkScalar        fDx, fDy;$/;"	m	class:SkBlurDrawLooper
fDy	effects/SkBlurDrawLooper.h	/^    SkScalar        fDx, fDy;$/;"	m	class:SkBlurDrawLooper
fElemCount	utils/SkInterpolator.h	/^    uint8_t fElemCount;$/;"	m	class:SkInterpolatorBase
fElemSize	core/SkDeque.h	/^        size_t          fElemSize;$/;"	m	class:SkDeque::F2BIter
fElemSize	core/SkDeque.h	/^    size_t  fElemSize;$/;"	m	class:SkDeque
fElems	xml/SkBML_WXMLParser.h	/^    char*       fElems[256];$/;"	m	class:BML_WXMLParser
fElems	xml/SkXMLWriter.h	/^    SkTDArray<Elem*> fElems;$/;"	m	class:SkXMLWriter
fElemsCount	xml/SkBML_WXMLParser.h	/^    int fElemsCount, fElemsReused;$/;"	m	class:BML_WXMLParser
fElemsReused	xml/SkBML_WXMLParser.h	/^    int fElemsCount, fElemsReused;$/;"	m	class:BML_WXMLParser
fEmSize	core/SkAdvancedTypefaceMetrics.h	/^    uint16_t fEmSize;  \/\/ The size of the em box (defines font units).$/;"	m	class:SkAdvancedTypefaceMetrics
fEmptyPaint	svg/SkSVGParser.h	/^    SkSVGPaint fEmptyPaint; $/;"	m	class:SkSVGParser
fEnable	gpu/GrGLInterface.h	/^    GrGLEnableProc fEnable;$/;"	m	struct:GrGLInterface
fEnableVertexAttribArray	gpu/GrGLInterface.h	/^    GrGLEnableVertexAttribArrayProc fEnableVertexAttribArray;$/;"	m	struct:GrGLInterface
fEndId	core/SkAdvancedTypefaceMetrics.h	/^        uint16_t fEndId;$/;"	m	struct:SkAdvancedTypefaceMetrics::AdvanceMetric
fEndQuery	gpu/GrGLInterface.h	/^    GrGLEndQueryProc fEndQuery;$/;"	m	struct:GrGLInterface
fEntry	gpu/GrContext.h	/^        GrResourceEntry* fEntry;$/;"	m	class:GrContext::TextureCacheEntry
fEntry	gpu/GrContext.h	/^    GrContext::TextureCacheEntry  fEntry;$/;"	m	class:GrAutoScratchTexture
fError	xml/SkXMLParser.h	/^    SkXMLParserError* fError;$/;"	m	class:SkXMLParser
fErrorInDecoding	images/SkImageRef.h	/^    bool                    fErrorInDecoding;$/;"	m	class:SkImageRef
fEvent	views/SkOSMenu.h	/^        SkEvent*        fEvent;$/;"	m	class:SkOSMenu::Item
fEvent	views/SkWidget.h	/^    SkEvent fEvent;$/;"	m	class:SkWidget
fEvent	views/SkWidgetViews.h	/^    SkEvent     fEvent;$/;"	m	class:SkWidgetView
fExistingClipRegion	pdf/SkPDFDevice.h	/^    SkRegion fExistingClipRegion;$/;"	m	class:SkPDFDevice
fExistingClipStack	pdf/SkPDFDevice.h	/^    SkClipStack fExistingClipStack;$/;"	m	class:SkPDFDevice
fExtMatrix	core/SkDraw.h	/^    const SkMatrix* fExtMatrix;     \/\/ optional$/;"	m	class:SkDraw
fExternalInverse	core/SkCanvas.h	/^    SkMatrix    fExternalMatrix, fExternalInverse;$/;"	m	class:SkCanvas
fExternalMatrix	core/SkCanvas.h	/^    SkMatrix    fExternalMatrix, fExternalInverse;$/;"	m	class:SkCanvas
fFBO	gpu/SkGLContext.h	/^    GrGLuint fFBO;$/;"	m	class:SkGLContext
fFD	core/SkStream.h	/^    int     fFD;$/;"	m	class:SkFDStream
fFILE	core/SkStream.h	/^    SkFILE*     fFILE;$/;"	m	class:SkFILEStream
fFILE	core/SkStream.h	/^    SkFILE* fFILE;$/;"	m	class:SkFILEWStream
fFact	core/SkTRegistry.h	/^    Factory      fFact;$/;"	m	class:SkTRegistry
fFactory	images/SkImageRef.h	/^    SkImageDecoderFactory*  fFactory;    \/\/ may be null$/;"	m	class:SkImageRef
fFactoryArray	core/SkFlattenable.h	/^    SkFlattenable::Factory* fFactoryArray;$/;"	m	class:SkFlattenableReadBuffer
fFactoryCount	core/SkFlattenable.h	/^    int                     fFactoryCount;$/;"	m	class:SkFlattenableReadBuffer
fFactorySet	core/SkFlattenable.h	/^    SkFactorySet*   fFactorySet;$/;"	m	class:SkFlattenableWriteBuffer
fFactorySet	pipe/SkGPipe.h	/^    SkFactorySet         fFactorySet;$/;"	m	class:SkGPipeWriter
fFactoryTDArray	core/SkFlattenable.h	/^    SkTDArray<SkFlattenable::Factory>* fFactoryTDArray;$/;"	m	class:SkFlattenableReadBuffer
fFileOffset	pdf/SkPDFCatalog.h	/^        off_t fFileOffset;$/;"	m	struct:SkPDFCatalog::Rec
fFillType	core/SkPath.h	/^    uint8_t             fFillType;$/;"	m	class:SkPath
fFilter	core/SkColorFilter.h	/^    SkColorFilter*  fFilter;$/;"	m	class:SkFilterShader
fFilters	effects/SkTestImageFilters.h	/^    SkImageFilter**     fFilters;$/;"	m	class:SkMergeImageFilter
fFinish	gpu/GrGLInterface.h	/^    GrGLFinishProc fFinish;$/;"	m	struct:GrGLInterface
fFirstChild	views/SkView.h	/^        SkView* fFirstChild, *fChild;$/;"	m	class:SkView::B2FIter
fFirstChild	views/SkView.h	/^        SkView* fFirstChild, *fChild;$/;"	m	class:SkView::F2BIter
fFirstChild	views/SkView.h	/^    SkView*     fFirstChild;$/;"	m	class:SkView
fFirstGlyphID	pdf/SkPDFFont.h	/^    uint16_t fFirstGlyphID;$/;"	m	class:SkPDFFont
fFirstPageCount	pdf/SkPDFCatalog.h	/^    uint32_t fFirstPageCount;$/;"	m	class:SkPDFCatalog
fFirstPtIndex	core/SkPathMeasure.h	/^    int             fFirstPtIndex;      \/\/ relative to the current contour$/;"	m	class:SkPathMeasure
fFlags	SkBitmap.h	/^    uint8_t     fFlags;$/;"	m	class:SkBitmap
fFlags	SkBitmap.h	/^    uint8_t     fFlags;$/;"	m	class:SkColorTable
fFlags	core/SkBitmap.h	/^    uint8_t     fFlags;$/;"	m	class:SkBitmap
fFlags	core/SkBitmap.h	/^    uint8_t     fFlags;$/;"	m	class:SkColorTable
fFlags	core/SkBounder.h	/^        uint16_t    fFlags; \/\/!< currently set to 0$/;"	m	struct:SkBounder::GlyphRec
fFlags	core/SkColorShader.h	/^    uint32_t    fFlags;         \/\/ cached after setContext()$/;"	m	class:SkColorShader
fFlags	core/SkDevice.h	/^        uint32_t            fFlags;     \/\/ SkPaint::getFlags()$/;"	m	struct:SkDevice::TextFlags
fFlags	core/SkFlattenable.h	/^    uint32_t        fFlags;$/;"	m	class:SkFlattenableWriteBuffer
fFlags	core/SkScalerContext.h	/^        uint16_t    fFlags;$/;"	m	struct:SkScalerContext::Rec
fFlags	effects/SkColorMatrixFilter.h	/^    uint32_t    fFlags;$/;"	m	class:SkColorMatrixFilter
fFlags	gpu/GrTypes.h	/^    GrPlatformTextureFlags          fFlags;$/;"	m	struct:GrPlatformTextureDesc
fFlags	gpu/GrTypes.h	/^    GrTextureFlags         fFlags;  \/\/!< bitfield of TextureFlags$/;"	m	struct:GrTextureDesc
fFlags	utils/SkInterpolator.h	/^    uint8_t fFlags;$/;"	m	class:SkInterpolatorBase
fFlags	utils/SkLayer.h	/^    uint32_t    fFlags;$/;"	m	class:SkLayer
fFlags	utils/SkSfntUtils.h	/^    uint16_t    fFlags;$/;"	m	struct:SkSfntTable_head
fFlags	views/SkView.h	/^    uint8_t     fFlags;$/;"	m	class:SkView
fFlagsMask	effects/SkLayerDrawLooper.h	/^        uint32_t            fFlagsMask; \/\/ SkPaint::Flags$/;"	m	struct:SkLayerDrawLooper::LayerInfo
fFlinger	views/SkTouchGesture.h	/^    SkFlingState    fFlinger;$/;"	m	class:SkTouchGesture
fFlipper	images/SkFlipPixelRef.h	/^    SkPageFlipper   fFlipper;$/;"	m	class:SkFlipPixelRef
fFloat	core/SkFloatBits.h	/^    float   fFloat;$/;"	m	union:SkFloatIntUnion
fFloats	utils/SkJSON.h	/^            float*   fFloats;$/;"	m	union:SkJSON::Array::__anon42
fFlush	gpu/GrGLInterface.h	/^    GrGLFlushProc fFlush;$/;"	m	struct:GrGLInterface
fFocusView	views/SkWindow.h	/^    SkView* fFocusView;$/;"	m	class:SkWindow
fFont	pdf/SkPDFFont.h	/^        SkPDFFont* fFont;$/;"	m	class:SkPDFFont::FontRec
fFont	pdf/SkPDFFont.h	/^        SkPDFFont* fFont;$/;"	m	struct:SkPDFGlyphSetMap::FontGlyphSetPair
fFontCache	gpu/GrContext.h	/^    GrFontCache*        fFontCache;$/;"	m	class:GrContext
fFontDirectionHint	utils/SkSfntUtils.h	/^    int16_t     fFontDirectionHint;$/;"	m	struct:SkSfntTable_head
fFontGlyphUsage	pdf/SkPDFDevice.h	/^    SkTScopedPtr<SkPDFGlyphSetMap> fFontGlyphUsage;$/;"	m	class:SkPDFDevice
fFontHintLevel	core/SkDeviceProfile.h	/^    FontHintLevel   fFontHintLevel;$/;"	m	class:SkDeviceProfile
fFontID	core/SkScalerContext.h	/^        uint32_t    fFontID;$/;"	m	struct:SkScalerContext::Rec
fFontID	pdf/SkPDFFont.h	/^        uint32_t fFontID;$/;"	m	class:SkPDFFont::FontRec
fFontInfo	pdf/SkPDFFont.h	/^    SkRefPtr<SkAdvancedTypefaceMetrics> fFontInfo;$/;"	m	class:SkPDFFont
fFontName	core/SkAdvancedTypefaceMetrics.h	/^    SkString fFontName;$/;"	m	class:SkAdvancedTypefaceMetrics
fFontResources	pdf/SkPDFDevice.h	/^    SkTDArray<SkPDFFont*> fFontResources;$/;"	m	class:SkPDFDevice
fFontType	pdf/SkPDFFont.h	/^    SkAdvancedTypefaceMetrics::FontType fFontType;$/;"	m	class:SkPDFFont
fForceClose	core/SkPath.h	/^        SkBool8         fForceClose;$/;"	m	class:SkPath::Iter
fForceClosed	core/SkPathMeasure.h	/^    bool            fForceClosed;$/;"	m	class:SkPathMeasure
fFormat	core/SkMask.h	/^    Format      fFormat;$/;"	m	struct:SkMask
fFrame	views/SkOSWindow_wxwidgets.h	/^    wxFrame* fFrame;$/;"	m	class:SkOSWindow
fFrameCount	utils/SkInterpolator.h	/^    int16_t fFrameCount;$/;"	m	class:SkInterpolatorBase
fFrameWidth	core/SkScalerContext.h	/^        SkScalar    fFrameWidth, fMiterLimit;$/;"	m	struct:SkScalerContext::Rec
fFramebufferRenderbuffer	gpu/GrGLInterface.h	/^    GrGLFramebufferRenderbufferProc fFramebufferRenderbuffer;$/;"	m	struct:GrGLInterface
fFramebufferTexture2D	gpu/GrGLInterface.h	/^    GrGLFramebufferTexture2DProc fFramebufferTexture2D;$/;"	m	struct:GrGLInterface
fFreshFrame	utils/SkDeferredCanvas.h	/^        bool fFreshFrame;$/;"	m	class:SkDeferredCanvas::DeferredDevice
fFront	core/SkDeque.h	/^    Head*   fFront;$/;"	m	class:SkDeque
fFrontFace	gpu/GrGLInterface.h	/^    GrGLFrontFaceProc fFrontFace;$/;"	m	struct:GrGLInterface
fFx1	core/SkClampRange.h	/^    SkFixed fFx1;   \/\/ initial fx value for the fCount1 range.$/;"	m	struct:SkClampRange
fGL	gpu/SkGLContext.h	/^    const GrGLInterface* fGL;$/;"	m	class:SkGLContext
fGLCanvas	views/SkOSWindow_SDL.h	/^    SkGLCanvas* fGLCanvas;$/;"	m	class:SkOSWindow
fGLContext	gpu/GrContextFactory.h	/^        SkGLContext*              fGLContext;$/;"	m	struct:GrContextFactory::GPUContext
fGLContext	views/SkOSWindow_Mac.h	/^    void*   fGLContext;$/;"	m	class:SkOSWindow
fGLContext	views/SkOSWindow_Unix.h	/^  GLXContext fGLContext;$/;"	m	struct:SkUnixWindow
fGammaExponent	core/SkDeviceProfile.h	/^    float           fGammaExponent;$/;"	m	class:SkDeviceProfile
fGc	views/SkOSWindow_Unix.h	/^  GC fGc;$/;"	m	struct:SkUnixWindow
fGenBuffers	gpu/GrGLInterface.h	/^    GrGLGenBuffersProc fGenBuffers;$/;"	m	struct:GrGLInterface
fGenFramebuffers	gpu/GrGLInterface.h	/^    GrGLGenFramebuffersProc fGenFramebuffers;$/;"	m	struct:GrGLInterface
fGenQueries	gpu/GrGLInterface.h	/^    GrGLGenQueriesProc fGenQueries;$/;"	m	struct:GrGLInterface
fGenRenderbuffers	gpu/GrGLInterface.h	/^    GrGLGenRenderbuffersProc fGenRenderbuffers;$/;"	m	struct:GrGLInterface
fGenTextures	gpu/GrGLInterface.h	/^    GrGLGenTexturesProc fGenTextures;$/;"	m	struct:GrGLInterface
fGenerateImageFromPath	core/SkScalerContext.h	/^    bool fGenerateImageFromPath;$/;"	m	class:SkScalerContext
fGenerationID	core/SkPaint.h	/^    uint32_t        fGenerationID;$/;"	m	class:SkPaint
fGenerationID	core/SkPath.h	/^    uint32_t            fGenerationID;$/;"	m	class:SkPath
fGenerationID	core/SkPixelRef.h	/^    mutable uint32_t fGenerationID;$/;"	m	class:SkPixelRef
fGetBufferParameteriv	gpu/GrGLInterface.h	/^    GrGLGetBufferParameterivProc fGetBufferParameteriv;$/;"	m	struct:GrGLInterface
fGetError	gpu/GrGLInterface.h	/^    GrGLGetErrorProc fGetError;$/;"	m	struct:GrGLInterface
fGetExtensionsString	utils/SkWGL.h	/^    GetExtensionsStringProc fGetExtensionsString;$/;"	m	class:SkWGLExtensions
fGetFramebufferAttachmentParameteriv	gpu/GrGLInterface.h	/^    GrGLGetFramebufferAttachmentParameterivProc fGetFramebufferAttachmentParameteriv;$/;"	m	struct:GrGLInterface
fGetIntegerv	gpu/GrGLInterface.h	/^    GrGLGetIntegervProc fGetIntegerv;$/;"	m	struct:GrGLInterface
fGetPixelFormatAttribfv	utils/SkWGL.h	/^    GetPixelFormatAttribfvProc fGetPixelFormatAttribfv;$/;"	m	class:SkWGLExtensions
fGetPixelFormatAttribiv	utils/SkWGL.h	/^    GetPixelFormatAttribivProc fGetPixelFormatAttribiv;$/;"	m	class:SkWGLExtensions
fGetProgramInfoLog	gpu/GrGLInterface.h	/^    GrGLGetProgramInfoLogProc fGetProgramInfoLog;$/;"	m	struct:GrGLInterface
fGetProgramiv	gpu/GrGLInterface.h	/^    GrGLGetProgramivProc fGetProgramiv;$/;"	m	struct:GrGLInterface
fGetQueryObjecti64v	gpu/GrGLInterface.h	/^    GrGLGetQueryObjecti64vProc fGetQueryObjecti64v;$/;"	m	struct:GrGLInterface
fGetQueryObjectiv	gpu/GrGLInterface.h	/^    GrGLGetQueryObjectivProc fGetQueryObjectiv;$/;"	m	struct:GrGLInterface
fGetQueryObjectui64v	gpu/GrGLInterface.h	/^    GrGLGetQueryObjectui64vProc fGetQueryObjectui64v;$/;"	m	struct:GrGLInterface
fGetQueryObjectuiv	gpu/GrGLInterface.h	/^    GrGLGetQueryObjectuivProc fGetQueryObjectuiv;$/;"	m	struct:GrGLInterface
fGetQueryiv	gpu/GrGLInterface.h	/^    GrGLGetQueryivProc fGetQueryiv;$/;"	m	struct:GrGLInterface
fGetRenderbufferParameteriv	gpu/GrGLInterface.h	/^    GrGLGetRenderbufferParameterivProc fGetRenderbufferParameteriv;$/;"	m	struct:GrGLInterface
fGetShaderInfoLog	gpu/GrGLInterface.h	/^    GrGLGetShaderInfoLogProc fGetShaderInfoLog;$/;"	m	struct:GrGLInterface
fGetShaderiv	gpu/GrGLInterface.h	/^    GrGLGetShaderivProc fGetShaderiv;$/;"	m	struct:GrGLInterface
fGetString	gpu/GrGLInterface.h	/^    GrGLGetStringProc fGetString;$/;"	m	struct:GrGLInterface
fGetTexLevelParameteriv	gpu/GrGLInterface.h	/^    GrGLGetTexLevelParameterivProc fGetTexLevelParameteriv;$/;"	m	struct:GrGLInterface
fGetUniformLocation	gpu/GrGLInterface.h	/^    GrGLGetUniformLocationProc fGetUniformLocation;$/;"	m	struct:GrGLInterface
fGlRenderContext	gpu/SkNativeGLContext.h	/^    HGLRC fGlRenderContext;$/;"	m	class:SkNativeGLContext
fGlobal	xml/SkJS.h	/^    JSObject *fGlobal;$/;"	m	class:SkJS
fGlobalM	views/SkTouchGesture.h	/^    SkMatrix        fLocalM, fGlobalM;$/;"	m	class:SkTouchGesture
fGlxPixmap	gpu/SkNativeGLContext.h	/^    GLXPixmap fGlxPixmap;$/;"	m	class:SkNativeGLContext
fGlyphCacheProc	core/SkDraw.h	/^    SkMeasureCacheProc fGlyphCacheProc;$/;"	m	class:SkTextToPathIter
fGlyphDataFormat	utils/SkSfntUtils.h	/^    int16_t     fGlyphDataFormat;$/;"	m	struct:SkSfntTable_head
fGlyphID	core/SkBounder.h	/^        uint16_t    fGlyphID;$/;"	m	struct:SkBounder::GlyphRec
fGlyphID	pdf/SkPDFFont.h	/^        uint16_t fGlyphID;$/;"	m	class:SkPDFFont::FontRec
fGlyphNames	core/SkAdvancedTypefaceMetrics.h	/^    SkTScopedPtr<SkAutoTArray<SkString> > fGlyphNames;$/;"	m	class:SkAdvancedTypefaceMetrics
fGlyphSet	pdf/SkPDFFont.h	/^        SkPDFGlyphSet* fGlyphSet;$/;"	m	struct:SkPDFGlyphSetMap::FontGlyphSetPair
fGlyphToUnicode	core/SkAdvancedTypefaceMetrics.h	/^    SkTDArray<SkUnichar> fGlyphToUnicode;$/;"	m	class:SkAdvancedTypefaceMetrics
fGlyphWidths	core/SkAdvancedTypefaceMetrics.h	/^    SkTScopedPtr<WidthRange> fGlyphWidths;$/;"	m	class:SkAdvancedTypefaceMetrics
fGpu	gpu/GrContext.h	/^    GrGpu*              fGpu;$/;"	m	class:GrContext
fGpu	gpu/GrResource.h	/^    GrGpu*      fGpu;       \/\/ not reffed. The GrGpu can be deleted while there$/;"	m	class:GrResource
fGrContext	gpu/GrContextFactory.h	/^        GrContext*                fGrContext;$/;"	m	struct:GrContextFactory::GPUContext
fGraphicState	pdf/SkPDFGraphicState.h	/^        SkPDFGraphicState* fGraphicState;$/;"	m	class:SkPDFGraphicState::GSCanonicalEntry
fGraphicStateResources	pdf/SkPDFDevice.h	/^    SkTDArray<SkPDFGraphicState*> fGraphicStateResources;$/;"	m	class:SkPDFDevice
fHGLRC	views/SkOSWindow_Win.h	/^    void*               fHGLRC;$/;"	m	class:SkOSWindow
fHR	utils/win/SkAutoCoInitialize.h	/^    HRESULT fHR;$/;"	m	class:SkAutoCoInitialize
fHWND	views/SkOSWindow_Mac.h	/^    void*   fHWND;$/;"	m	class:SkOSWindow
fHWND	views/SkOSWindow_Win.h	/^    void*               fHWND;$/;"	m	class:SkOSWindow
fHWND	views/SkOSWindow_iOS.h	/^    void*   fHWND;$/;"	m	class:SkOSWindow
fHandle	core/SkOSFile.h	/^        HANDLE      fHandle;$/;"	m	class:SkOSFile::Iter
fHasChildren	xml/SkXMLWriter.h	/^        bool        fHasChildren;$/;"	m	struct:SkXMLWriter::Elem
fHash	gpu/GrKey.h	/^    const Hash fHash;$/;"	m	class:GrKey
fHead	core/SkDeque.h	/^        SkDeque::Head*  fHead;$/;"	m	class:SkDeque::F2BIter
fHead	core/SkGlobals.h	/^        Rec*    fHead;$/;"	m	struct:SkGlobals::BootStrap
fHead	core/SkStream.h	/^    Block*  fHead;$/;"	m	class:SkDynamicMemoryWStream
fHead	core/SkWriter32.h	/^    Block*  fHead;$/;"	m	class:SkWriter32
fHead	svg/SkSVGParser.h	/^    SkSVGPaint* fHead;$/;"	m	class:SkSVGParser
fHead	utils/SkJSON.h	/^        Slot* fHead;$/;"	m	class:SkJSON::Object
fHeadIsExternalStorage	core/SkWriter32.h	/^    bool fHeadIsExternalStorage;$/;"	m	class:SkWriter32
fHeight	SkBitmap.cpp	/^    uint32_t    fWidth, fHeight;$/;"	m	struct:MipLevel	file:
fHeight	SkBitmap.h	/^        int       fHeight;$/;"	m	class:SkBitmap::RLEPixels
fHeight	SkBitmap.h	/^    uint32_t    fHeight;$/;"	m	class:SkBitmap
fHeight	core/SkBitmap.h	/^        int       fHeight;$/;"	m	class:SkBitmap::RLEPixels
fHeight	core/SkBitmap.h	/^    uint32_t    fHeight;$/;"	m	class:SkBitmap
fHeight	core/SkPicture.h	/^    int fWidth, fHeight;$/;"	m	class:SkPicture
fHeight	core/SkScalerContext.h	/^    uint16_t    fWidth, fHeight;$/;"	m	struct:SkGlyph
fHeight	core/SkSize.h	/^    T fHeight;$/;"	m	struct:SkTSize
fHeight	gpu/GrRenderTarget.h	/^    int               fHeight;$/;"	m	class:GrRenderTarget
fHeight	gpu/GrTexture.h	/^    int fHeight;$/;"	m	class:GrTexture
fHeight	gpu/GrTypes.h	/^    int                             fHeight;        \/\/<! height in pixels$/;"	m	struct:GrPlatformRenderTargetDesc
fHeight	gpu/GrTypes.h	/^    int                             fHeight;        \/\/<! height in pixels$/;"	m	struct:GrPlatformTextureDesc
fHeight	gpu/GrTypes.h	/^    int                    fHeight; \/\/!< Height of the texture$/;"	m	struct:GrTextureDesc
fHeight	images/SkMovie.h	/^        int     fHeight;$/;"	m	struct:SkMovie::Info
fHeight	images/SkPageFlipper.h	/^    int         fHeight;$/;"	m	class:SkPageFlipper
fHeight	views/SkView.h	/^    SkScalar    fWidth, fHeight;$/;"	m	class:SkView
fHeights	views/SkWidgetViews.h	/^    SkScalar        fHeights[2];$/;"	m	class:SkListView
fHi	core/Sk64.h	/^    int32_t  fHi;   \/\/!< the high 32 bits of the number (including sign)$/;"	m	struct:Sk64
fHighQuality	core/SkMaskFilter.h	/^        bool     fHighQuality;$/;"	m	struct:SkMaskFilter::BlurInfo
fHinting	core/SkDevice.h	/^        SkPaint::Hinting    fHinting;$/;"	m	struct:SkDevice::TextFlags
fHour	core/SkTime.h	/^        uint8_t  fHour;          \/\/!< 0..23$/;"	m	struct:SkTime::DateTime
fICurr	views/SkView.h	/^        SkIPoint    fIOrig, fIPrev, fICurr;$/;"	m	class:SkView::Click
fID	core/SkScalerContext.h	/^    uint32_t    fID;$/;"	m	struct:SkGlyph
fID	views/SkEventSink.h	/^    SkEventSinkID   fID;$/;"	m	class:SkEventSink
fID	views/SkOSMenu.h	/^        int             fID;$/;"	m	class:SkOSMenu::Item
fIDs	svg/SkSVGParser.h	/^    SkTDict<SkSVGElement*> fIDs;$/;"	m	class:SkSVGParser
fIDs	views/SkViewInflate.h	/^    SkTDict<SkView*> fIDs;$/;"	m	class:SkViewInflate
fIOrig	views/SkView.h	/^        SkIPoint    fIOrig, fIPrev, fICurr;$/;"	m	class:SkView::Click
fIPrev	views/SkView.h	/^        SkIPoint    fIOrig, fIPrev, fICurr;$/;"	m	class:SkView::Click
fIgnoreTransform	core/SkMaskFilter.h	/^        bool     fIgnoreTransform;$/;"	m	struct:SkMaskFilter::BlurInfo
fImage	core/SkMask.h	/^    uint8_t*    fImage;$/;"	m	struct:SkMask
fImage	core/SkMask.h	/^    uint8_t* fImage;$/;"	m	class:SkAutoMaskFreeImage
fImage	core/SkScalerContext.h	/^    void*       fImage;$/;"	m	struct:SkGlyph
fImage	gpu/SkMesaGLContext.h	/^    GrGLubyte *fImage;$/;"	m	class:SkMesaGLContext
fImageFilter	core/SkPaint.h	/^    SkImageFilter*  fImageFilter;$/;"	m	class:SkPaint
fImmediateCanvas	utils/SkDeferredCanvas.h	/^        SkCanvas* fImmediateCanvas;$/;"	m	class:SkDeferredCanvas::DeferredDevice
fImmediateDevice	utils/SkDeferredCanvas.h	/^        SkDevice* fImmediateDevice;$/;"	m	class:SkDeferredCanvas::DeferredDevice
fImpl	core/SkCanvas.h	/^        class SkDrawIter* fImpl;    \/\/ this points at fStorage$/;"	m	class:SkCanvas::LayerIter	typeref:class:SkCanvas::LayerIter::SkDrawIter
fImpl	core/SkRefDict.h	/^    Impl* fImpl;$/;"	m	class:SkRefDict
fInSVG	svg/SkSVGParser.h	/^    SkBool8 fInSVG;$/;"	m	class:SkSVGParser
fIndex	core/SkPtrRecorder.h	/^        uint32_t    fIndex; \/\/ 1...N$/;"	m	struct:SkPtrSet::Pair
fIndex	pdf/SkPDFFont.h	/^        mutable int fIndex;$/;"	m	class:SkPDFGlyphSetMap::F2BIter
fIndexCount	utils/SkMeshUtils.h	/^    size_t      fIndexCount, fTexCount;$/;"	m	class:SkMeshIndices
fIndexToLocFormat	utils/SkSfntUtils.h	/^    int16_t     fIndexToLocFormat;$/;"	m	struct:SkSfntTable_head
fIndices	utils/SkMeshUtils.h	/^    uint16_t*   fIndices;$/;"	m	class:SkMeshIndices
fInfo	effects/SkLayerDrawLooper.h	/^        LayerInfo fInfo;$/;"	m	struct:SkLayerDrawLooper::Rec
fInfo	images/SkMovie.h	/^    Info        fInfo;$/;"	m	class:SkMovie
fInheritColor	core/SkColorShader.h	/^    SkBool8     fInheritColor;$/;"	m	class:SkColorShader
fInitial	svg/SkSVGPaintState.h	/^    SkString fInitial;$/;"	m	class:SkSVGPaint
fInitialDashIndex	effects/SkDashPathEffect.h	/^    int32_t     fInitialDashIndex;$/;"	m	class:SkDashPathEffect
fInitialDashLength	effects/SkDashPathEffect.h	/^    SkScalar    fInitialDashLength;$/;"	m	class:SkDashPathEffect
fInitialOffset	effects/Sk1DPathEffect.h	/^    SkScalar    fInitialOffset; \/\/ computed from phase$/;"	m	class:SkPath1DPathEffect
fInitialRec	core/SkTDStack.h	/^    Rec     fInitialRec;$/;"	m	class:SkTDStack
fInitialRec	utils/SkCamera.h	/^    Rec         fInitialRec;$/;"	m	class:Sk3DView
fInitialStorage	core/SkDeque.h	/^    void*   fInitialStorage;$/;"	m	class:SkDeque
fInitialTransform	pdf/SkPDFDevice.h	/^    SkMatrix fInitialTransform;$/;"	m	class:SkPDFDevice
fInner	effects/SkTestImageFilters.h	/^    SkImageFilter*  fInner;$/;"	m	class:SkComposeImageFilter
fInterp	views/SkWidget.h	/^    Interp* fInterp;$/;"	m	class:SkTextView
fInterp	views/SkWidget.h	/^    SkInterpolator* fInterp;$/;"	m	class:SkProgressView
fIntervalLength	effects/SkDashPathEffect.h	/^    SkScalar    fIntervalLength;$/;"	m	class:SkDashPathEffect
fIntervals	effects/SkDashPathEffect.h	/^    SkScalar*   fIntervals;$/;"	m	class:SkDashPathEffect
fInts	utils/SkJSON.h	/^            int32_t* fInts;$/;"	m	union:SkJSON::Array::__anon42
fInvalEventIsPending	views/SkOSWindow_Mac.h	/^    bool    fInvalEventIsPending;$/;"	m	class:SkOSWindow
fInvalEventIsPending	views/SkOSWindow_iOS.h	/^    bool    fInvalEventIsPending;$/;"	m	class:SkOSWindow
fInverse	effects/Sk2DPathEffect.h	/^    SkMatrix    fMatrix, fInverse;$/;"	m	class:Sk2DPathEffect
fIsClosed	core/SkPathMeasure.h	/^    bool            fIsClosed;          \/\/ relative to the current contour$/;"	m	class:SkPathMeasure
fIsFixedWidth	core/SkTypeface.h	/^    bool        fIsFixedWidth;$/;"	m	class:SkTypeface
fIsGlobal	core/SkThread_platform.h	/^    bool fIsGlobal;$/;"	m	class:SkMutex
fIsImmutable	core/SkPixelRef.h	/^    bool    fIsImmutable;$/;"	m	class:SkPixelRef
fIsOpaque	images/SkMovie.h	/^        bool    fIsOpaque;$/;"	m	struct:SkMovie::Info
fIsOval	core/SkPath.h	/^    mutable SkBool8     fIsOval;$/;"	m	class:SkPath
fItalicAngle	core/SkAdvancedTypefaceMetrics.h	/^    int16_t fItalicAngle;   \/\/ Counterclockwise degrees from vertical of the$/;"	m	class:SkAdvancedTypefaceMetrics
fItemArray	core/SkTArray.h	/^        T*       fItemArray;$/;"	m	union:SkTArray::__anon20
fItems	views/SkOSMenu.h	/^    SkTDArray<Item*> fItems;$/;"	m	class:SkOSMenu
fIter	core/SkClipStack.h	/^        SkDeque::F2BIter fIter;$/;"	m	class:SkClipStack::B2FIter
fIter	core/SkPathMeasure.h	/^    SkPath::Iter    fIter;$/;"	m	class:SkPathMeasure
fIter	core/SkRegion.h	/^        Iterator    fIter;$/;"	m	class:SkRegion::Cliperator
fIter	core/SkTDict.h	/^        Pair*   fIter;$/;"	m	class:SkTDict::Iter
fIter	gpu/SkGr.h	/^    SkClipStack::B2FIter                fIter;$/;"	m	class:SkGrClipIterator
fIter	pdf/SkPDFTypes.h	/^        Rec* fIter;$/;"	m	class:SkPDFDict::Iter
fJmpBuf	images/SkJpegUtility.h	/^    jmp_buf fJmpBuf;$/;"	m	struct:skjpeg_error_mgr
fJoin	core/SkStroke.h	/^    uint8_t     fCap, fJoin;$/;"	m	class:SkStroke
fKernel	effects/SkKernel33MaskFilter.h	/^    int fKernel[3][3];$/;"	m	class:SkKernel33MaskFilter
fKernel	gpu/GrSamplerState.h	/^    float               fKernel[MAX_KERNEL_WIDTH];$/;"	m	class:GrSamplerState
fKernelWidth	gpu/GrSamplerState.h	/^    uint8_t             fKernelWidth;$/;"	m	class:GrSamplerState
fKey	gpu/SkGr.h	/^    GrKey*  fKey;$/;"	m	class:SkGrFontScaler
fKey	views/SkOSMenu.h	/^        SkUnichar       fKey;$/;"	m	class:SkOSMenu::Item
fLC	core/SkTSearch.h	/^    char*   fLC;    \/\/ points to either the heap or fStorage$/;"	m	class:SkAutoAsciiToLC
fLCDConfig	core/SkDeviceProfile.h	/^    LCDConfig       fLCDConfig;$/;"	m	class:SkDeviceProfile
fLSB	core/SkBounder.h	/^        SkIPoint    fLSB;   \/\/!< fixed-point left-side-bearing of the glyph$/;"	m	struct:SkBounder::GlyphRec
fLabel	core/SkTime.h	/^    const char* fLabel;$/;"	m	class:SkAutoTime
fLabel	core/SkUtils.h	/^    const char* fLabel;$/;"	m	class:SkAutoMemoryUsageProbe
fLabel	core/SkUtils.h	/^    const char* fLabel;$/;"	m	class:SkAutoTrace
fLabel	views/SkOSMenu.h	/^        SkString        fLabel;$/;"	m	class:SkOSMenu::Item
fLabel	views/SkWidget.h	/^    SkString    fLabel;$/;"	m	class:SkHasLabelView
fLabel	views/SkWidget.h	/^    SkString    fLabel;$/;"	m	class:SkHasLabelWidget
fLabel	views/SkWidgetViews.h	/^    SkString    fLabel;$/;"	m	class:SkWidgetView
fLastColor	svg/SkSVGParser.h	/^    SkString fLastColor;$/;"	m	class:SkSVGParser
fLastContentEntry	pdf/SkPDFDevice.h	/^    ContentEntry* fLastContentEntry;$/;"	m	class:SkPDFDevice
fLastDeviceToGainFocus	core/SkCanvas.h	/^    SkDevice*   fLastDeviceToGainFocus;$/;"	m	class:SkCanvas
fLastDrawCategory	gpu/GrContext.h	/^    DrawCategory fLastDrawCategory;$/;"	m	class:GrContext
fLastFlush	svg/SkSVGParser.h	/^    SkSVGPaint fLastFlush;$/;"	m	class:SkSVGParser
fLastGlyphID	core/SkAdvancedTypefaceMetrics.h	/^    uint16_t fLastGlyphID; \/\/ The last valid glyph ID in the font.$/;"	m	class:SkAdvancedTypefaceMetrics
fLastGlyphID	pdf/SkPDFFont.h	/^    uint16_t fLastGlyphID;$/;"	m	class:SkPDFFont
fLastMarginContentEntry	pdf/SkPDFDevice.h	/^    ContentEntry* fLastMarginContentEntry;$/;"	m	class:SkPDFDevice
fLastMoveToIndex	core/SkPath.h	/^    int                 fLastMoveToIndex;$/;"	m	class:SkPath
fLastPt	core/SkPath.h	/^        SkPoint         fLastPt;$/;"	m	class:SkPath::Iter
fLastPt	core/SkPath.h	/^        SkPoint         fLastPt;$/;"	m	class:SkPath::RawIter
fLastT	views/SkTouchGesture.h	/^        SkMSec  fPrevT, fLastT;$/;"	m	struct:SkTouchGesture::Rec
fLastTransform	svg/SkSVGParser.h	/^    SkMatrix fLastTransform;$/;"	m	class:SkSVGParser
fLastUpP	views/SkTouchGesture.h	/^    SkPoint         fLastUpP;$/;"	m	class:SkTouchGesture
fLastUpT	views/SkTouchGesture.h	/^    SkMSec          fLastUpT;$/;"	m	class:SkTouchGesture
fLastX	views/SkTouchGesture.h	/^        float   fLastX, fLastY;$/;"	m	struct:SkTouchGesture::Rec
fLastY	views/SkTouchGesture.h	/^        float   fLastX, fLastY;$/;"	m	struct:SkTouchGesture::Rec
fLayers	effects/SkLayerRasterizer.h	/^    SkDeque fLayers;$/;"	m	class:SkLayerRasterizer
fLeading	core/SkPaint.h	/^        SkScalar    fLeading;   \/\/!< The recommended distance to add between lines of text (will be >= 0)$/;"	m	struct:SkPaint::FontMetrics
fLeft	SkRect.h	/^    SkScalar    fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkRect
fLeft	SkRect.h	/^    int32_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkIRect
fLeft	core/SkRect.h	/^    SkScalar    fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkRect
fLeft	core/SkRect.h	/^    int32_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkIRect
fLeft	core/SkRegion.h	/^        int     fLeft, fRight;$/;"	m	class:SkRegion::Spanerator
fLeft	core/SkScalerContext.h	/^    int16_t     fTop, fLeft;$/;"	m	struct:SkGlyph
fLeft	gpu/GrRect.h	/^    int16_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:GrIRect16
fLeft	views/SkBorderView.h	/^    SkScalar fLeft, fRight, fTop, fBottom;  \/\/margin on each side$/;"	m	class:SkBorderView
fLen	core/SkDescriptor.h	/^        uint32_t fLen;$/;"	m	struct:SkDescriptor::Entry
fLen	utils/SkTextBox.h	/^    size_t      fLen;$/;"	m	class:SkTextBox
fLen	views/SkTextBox.h	/^    size_t      fLen;$/;"	m	class:SkTextBox
fLength	core/SkDescriptor.h	/^    uint32_t fLength;    \/\/ must be second$/;"	m	class:SkDescriptor
fLength	core/SkPathMeasure.h	/^    SkScalar        fLength;            \/\/ relative to the current contour$/;"	m	class:SkPathMeasure
fLength	core/SkString.h	/^        size_t      fLength;$/;"	m	struct:SkString::Rec
fLength	core/SkTSearch.h	/^    size_t  fLength;$/;"	m	class:SkAutoAsciiToLC
fLevelCount	SkBitmap.cpp	/^    int     fLevelCount;$/;"	m	struct:SkBitmap::MipMap	file:
fLight	effects/SkEmbossMaskFilter.h	/^    Light       fLight;$/;"	m	class:SkEmbossMaskFilter
fLineNumber	xml/SkXMLParser.h	/^    int fLineNumber;$/;"	m	class:SkXMLParserError
fLineWidth	gpu/GrGLInterface.h	/^    GrGLLineWidthProc fLineWidth;$/;"	m	struct:GrGLInterface
fLines	text/SkTextLayout.h	/^    SkTDArray<Line*> fLines;$/;"	m	class:SkTextLayout
fLinkProgram	gpu/GrGLInterface.h	/^    GrGLLinkProgramProc fLinkProgram;$/;"	m	struct:GrGLInterface
fList	core/SkPtrRecorder.h	/^    SkTDArray<Pair>  fList;$/;"	m	class:SkPtrSet
fList	effects/SkGroupShape.h	/^    SkTDArray<Rec> fList;$/;"	m	class:SkGroupShape
fList	gpu/GrClip.h	/^    SkSTArray<kPreAllocElements, Element>   fList;$/;"	m	class:GrClip
fList	utils/SkNWayCanvas.h	/^    SkTDArray<SkCanvas*> fList;$/;"	m	class:SkNWayCanvas
fListenTo	views/SkViewInflate.h	/^    SkTDArray<IDStr>    fListenTo, fBroadcastTo;$/;"	m	class:SkViewInflate
fLo	core/Sk64.h	/^    uint32_t fLo;   \/\/!< the low 32 bits of the number$/;"	m	struct:Sk64
fLoc	views/SkView.h	/^    SkPoint     fLoc;$/;"	m	class:SkView
fLocalBoundsCompareType	core/SkCanvas.h	/^    mutable SkRectCompareType fLocalBoundsCompareType;$/;"	m	class:SkCanvas
fLocalBoundsCompareTypeBW	core/SkCanvas.h	/^    mutable SkRectCompareType fLocalBoundsCompareTypeBW;$/;"	m	class:SkCanvas
fLocalBoundsCompareTypeDirty	core/SkCanvas.h	/^    mutable bool              fLocalBoundsCompareTypeDirty;$/;"	m	class:SkCanvas
fLocalBoundsCompareTypeDirtyBW	core/SkCanvas.h	/^    mutable bool              fLocalBoundsCompareTypeDirtyBW;$/;"	m	class:SkCanvas
fLocalM	views/SkTouchGesture.h	/^    SkMatrix        fLocalM, fGlobalM;$/;"	m	class:SkTouchGesture
fLocalMatrix	core/SkShader.h	/^    SkMatrix*           fLocalMatrix;$/;"	m	class:SkShader
fLocation	utils/SkCamera.h	/^    SkPoint3D   fLocation;$/;"	m	class:SkCamera3D
fLocation	utils/win/SkIStream.h	/^    ULARGE_INTEGER fLocation;$/;"	m	class:SkIStream
fLockCount	core/SkPixelRef.h	/^    int             fLockCount;$/;"	m	class:SkPixelRef
fLooper	core/SkPaint.h	/^    SkDrawLooper*   fLooper;$/;"	m	class:SkPaint
fLowestPPEM	utils/SkSfntUtils.h	/^    uint16_t    fLowestPPEM;$/;"	m	struct:SkSfntTable_head
fLsbDelta	core/SkScalerContext.h	/^    int8_t      fRsbDelta, fLsbDelta;  \/\/ used by auto-kerning$/;"	m	struct:SkGlyph
fLumBits	core/SkScalerContext.h	/^        uint32_t    fLumBits;$/;"	m	struct:SkScalerContext::Rec
fMBar	views/SkOSWindow_Win.h	/^    HMENU               fMBar;$/;"	m	class:SkOSWindow
fMCRec	core/SkCanvas.h	/^    MCRec*      fMCRec;$/;"	m	class:SkCanvas
fMCRecStorage	core/SkCanvas.h	/^    uint32_t    fMCRecStorage[32];$/;"	m	class:SkCanvas
fMCStack	core/SkCanvas.h	/^    SkDeque     fMCStack;$/;"	m	class:SkCanvas
fMSAASampleCount	views/SkOSWindow_Unix.h	/^    int fMSAASampleCount;$/;"	m	class:SkOSWindow
fMVMatrix	core/SkDraw.h	/^    const SkMatrix* fMVMatrix;      \/\/ optional$/;"	m	class:SkDraw
fMacStyle	utils/SkSfntUtils.h	/^    uint16_t    fMacStyle;$/;"	m	struct:SkSfntTable_head
fMagicNumber	utils/SkSfntUtils.h	/^    uint32_t    fMagicNumber;$/;"	m	struct:SkSfntTable_head
fMaker	animator/SkAnimator.h	/^    SkAnimateMaker* fMaker;$/;"	m	class:SkAnimator
fMap	pdf/SkPDFFont.h	/^        const SkTDArray<FontGlyphSetPair>* fMap;$/;"	m	class:SkPDFGlyphSetMap::F2BIter
fMap	pdf/SkPDFFont.h	/^    SkTDArray<FontGlyphSetPair> fMap;$/;"	m	class:SkPDFGlyphSetMap
fMapBuffer	gpu/GrGLInterface.h	/^    GrGLMapBufferProc fMapBuffer;$/;"	m	struct:GrGLInterface
fMargin	views/SkBorderView.h	/^    SkRect fMargin;$/;"	m	class:SkBorderView
fMargin	views/SkStackViewLayout.h	/^    SkRect      fMargin;$/;"	m	class:SkStackViewLayout
fMargin	views/SkStackViewLayout.h	/^    SkRect  fMargin;$/;"	m	class:SkFillViewLayout
fMargin	views/SkWidget.h	/^    SkPoint     fMargin;$/;"	m	class:SkStaticTextView
fMargin	views/SkWidget.h	/^    SkPoint  fMargin;$/;"	m	class:SkTextView
fMargin	views/SkWidgetViews.h	/^    SkPoint     fMargin;$/;"	m	class:SkStaticTextView
fMarginContentEntries	pdf/SkPDFDevice.h	/^    SkTScopedPtr<ContentEntry> fMarginContentEntries;$/;"	m	class:SkPDFDevice
fMaskFilter	core/SkPaint.h	/^    SkMaskFilter*   fMaskFilter;$/;"	m	class:SkPaint
fMaskFilter	core/SkScalerContext.h	/^    SkMaskFilter*   fMaskFilter;$/;"	m	class:SkScalerContext
fMaskFormat	core/SkScalerContext.h	/^        uint8_t     fMaskFormat;$/;"	m	struct:SkScalerContext::Rec
fMaskFormat	core/SkScalerContext.h	/^    uint8_t     fMaskFormat;$/;"	m	struct:SkGlyph
fMaskSamplers	gpu/GrPaint.h	/^    GrSamplerState              fMaskSamplers[kMaxMasks];$/;"	m	class:GrPaint
fMaskTextures	gpu/GrPaint.h	/^    GrTexture*      fMaskTextures[kMaxMasks];$/;"	m	class:GrPaint
fMat	core/SkMatrix.h	/^    SkScalar         fMat[9];$/;"	m	class:SkMatrix
fMat	effects/SkColorMatrix.h	/^    SkScalar    fMat[20];$/;"	m	class:SkColorMatrix
fMat	utils/SkCamera.h	/^    SkScalar    fMat[3][4];$/;"	m	struct:SkMatrix3D
fMat	utils/SkMatrix44.h	/^    SkMScalar fMat[4][4];$/;"	m	class:SkMatrix44
fMatrix	core/SkDraw.h	/^    const SkMatrix* fMatrix;        \/\/ required$/;"	m	class:SkDraw
fMatrix	core/SkPerspIter.h	/^    const SkMatrix& fMatrix;$/;"	m	class:SkPerspIter
fMatrix	effects/Sk2DPathEffect.h	/^    SkMatrix    fMatrix, fInverse;$/;"	m	class:Sk2DPathEffect
fMatrix	gpu/GrContext.h	/^    GrMatrix    fMatrix;$/;"	m	class:GrAutoMatrix
fMatrix	gpu/GrSamplerState.h	/^    GrMatrix            fMatrix;$/;"	m	class:GrSamplerState
fMatrix	utils/SkCamera.h	/^        SkMatrix3D  fMatrix;$/;"	m	struct:Sk3DView::Rec
fMatrix	utils/SkLayer.h	/^    SkMatrix    fMatrix;$/;"	m	class:SkLayer
fMatrix	views/SkImageView.h	/^    SkMatrix*   fMatrix;    \/\/ null or copy of caller's matrix ,,,,,$/;"	m	class:SkImageView
fMatrix	views/SkView.h	/^    SkMatrix    fMatrix;$/;"	m	class:SkView
fMatrix	views/SkWindow.h	/^    SkMatrix    fMatrix;$/;"	m	class:SkWindow
fMatrixIsInvertible	effects/Sk2DPathEffect.h	/^    bool        fMatrixIsInvertible;$/;"	m	class:Sk2DPathEffect
fMatrixRef	effects/SkGroupShape.h	/^        SkMatrixRef* fMatrixRef;$/;"	m	struct:SkGroupShape::Rec
fMax	views/SkProgressBarView.h	/^        int         fMax;$/;"	m	class:SkProgressBarView
fMax	views/SkWidget.h	/^    uint16_t    fValue, fMax;$/;"	m	class:SkProgressView
fMax	views/SkWidget.h	/^    uint16_t fValue, fMax;$/;"	m	class:SkSliderView
fMaxComponentContours	utils/SkSfntUtils.h	/^    uint16_t    fMaxComponentContours;$/;"	m	struct:SkSfntTable_maxp
fMaxComponentDepth	utils/SkSfntUtils.h	/^    uint16_t    fMaxComponentDepth;$/;"	m	struct:SkSfntTable_maxp
fMaxComponentElements	utils/SkSfntUtils.h	/^    uint16_t    fMaxComponentElements;$/;"	m	struct:SkSfntTable_maxp
fMaxComponentPoints	utils/SkSfntUtils.h	/^    uint16_t    fMaxComponentPoints;$/;"	m	struct:SkSfntTable_maxp
fMaxContours	utils/SkSfntUtils.h	/^    uint16_t    fMaxContours;$/;"	m	struct:SkSfntTable_maxp
fMaxFunctionDefs	utils/SkSfntUtils.h	/^    uint16_t    fMaxFunctionDefs;$/;"	m	struct:SkSfntTable_maxp
fMaxInstructionDefs	utils/SkSfntUtils.h	/^    uint16_t    fMaxInstructionDefs;$/;"	m	struct:SkSfntTable_maxp
fMaxLength	core/SkStream.h	/^    size_t  fMaxLength;$/;"	m	class:SkMemoryWStream
fMaxPoints	utils/SkSfntUtils.h	/^    uint16_t    fMaxPoints;$/;"	m	struct:SkSfntTable_maxp
fMaxSizeOfInstructions	utils/SkSfntUtils.h	/^    uint16_t    fMaxSizeOfInstructions;$/;"	m	struct:SkSfntTable_maxp
fMaxStackElements	utils/SkSfntUtils.h	/^    uint16_t    fMaxStackElements;$/;"	m	struct:SkSfntTable_maxp
fMaxStorage	utils/SkSfntUtils.h	/^    uint16_t    fMaxStorage;$/;"	m	struct:SkSfntTable_maxp
fMaxTwilightPoints	utils/SkSfntUtils.h	/^    uint16_t    fMaxTwilightPoints;$/;"	m	struct:SkSfntTable_maxp
fMaxZones	utils/SkSfntUtils.h	/^    uint16_t    fMaxZones;$/;"	m	struct:SkSfntTable_maxp
fMemArray	core/SkTArray.h	/^        void*    fMemArray;$/;"	m	union:SkTArray::__anon20
fMemoryBase	images/SkJpegUtility.h	/^    void*       fMemoryBase;$/;"	m	struct:skjpeg_source_mgr
fMemoryBaseSize	images/SkJpegUtility.h	/^    size_t      fMemoryBaseSize;$/;"	m	struct:skjpeg_source_mgr
fMenus	views/SkWindow.h	/^    SkTDArray<SkOSMenu*>    fMenus;$/;"	m	class:SkWindow
fMeta	views/SkEvent.h	/^    SkMetaData      fMeta;$/;"	m	class:SkEvent
fMetaData	core/SkDevice.h	/^    SkMetaData* fMetaData;$/;"	m	class:SkDevice
fMinSize	core/SkChunkAlloc.h	/^    size_t  fMinSize;$/;"	m	class:SkChunkAlloc
fMinSize	core/SkWriter32.h	/^    size_t      fMinSize;$/;"	m	class:SkWriter32
fMinToDump	core/SkTime.h	/^    SkMSec      fMinToDump;$/;"	m	class:SkAutoTime
fMinute	core/SkTime.h	/^        uint8_t  fMinute;        \/\/!< 0..59$/;"	m	struct:SkTime::DateTime
fMipMap	SkBitmap.h	/^    mutable MipMap* fMipMap;$/;"	m	class:SkBitmap
fMipMap	core/SkBitmap.h	/^    mutable MipMap* fMipMap;$/;"	m	class:SkBitmap
fMiterLimit	core/SkPaint.h	/^    SkScalar        fMiterLimit;$/;"	m	class:SkPaint
fMiterLimit	core/SkScalerContext.h	/^        SkScalar    fFrameWidth, fMiterLimit;$/;"	m	struct:SkScalerContext::Rec
fMiterLimit	core/SkStroke.h	/^    SkScalar    fWidth, fMiterLimit;$/;"	m	class:SkStroke
fMode	core/SkComposeShader.h	/^    SkXfermode* fMode;$/;"	m	class:SkComposeShader
fMode	effects/SkAvoidXfermode.h	/^    Mode        fMode;$/;"	m	class:SkAvoidXfermode
fMode	utils/SkTextBox.h	/^    uint8_t     fMode, fSpacingAlign;$/;"	m	class:SkTextBox
fMode	views/SkTextBox.h	/^    uint8_t     fMode, fSpacingAlign;$/;"	m	class:SkTextBox
fMode	views/SkWidget.h	/^    uint8_t     fMode;$/;"	m	class:SkStaticTextView
fMode	views/SkWidgetViews.h	/^    uint8_t     fMode;$/;"	m	class:SkStaticTextView
fModes	effects/SkTestImageFilters.h	/^    uint8_t*            fModes; \/\/ SkXfermode::Mode$/;"	m	class:SkMergeImageFilter
fMonth	core/SkTime.h	/^        uint8_t  fMonth;         \/\/!< 1..12$/;"	m	struct:SkTime::DateTime
fMoveTo	core/SkPath.h	/^        SkPoint         fMoveTo;$/;"	m	class:SkPath::Iter
fMoveTo	core/SkPath.h	/^        SkPoint         fMoveTo;$/;"	m	class:SkPath::RawIter
fMultiMaster	core/SkAdvancedTypefaceMetrics.h	/^    bool fMultiMaster;$/;"	m	class:SkAdvancedTypefaceMetrics
fMutex	core/SkGlobals.h	/^        SkMutex fMutex;$/;"	m	struct:SkGlobals::BootStrap
fMutex	core/SkPixelRef.h	/^    SkBaseMutex*    fMutex; \/\/ must remain in scope for the life of this object$/;"	m	class:SkPixelRef
fMutex	core/SkThread.h	/^    SkBaseMutex* fMutex;$/;"	m	class:SkAutoMutexAcquire
fMutex	core/SkThread_platform.h	/^    pthread_mutex_t  fMutex;$/;"	m	struct:SkBaseMutex
fMutex	images/SkFlipPixelRef.h	/^    SkMutex         fMutex;$/;"	m	class:SkFlipPixelRef
fName	core/SkStream.h	/^    SkString    fName;$/;"	m	class:SkFILEStream
fName	core/SkTDict.h	/^        const char* fName;$/;"	m	struct:SkTDict::Pair
fName	svg/SkSVGAttribute.h	/^    const char* fName;$/;"	m	struct:SkSVGAttribute
fName	xml/SkXMLWriter.h	/^        SkString    fName;$/;"	m	struct:SkXMLWriter::Elem
fNamesReused	xml/SkBML_WXMLParser.h	/^    int fAttrsCount, fNamesReused, fValuesReused;$/;"	m	class:BML_WXMLParser
fNativeCode	xml/SkXMLParser.h	/^    int fNativeCode;$/;"	m	class:SkXMLParserError
fNeedBitmap	images/SkMovie.h	/^    bool        fNeedBitmap;$/;"	m	class:SkMovie
fNeedClear	gpu/SkGpuDevice.h	/^    bool                fNeedClear;$/;"	m	class:SkGpuDevice
fNeedClose	core/SkPath.h	/^        SkBool8         fNeedClose;$/;"	m	class:SkPath::Iter
fNeedPrepareRenderTarget	gpu/SkGpuDevice.h	/^    bool                fNeedPrepareRenderTarget;$/;"	m	class:SkGpuDevice
fNeedToUpdate	utils/SkCamera.h	/^    mutable bool        fNeedToUpdate;$/;"	m	class:SkCamera3D
fNestLevel	utils/SkDumpCanvas.h	/^    int     fNestLevel; \/\/ for nesting recursive elements like pictures$/;"	m	class:SkDumpCanvas
fNext	core/SkAdvancedTypefaceMetrics.h	/^        SkTScopedPtr<AdvanceMetric<Data> > fNext;$/;"	m	struct:SkAdvancedTypefaceMetrics::AdvanceMetric
fNext	core/SkGlobals.h	/^        Rec*        fNext;$/;"	m	class:SkGlobals::Rec
fNext	core/SkMetaData.h	/^        Rec*        fNext;$/;"	m	struct:SkMetaData::Rec
fNext	core/SkTDStack.h	/^        Rec* fNext;$/;"	m	struct:SkTDStack::Rec
fNext	effects/SkLayerDrawLooper.h	/^        Rec*    fNext;$/;"	m	struct:SkLayerDrawLooper::Rec
fNext	gpu/GrResource.h	/^    GrResource* fNext;      \/\/ dl-list of resources per-GrGpu$/;"	m	class:GrResource
fNext	images/SkImageRef.h	/^    SkImageRef*  fPrev, *fNext;    $/;"	m	class:SkImageRef
fNext	svg/SkSVGPaintState.h	/^    SkSVGPaint* fNext;$/;"	m	class:SkSVGPaint
fNext	utils/SkCamera.h	/^        Rec*        fNext;$/;"	m	struct:Sk3DView::Rec
fNextAttrName	xml/SkBML_WXMLParser.h	/^    U8  fNextElem, fNextAttrName, fNextAttrValue;$/;"	m	class:BML_WXMLParser
fNextAttrValue	xml/SkBML_WXMLParser.h	/^    U8  fNextElem, fNextAttrName, fNextAttrValue;$/;"	m	class:BML_WXMLParser
fNextContext	core/SkScalerContext.h	/^    SkScalerContext* fNextContext;$/;"	m	class:SkScalerContext
fNextElem	xml/SkBML_WXMLParser.h	/^    U8  fNextElem, fNextAttrName, fNextAttrValue;$/;"	m	class:BML_WXMLParser
fNextEvent	views/SkEvent.h	/^    SkEvent*        fNextEvent; \/\/ either in the delay or normal event queue$/;"	m	class:SkEvent
fNextFirstPageObjNum	pdf/SkPDFCatalog.h	/^    uint32_t fNextFirstPageObjNum;$/;"	m	class:SkPDFCatalog
fNextObjNum	pdf/SkPDFCatalog.h	/^    uint32_t fNextObjNum;$/;"	m	class:SkPDFCatalog
fNextSibling	views/SkView.h	/^    SkView*     fNextSibling;$/;"	m	class:SkView
fNextSink	views/SkEventSink.h	/^    SkEventSink*    fNextSink;$/;"	m	class:SkEventSink
fNotifier	views/SkOSWindow_Mac.h	/^    void*   fNotifier;$/;"	m	class:SkOSWindow
fNotifier	views/SkOSWindow_iOS.h	/^    void*   fNotifier;$/;"	m	class:SkOSWindow
fNoun	xml/SkXMLParser.h	/^    SkString fNoun;$/;"	m	class:SkXMLParserError
fNow	core/SkTime.h	/^    SkMSec      fNow;$/;"	m	class:SkAutoTime
fNullBlitter	core/SkBlitter.h	/^    SkNullBlitter       fNullBlitter;$/;"	m	class:SkBlitterClipper
fNumGlyphs	utils/SkSfntUtils.h	/^    uint16_t    fNumGlyphs;$/;"	m	struct:SkSfntTable_maxp
fOSWin	views/SkOSWindow_Unix.h	/^  size_t fOSWin;$/;"	m	struct:SkUnixWindow
fObj	core/SkRefCnt.h	/^    SkRefCnt* fObj;$/;"	m	class:SkAutoRef
fObj	core/SkRefCnt.h	/^    T*  fObj;$/;"	m	class:SkAutoTUnref
fObj	core/SkRefCnt.h	/^    T* fObj;$/;"	m	class:SkRefPtr
fObj	core/SkTScopedPtr.h	/^    T* fObj;$/;"	m	class:SkTScopedPtr
fObj	core/SkTemplates.h	/^    T*  fObj;$/;"	m	class:SkAutoTDelete
fObj	core/SkTemplates.h	/^    T* fObj;$/;"	m	class:SkAutoTCallIProc
fObj	core/SkTemplates.h	/^    T* fObj;$/;"	m	class:SkAutoTCallVProc
fObj	pdf/SkPDFTypes.h	/^    SkRefPtr<SkPDFObject> fObj;$/;"	m	class:SkPDFObjRef
fObjNumAssigned	pdf/SkPDFCatalog.h	/^        bool fObjNumAssigned;$/;"	m	struct:SkPDFCatalog::Rec
fObject	pdf/SkPDFCatalog.h	/^        SkPDFObject* fObject;$/;"	m	struct:SkPDFCatalog::Rec
fObjects	utils/SkJSON.h	/^            Object** fObjects;$/;"	m	union:SkJSON::Array::__anon42
fObserver	utils/SkCamera.h	/^    SkPoint3D   fObserver;$/;"	m	class:SkCamera3D
fOffShader	views/SkWidget.h	/^    SkShader*   fOnShader, *fOffShader;$/;"	m	class:SkProgressView
fOffset	core/SkStream.h	/^    size_t  fOffset;$/;"	m	class:SkMemoryStream
fOffset	effects/SkLayerDrawLooper.h	/^        SkVector            fOffset;$/;"	m	struct:SkLayerDrawLooper::LayerInfo
fOffset	effects/SkTestImageFilters.h	/^    SkVector fOffset;$/;"	m	class:SkOffsetImageFilter
fOffset	svg/SkSVGAttribute.h	/^    size_t fOffset;$/;"	m	struct:SkSVGAttribute
fOldAGLContext	gpu/SkNativeGLContext.h	/^        AGLContext fOldAGLContext;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldContext	gpu/SkMesaGLContext.h	/^        Context fOldContext;$/;"	m	class:SkMesaGLContext::AutoContextRestore
fOldDisplay	gpu/SkNativeGLContext.h	/^        Display* fOldDisplay;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldDisplay	gpu/SkNativeGLContext.h	/^        EGLDisplay fOldDisplay;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldDrawable	gpu/SkNativeGLContext.h	/^        GLXDrawable fOldDrawable;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldEGLContext	gpu/SkNativeGLContext.h	/^        EGLContext fOldEGLContext;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldFormat	gpu/SkMesaGLContext.h	/^        GLint   fOldFormat;$/;"	m	class:SkMesaGLContext::AutoContextRestore
fOldGLXContext	gpu/SkNativeGLContext.h	/^        GLXContext fOldGLXContext;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldHDC	gpu/SkNativeGLContext.h	/^        HDC fOldHDC;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldHGLRC	gpu/SkNativeGLContext.h	/^        HGLRC fOldHGLRC;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldHeight	gpu/SkMesaGLContext.h	/^        GLint   fOldHeight;$/;"	m	class:SkMesaGLContext::AutoContextRestore
fOldImage	gpu/SkMesaGLContext.h	/^        void*   fOldImage;$/;"	m	class:SkMesaGLContext::AutoContextRestore
fOldSurface	gpu/SkNativeGLContext.h	/^        EGLSurface fOldSurface;$/;"	m	class:SkNativeGLContext::AutoContextRestore
fOldWidth	gpu/SkMesaGLContext.h	/^        GLint   fOldWidth;$/;"	m	class:SkMesaGLContext::AutoContextRestore
fOnFirstPage	pdf/SkPDFCatalog.h	/^        bool fOnFirstPage;$/;"	m	struct:SkPDFCatalog::Rec
fOnShader	views/SkWidget.h	/^    SkShader*   fOnShader, *fOffShader;$/;"	m	class:SkProgressView
fOp	core/SkClipStack.h	/^            SkRegion::Op    fOp;$/;"	m	struct:SkClipStack::B2FIter::Clip
fOp	gpu/GrClip.h	/^        SkRegion::Op fOp;$/;"	m	struct:GrClip::Element
fOpColor	effects/SkAvoidXfermode.h	/^    SkColor     fOpColor;$/;"	m	class:SkAvoidXfermode
fOpColor	effects/SkPixelXorXfermode.h	/^    SkColor fOpColor;$/;"	m	class:SkPixelXorXfermode
fOrient	views/SkStackViewLayout.h	/^    uint8_t     fOrient, fPack, fAlign, fRound;$/;"	m	class:SkStackViewLayout
fOrientation	utils/SkCamera.h	/^    mutable SkMatrix    fOrientation;$/;"	m	class:SkCamera3D
fOrig	views/SkView.h	/^        SkPoint     fOrig, fPrev, fCurr;$/;"	m	class:SkView::Click
fOrigBufferSize	core/SkStream.h	/^    size_t      fOrigBufferSize, fBufferSize, fBufferOffset;$/;"	m	class:SkBufferStream
fOrigFontID	core/SkScalerContext.h	/^        uint32_t    fOrigFontID;$/;"	m	struct:SkScalerContext::Rec
fOrigin	core/SkDevice.h	/^    SkIPoint    fOrigin;$/;"	m	class:SkDevice
fOrigin	utils/SkCamera.h	/^    SkPoint3D   fOrigin;$/;"	m	class:SkPatch3D
fOriginXDisp	core/SkAdvancedTypefaceMetrics.h	/^        int16_t fOriginXDisp;  \/\/ Horiz. displacement of the secondary origin.$/;"	m	struct:SkAdvancedTypefaceMetrics::VerticalMetric
fOriginYDisp	core/SkAdvancedTypefaceMetrics.h	/^        int16_t fOriginYDisp;  \/\/ Vert. displacement of the secondary origin.$/;"	m	struct:SkAdvancedTypefaceMetrics::VerticalMetric
fOriginal	pdf/SkPDFCatalog.h	/^        SkPDFObject* fOriginal;$/;"	m	struct:SkPDFCatalog::SubstituteMapping
fOuter	effects/SkTestImageFilters.h	/^    SkImageFilter*  fOuter;$/;"	m	class:SkComposeImageFilter
fOverflowed	core/SkClampRange.h	/^    bool fOverflowed;   \/\/ true if we had to clamp due to numerical overflow$/;"	m	struct:SkClampRange
fOwner	views/SkTouchGesture.h	/^        void*   fOwner;$/;"	m	struct:SkTouchGesture::Rec
fOwner	views/SkView.h	/^        void*       fOwner;$/;"	m	class:SkView::Click
fPDFShader	pdf/SkPDFShader.h	/^        SkPDFObject* fPDFShader;$/;"	m	class:SkPDFShader::ShaderCanonicalEntry
fPE0	core/SkPathEffect.h	/^    SkPathEffect* fPE0, *fPE1;$/;"	m	class:SkPairPathEffect
fPE1	core/SkPathEffect.h	/^    SkPathEffect* fPE0, *fPE1;$/;"	m	class:SkPairPathEffect
fPMColor	core/SkColorShader.h	/^    SkPMColor   fPMColor;       \/\/ cached after setContext()$/;"	m	class:SkColorShader
fPack	views/SkStackViewLayout.h	/^    uint8_t     fOrient, fPack, fAlign, fRound;$/;"	m	class:SkStackViewLayout
fPackedID	gpu/GrGlyph.h	/^    PackedID    fPackedID;$/;"	m	struct:GrGlyph
fPad	effects/SkEmbossMaskFilter.h	/^        uint16_t    fPad;$/;"	m	struct:SkEmbossMaskFilter::Light
fPage0	images/SkFlipPixelRef.h	/^    void*           fPage0; \/\/ points into fStorage;$/;"	m	class:SkFlipPixelRef
fPage1	images/SkFlipPixelRef.h	/^    void*           fPage1; \/\/ points into fStorage;$/;"	m	class:SkFlipPixelRef
fPageResources	pdf/SkPDFDocument.h	/^    SkTDArray<SkPDFObject*> fPageResources;$/;"	m	class:SkPDFDocument
fPageSize	pdf/SkPDFDevice.h	/^    SkISize fPageSize;$/;"	m	class:SkPDFDevice
fPageTree	pdf/SkPDFDocument.h	/^    SkTDArray<SkPDFDict*> fPageTree;$/;"	m	class:SkPDFDocument
fPages	pdf/SkPDFDocument.h	/^    SkTDArray<SkPDFPage*> fPages;$/;"	m	class:SkPDFDocument
fPaint	core/SkDraw.h	/^    SkPaint         fPaint;$/;"	m	class:SkTextToPathIter
fPaint	effects/SkLayerDrawLooper.h	/^        SkPaint fPaint;$/;"	m	struct:SkLayerDrawLooper::Rec
fPaint	effects/SkRectShape.h	/^    SkPaint fPaint;$/;"	m	class:SkPaintShape
fPaint	pdf/SkPDFGraphicState.h	/^        const SkPaint* fPaint;$/;"	m	class:SkPDFGraphicState::GSCanonicalEntry
fPaint	pdf/SkPDFGraphicState.h	/^    const SkPaint fPaint;$/;"	m	class:SkPDFGraphicState
fPaint	text/SkTextLayout.h	/^    SkPaint fPaint;$/;"	m	class:SkTextStyle
fPaint	utils/SkTextBox.h	/^    const SkPaint* fPaint;$/;"	m	class:SkTextBox
fPaint	views/SkBGViewArtist.h	/^    SkPaint fPaint;$/;"	m	class:SkBGViewArtist
fPaint	views/SkTextBox.h	/^    const SkPaint* fPaint;$/;"	m	class:SkTextBox
fPaint	views/SkWidget.h	/^    SkPaint         fPaint[kAttrCount];$/;"	m	class:SkGridView
fPaint	views/SkWidget.h	/^    SkPaint         fPaint[kAttrCount];$/;"	m	class:SkListView
fPaint	views/SkWidget.h	/^    SkPaint     fPaint;$/;"	m	class:SkStaticTextView
fPaint	views/SkWidget.h	/^    SkPaint  fPaint;$/;"	m	class:SkTextView
fPaint	views/SkWidgetViews.h	/^    SkPaint     fPaint;$/;"	m	class:SkStaticTextView
fPaintAlpha	core/SkShader.h	/^    uint8_t             fPaintAlpha;$/;"	m	class:SkShader
fPaintBits	effects/SkLayerDrawLooper.h	/^        BitFlags            fPaintBits;$/;"	m	struct:SkLayerDrawLooper::LayerInfo
fParent	utils/SkLayer.h	/^    SkLayer*    fParent;$/;"	m	class:SkLayer
fParent	views/SkView.h	/^    SkView*     fParent;$/;"	m	class:SkView
fParents	svg/SkSVGParser.h	/^    SkTDArray<SkSVGElement*> fParents;$/;"	m	class:SkSVGParser
fParser	xml/SkXMLParser.h	/^    void* fParser;$/;"	m	class:SkXMLParser
fParser	xml/SkXMLWriter.h	/^    SkXMLParser&        fParser;$/;"	m	class:SkXMLParserWriter
fPath	core/SkClipStack.h	/^            const SkPath*   fPath;  \/\/ if non-null, this is a path clip$/;"	m	struct:SkClipStack::B2FIter::Clip
fPath	core/SkDraw.h	/^    const SkPath*   fPath;      \/\/ returned in next$/;"	m	class:SkTextToPathIter
fPath	core/SkOSFile.h	/^        SkString    fPath, fSuffix;$/;"	m	class:SkOSFile::Iter
fPath	core/SkPathMeasure.h	/^    const SkPath*   fPath;$/;"	m	class:SkPathMeasure
fPath	core/SkScalerContext.h	/^    SkPath*     fPath;$/;"	m	struct:SkGlyph
fPath	effects/Sk1DPathEffect.h	/^    SkPath      fPath;          \/\/ copied from constructor$/;"	m	class:SkPath1DPathEffect
fPath	effects/Sk2DPathEffect.h	/^    SkPath  fPath;$/;"	m	class:SkPath2DPathEffect
fPath	gpu/GrClip.h	/^        SkPath       fPath;$/;"	m	struct:GrClip::Element
fPath	gpu/GrGlyph.h	/^    SkPath*     fPath;$/;"	m	struct:GrGlyph
fPath	utils/SkCullPoints.h	/^    SkPath*         fPath;$/;"	m	class:SkCullPointsPath
fPath16	core/SkOSFile.h	/^        uint16_t*   fPath16;$/;"	m	class:SkOSFile::Iter
fPathEffect	core/SkPaint.h	/^    SkPathEffect*   fPathEffect;$/;"	m	class:SkPaint
fPathEffect	core/SkScalerContext.h	/^    SkPathEffect*   fPathEffect;$/;"	m	class:SkScalerContext
fPathFill	gpu/GrClip.h	/^        GrPathFill   fPathFill;$/;"	m	struct:GrClip::Element
fPathRendererChain	gpu/GrContext.h	/^    GrPathRendererChain*        fPathRendererChain;$/;"	m	class:GrContext
fPeeker	images/SkImageDecoder.h	/^    Peeker*                 fPeeker;$/;"	m	class:SkImageDecoder
fPercent256	effects/SkKernel33MaskFilter.h	/^    int fPercent256;$/;"	m	class:SkKernel33ProcMaskFilter
fPerterb	effects/SkDiscretePathEffect.h	/^    SkScalar fSegLength, fPerterb;$/;"	m	class:SkDiscretePathEffect
fPicture	core/SkPicture.h	/^    SkPicture*  fPicture;$/;"	m	class:SkAutoPictureRecord
fPicture	utils/SkDeferredCanvas.h	/^        SkPicture fPicture;$/;"	m	class:SkDeferredCanvas::DeferredDevice
fPixelLockCount	SkBitmap.h	/^    mutable int         fPixelLockCount;$/;"	m	class:SkBitmap
fPixelLockCount	core/SkBitmap.h	/^    mutable int         fPixelLockCount;$/;"	m	class:SkBitmap
fPixelRef	SkBitmap.h	/^    mutable SkPixelRef* fPixelRef;$/;"	m	class:SkBitmap
fPixelRef	core/SkBitmap.h	/^    mutable SkPixelRef* fPixelRef;$/;"	m	class:SkBitmap
fPixelRefOffset	SkBitmap.h	/^    mutable size_t      fPixelRefOffset;$/;"	m	class:SkBitmap
fPixelRefOffset	core/SkBitmap.h	/^    mutable size_t      fPixelRefOffset;$/;"	m	class:SkBitmap
fPixelStorei	gpu/GrGLInterface.h	/^    GrGLPixelStoreiProc fPixelStorei;$/;"	m	struct:GrGLInterface
fPixels	SkBitmap.cpp	/^    void*       fPixels;$/;"	m	struct:MipLevel	file:
fPixels	SkBitmap.h	/^    mutable void*       fPixels;$/;"	m	class:SkBitmap
fPixels	core/SkBitmap.h	/^    mutable void*       fPixels;$/;"	m	class:SkBitmap
fPixels	core/SkPixelRef.h	/^    void*           fPixels;$/;"	m	class:SkPixelRef
fPixmap	gpu/SkNativeGLContext.h	/^    Pixmap fPixmap;$/;"	m	class:SkNativeGLContext
fPlayback	core/SkPicture.h	/^    SkPicturePlayback* fPlayback;$/;"	m	class:SkPicture
fPoint	core/SkShader.h	/^        SkPoint     fPoint[2];      \/\/!< Type specific, see above.$/;"	m	struct:SkShader::GradientInfo
fPoints	core/SkEdgeClipper.h	/^    SkPoint         fPoints[kMaxPoints];$/;"	m	class:SkEdgeClipper
fPopulated	pdf/SkPDFGraphicState.h	/^    bool fPopulated;$/;"	m	class:SkPDFGraphicState
fPos	core/SkBuffer.h	/^    char* fPos;$/;"	m	class:SkWBuffer
fPos	core/SkBuffer.h	/^    const char* fPos;$/;"	m	class:SkRBuffer
fPos	core/SkDeque.h	/^        char*           fPos;$/;"	m	class:SkDeque::F2BIter
fPost2x2	core/SkScalerContext.h	/^        SkScalar    fPost2x2[2][2];$/;"	m	struct:SkScalerContext::Rec
fPostTranslate	effects/SkLayerDrawLooper.h	/^        bool                fPostTranslate; \/\/!< applies to fOffset$/;"	m	struct:SkLayerDrawLooper::LayerInfo
fPreAllocMemArray	core/SkTArray.h	/^    void*    fPreAllocMemArray;$/;"	m	class:SkTArray
fPreLocked	core/SkPixelRef.h	/^    bool    fPreLocked;$/;"	m	class:SkPixelRef
fPreScaleX	core/SkScalerContext.h	/^        SkScalar    fTextSize, fPreScaleX, fPreSkewX;$/;"	m	struct:SkScalerContext::Rec
fPreSkewX	core/SkScalerContext.h	/^        SkScalar    fTextSize, fPreScaleX, fPreSkewX;$/;"	m	struct:SkScalerContext::Rec
fPrefTable	images/SkImageDecoder.h	/^    SkBitmap::Config        fPrefTable[6];  \/\/ use if fUsePrefTable is true$/;"	m	class:SkImageDecoder
fPrev	images/SkImageRef.h	/^    SkImageRef*  fPrev, *fNext;    $/;"	m	class:SkImageRef
fPrev	views/SkView.h	/^        SkPoint     fOrig, fPrev, fCurr;$/;"	m	class:SkView::Click
fPrevAdvance	core/SkDraw.h	/^    SkFixed         fPrevAdvance;$/;"	m	class:SkTextToPathIter
fPrevPt	utils/SkCullPoints.h	/^    SkIPoint     fPrevPt;        \/\/ private state$/;"	m	class:SkCullPoints
fPrevResult	utils/SkCullPoints.h	/^    LineToResult fPrevResult;   \/\/ private state$/;"	m	class:SkCullPoints
fPrevRsbDelta	core/SkAutoKern.h	/^    int   fPrevRsbDelta;$/;"	m	class:SkAutoKern
fPrevSibling	views/SkView.h	/^    SkView*     fPrevSibling;$/;"	m	class:SkView
fPrevT	views/SkTouchGesture.h	/^        SkMSec  fPrevT, fLastT;$/;"	m	struct:SkTouchGesture::Rec
fPrevTarget	gpu/GrContext.h	/^        GrRenderTarget* fPrevTarget;$/;"	m	class:GrContext::AutoRenderTarget
fPrevX	views/SkTouchGesture.h	/^        float   fPrevX, fPrevY;$/;"	m	struct:SkTouchGesture::Rec
fPrevY	views/SkTouchGesture.h	/^        float   fPrevX, fPrevY;$/;"	m	struct:SkTouchGesture::Rec
fPrevious	gpu/GrResource.h	/^    GrResource* fPrevious;$/;"	m	class:GrResource
fProc	core/SkXfermode.h	/^    SkXfermodeProc  fProc;$/;"	m	class:SkProcXfermode
fProc	effects/SkColorMatrixFilter.h	/^    Proc        fProc;$/;"	m	class:SkColorMatrixFilter
fProc	utils/SkDumpCanvas.h	/^    void (*fProc)(const char*, void*);$/;"	m	class:SkFormatDumper
fProcs	core/SkDraw.h	/^    SkDrawProcs*    fProcs;         \/\/ optional$/;"	m	class:SkDraw
fProgress	views/SkProgressBarView.h	/^        int         fProgress;$/;"	m	class:SkProgressBarView
fProxy	core/SkStream.h	/^    SkStream*   fProxy;$/;"	m	class:SkBufferStream
fProxy	utils/SkProxyCanvas.h	/^    SkCanvas*   fProxy;$/;"	m	class:SkProxyCanvas
fPtIndex	core/SkPathMeasure.h	/^        unsigned    fPtIndex : 15; \/\/ index into the fPts array$/;"	m	struct:SkPathMeasure::Segment
fPtr	SkTypes.h	/^    void*       fPtr;$/;"	m	class:SkAutoSMalloc
fPtr	SkTypes.h	/^    void*   fPtr;$/;"	m	class:SkAutoMalloc
fPtr	SkTypes.h	/^    void* fPtr;$/;"	m	class:SkAutoFree
fPtr	core/SkData.h	/^    const void* fPtr;$/;"	m	class:SkData
fPtr	core/SkPtrRecorder.h	/^        void*       fPtr;   \/\/ never NULL$/;"	m	struct:SkPtrSet::Pair
fPtr	core/SkRelay.h	/^    T* fPtr;$/;"	m	class:SkTRelay
fPtr	core/SkTLazy.h	/^    T*   fPtr; \/\/ NULL or fStorage$/;"	m	class:SkTLazy
fPtr	core/SkTemplates.h	/^        void*   fPtr;$/;"	m	union:SkAlignedSStorage::__anon24
fPtr	core/SkTemplates.h	/^    T*          fPtr;$/;"	m	class:SkAutoSTMalloc
fPtr	core/SkTemplates.h	/^    T*  fPtr;$/;"	m	class:SkAutoTMalloc
fPtr	core/SkTypes.h	/^    void*       fPtr;$/;"	m	class:SkAutoSMalloc
fPtr	core/SkTypes.h	/^    void*   fPtr;$/;"	m	class:SkAutoMalloc
fPtr	core/SkTypes.h	/^    void* fPtr;$/;"	m	class:SkAutoFree
fPtr	gpu/GrTemplates.h	/^    T* fPtr;$/;"	m	class:GrAutoTPtrValueRestore
fPtr	utils/win/SkTScopedComPtr.h	/^    T *fPtr;$/;"	m	class:SkTScopedComPtr
fPts	core/SkPath.h	/^        const SkPoint*  fPts;$/;"	m	class:SkPath::Iter
fPts	core/SkPath.h	/^        const SkPoint*  fPts;$/;"	m	class:SkPath::RawIter
fPts	core/SkPath.h	/^    SkTDArray<SkPoint>  fPts;$/;"	m	class:SkPath
fPts	core/SkPathMeasure.h	/^    SkTDArray<SkPoint>  fPts; \/\/ Points used to define the segments$/;"	m	class:SkPathMeasure
fPts	utils/SkBoundaryPatch.h	/^    SkPoint fPts[13];$/;"	m	class:SkCubicBoundary
fPts	utils/SkBoundaryPatch.h	/^    SkPoint fPts[4];$/;"	m	class:SkLineBoundary
fQueryCounter	gpu/GrGLInterface.h	/^    GrGLQueryCounterProc fQueryCounter;$/;"	m	struct:GrGLInterface
fR	utils/SkCullPoints.h	/^    SkIRect      fR;             \/\/ the caller's rectangle$/;"	m	class:SkCullPoints
fRC	core/SkDraw.h	/^    const SkRasterClip* fRC;        \/\/ required$/;"	m	class:SkDraw
fRCArray	core/SkFlattenable.h	/^    SkRefCnt** fRCArray;$/;"	m	class:SkFlattenableReadBuffer
fRCCount	core/SkFlattenable.h	/^    int        fRCCount;$/;"	m	class:SkFlattenableReadBuffer
fRCSet	core/SkFlattenable.h	/^    SkRefCntSet*    fRCSet;$/;"	m	class:SkFlattenableWriteBuffer
fRSB	core/SkBounder.h	/^        SkIPoint    fRSB;   \/\/!< fixed-point right-side-bearing of the glyph$/;"	m	struct:SkBounder::GlyphRec
fRadial2CenterX1	gpu/GrSamplerState.h	/^    GrScalar            fRadial2CenterX1;$/;"	m	class:GrSamplerState
fRadial2PosRoot	gpu/GrSamplerState.h	/^    SkBool8             fRadial2PosRoot;$/;"	m	class:GrSamplerState
fRadial2Radius0	gpu/GrSamplerState.h	/^    GrScalar            fRadial2Radius0;$/;"	m	class:GrSamplerState
fRadii	effects/SkRectShape.h	/^    SkSize  fRadii;$/;"	m	class:SkRectShape
fRadius	core/SkMaskFilter.h	/^        SkScalar fRadius;$/;"	m	struct:SkMaskFilter::BlurInfo
fRadius	core/SkShader.h	/^        SkScalar    fRadius[2];     \/\/!< Type specific, see above.$/;"	m	struct:SkShader::GradientInfo
fRadius	effects/SkCornerPathEffect.h	/^    SkScalar    fRadius;$/;"	m	class:SkCornerPathEffect
fRadius	effects/SkMorphologyImageFilter.h	/^    SkISize    fRadius;$/;"	m	class:SkMorphologyImageFilter
fRasterizer	core/SkPaint.h	/^    SkRasterizer*   fRasterizer;$/;"	m	class:SkPaint
fRasterizer	core/SkScalerContext.h	/^    SkRasterizer*   fRasterizer;$/;"	m	class:SkScalerContext
fRawPixelGenerationID	SkBitmap.h	/^    mutable int         fRawPixelGenerationID;$/;"	m	class:SkBitmap
fRawPixelGenerationID	core/SkBitmap.h	/^    mutable int         fRawPixelGenerationID;$/;"	m	class:SkBitmap
fReadBuffer	gpu/GrGLInterface.h	/^    GrGLReadBufferProc fReadBuffer;$/;"	m	struct:GrGLInterface
fReadPixels	gpu/GrGLInterface.h	/^    GrGLReadPixelsProc fReadPixels;$/;"	m	struct:GrGLInterface
fReader	core/SkOrderedReadBuffer.h	/^    SkReader32 fReader;$/;"	m	class:SkOrderedReadBuffer
fRec	core/SkMetaData.h	/^        Rec* fRec;$/;"	m	class:SkMetaData::Iter
fRec	core/SkMetaData.h	/^    Rec*    fRec;$/;"	m	class:SkMetaData
fRec	core/SkScalerContext.h	/^    Rec         fRec;$/;"	m	class:SkScalerContext
fRec	core/SkString.h	/^    Rec* fRec;$/;"	m	class:SkString
fRec	core/SkTDStack.h	/^    Rec*    fRec;$/;"	m	class:SkTDStack
fRec	utils/SkCamera.h	/^    Rec*        fRec;$/;"	m	class:Sk3DView
fRecord	core/SkPicture.h	/^    SkPictureRecord* fRecord;$/;"	m	class:SkPicture
fRecordingCanvas	utils/SkDeferredCanvas.h	/^        SkCanvas* fRecordingCanvas;$/;"	m	class:SkDeferredCanvas::DeferredDevice
fRecs	effects/SkLayerDrawLooper.h	/^    Rec*    fRecs;$/;"	m	class:SkLayerDrawLooper
fRect	core/SkClipStack.h	/^            const SkRect*   fRect;  \/\/ if non-null, this is a rect clip$/;"	m	struct:SkClipStack::B2FIter::Clip
fRect	core/SkRegion.h	/^        SkIRect         fRect;$/;"	m	class:SkRegion::Iterator
fRect	core/SkRegion.h	/^        SkIRect     fRect;$/;"	m	class:SkRegion::Cliperator
fRect	gpu/GrClip.h	/^        GrRect       fRect;$/;"	m	struct:GrClip::Element
fRectBlitter	core/SkBlitter.h	/^    SkRectClipBlitter   fRectBlitter;$/;"	m	class:SkBlitterClipper
fRef	core/SkData.h	/^    SkData*     fRef;$/;"	m	class:SkAutoDataUnref
fRef	images/SkFlipPixelRef.h	/^    SkFlipPixelRef* fRef;$/;"	m	class:SkAutoFlipUpdate
fRefCnt	SkBitmap.cpp	/^    int32_t fRefCnt;$/;"	m	struct:SkBitmap::MipMap	file:
fRefCnt	core/SkRefCnt.h	/^    mutable int32_t fRefCnt;$/;"	m	class:SkRefCnt
fRefCnt	core/SkString.h	/^        int32_t     fRefCnt;$/;"	m	struct:SkString::Rec
fRefCnt	effects/SkGroupShape.h	/^    mutable int32_t fRefCnt;$/;"	m	class:SkTRefCnt
fRefcon	utils/SkDumpCanvas.h	/^    void* fRefcon;$/;"	m	class:SkFormatDumper
fReleaseProc	core/SkData.h	/^    ReleaseProc fReleaseProc;$/;"	m	class:SkData
fReleaseProcContext	core/SkData.h	/^    void*       fReleaseProcContext;$/;"	m	class:SkData
fRenderTarget	gpu/GrTexture.h	/^    GrRenderTarget* fRenderTarget; \/\/ texture refs its rt representation$/;"	m	class:GrTexture
fRenderTarget	gpu/SkGpuDevice.h	/^    GrRenderTarget*     fRenderTarget;$/;"	m	class:SkGpuDevice
fRenderTarget	gpu/SkGrTexturePixelRef.h	/^    GrRenderTarget*  fRenderTarget;$/;"	m	class:SkGrRenderTargetPixelRef
fRenderTargetHandle	gpu/GrTypes.h	/^    GrPlatform3DObject              fRenderTargetHandle;$/;"	m	struct:GrPlatformRenderTargetDesc
fRenderbufferStorage	gpu/GrGLInterface.h	/^    GrGLRenderbufferStorageProc fRenderbufferStorage;$/;"	m	struct:GrGLInterface
fRenderbufferStorageMultisample	gpu/GrGLInterface.h	/^    GrGLRenderbufferStorageMultisampleProc fRenderbufferStorageMultisample;$/;"	m	struct:GrGLInterface
fRepeat	utils/SkInterpolator.h	/^    SkScalar fRepeat;$/;"	m	class:SkInterpolatorBase
fRequiresAA	gpu/GrClip.h	/^    bool                fRequiresAA;$/;"	m	class:GrClip
fReserve	core/SkTDArray.h	/^    size_t  fReserve, fCount;$/;"	m	class:SkTDArray
fReserveCount	core/SkTArray.h	/^    int fReserveCount;$/;"	m	class:SkTArray
fResolveMultisampleFramebuffer	gpu/GrGLInterface.h	/^    GrGLResolveMultisampleFramebufferProc fResolveMultisampleFramebuffer;$/;"	m	struct:GrGLInterface
fResolveRect	gpu/GrRenderTarget.h	/^    GrIRect           fResolveRect;$/;"	m	class:GrRenderTarget
fResourceDict	pdf/SkPDFDevice.h	/^    SkRefPtr<SkPDFDict> fResourceDict;$/;"	m	class:SkPDFDevice
fResources	pdf/SkPDFFont.h	/^    SkTDArray<SkPDFObject*> fResources;$/;"	m	class:SkPDFFont
fResources	pdf/SkPDFFormXObject.h	/^    SkTDArray<SkPDFObject*> fResources;$/;"	m	class:SkPDFFormXObject
fResources	pdf/SkPDFGraphicState.h	/^    SkTDArray<SkPDFObject*> fResources;$/;"	m	class:SkPDFGraphicState
fResources	pdf/SkPDFImage.h	/^    SkTDArray<SkPDFObject*> fResources;$/;"	m	class:SkPDFImage
fResult	effects/SkColorMatrixFilter.h	/^        int32_t fResult[4];$/;"	m	struct:SkColorMatrixFilter::State
fRevision	utils/SkSfntUtils.h	/^    SkFixed     fRevision;$/;"	m	struct:SkSfntTable_head
fRgn	core/SkBlitter.h	/^    const SkRegion* fRgn;$/;"	m	class:SkRgnClipBlitter
fRgn	core/SkRegion.h	/^        const SkRegion* fRgn;$/;"	m	class:SkRegion::Iterator
fRgnBlitter	core/SkBlitter.h	/^    SkRgnClipBlitter    fRgnBlitter;$/;"	m	class:SkBlitterClipper
fRight	SkRect.h	/^    SkScalar    fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkRect
fRight	SkRect.h	/^    int32_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkIRect
fRight	core/SkRect.h	/^    SkScalar    fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkRect
fRight	core/SkRect.h	/^    int32_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkIRect
fRight	core/SkRegion.h	/^        int     fLeft, fRight;$/;"	m	class:SkRegion::Spanerator
fRight	gpu/GrRect.h	/^    int16_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:GrIRect16
fRight	views/SkBorderView.h	/^    SkScalar fLeft, fRight, fTop, fBottom;  \/\/margin on each side$/;"	m	class:SkBorderView
fRoot	xml/SkDOM.h	/^    Node*           fRoot;$/;"	m	class:SkDOM
fRound	views/SkStackViewLayout.h	/^    uint8_t     fOrient, fPack, fAlign, fRound;$/;"	m	class:SkStackViewLayout
fRowBytes	SkBitmap.cpp	/^    uint32_t    fRowBytes;$/;"	m	struct:MipLevel	file:
fRowBytes	SkBitmap.h	/^    uint32_t    fRowBytes;$/;"	m	class:SkBitmap
fRowBytes	core/SkBitmap.h	/^    uint32_t    fRowBytes;$/;"	m	class:SkBitmap
fRowBytes	core/SkMask.h	/^    uint32_t    fRowBytes;$/;"	m	struct:SkMask
fRowHeight	views/SkWidget.h	/^    SkScalar        fRowHeight;$/;"	m	class:SkListView
fRsbDelta	core/SkScalerContext.h	/^    int8_t      fRsbDelta, fLsbDelta;  \/\/ used by auto-kerning$/;"	m	struct:SkGlyph
fRunHead	core/SkRegion.h	/^    RunHead*    fRunHead;$/;"	m	class:SkRegion
fRuns	core/SkRegion.h	/^        const RunType*  fRuns;$/;"	m	class:SkRegion::Iterator
fRuns	core/SkRegion.h	/^        const SkRegion::RunType* fRuns;$/;"	m	class:SkRegion::Spanerator
fRuntime	xml/SkJS.h	/^    JSRuntime *fRuntime;$/;"	m	class:SkJS
fSMask	pdf/SkPDFGraphicState.h	/^    bool fSMask;$/;"	m	class:SkPDFGraphicState
fSX	core/SkPerspIter.h	/^    SkScalar        fSX, fSY;$/;"	m	class:SkPerspIter
fSY	core/SkPerspIter.h	/^    SkScalar        fSX, fSY;$/;"	m	class:SkPerspIter
fSampleCnt	gpu/GrRenderTarget.h	/^    int               fSampleCnt;$/;"	m	class:GrRenderTarget
fSampleCnt	gpu/GrTypes.h	/^    int                             fSampleCnt;$/;"	m	struct:GrPlatformRenderTargetDesc
fSampleCnt	gpu/GrTypes.h	/^    int                             fSampleCnt;$/;"	m	struct:GrPlatformTextureDesc
fSampleCnt	gpu/GrTypes.h	/^    int fSampleCnt;$/;"	m	struct:GrTextureDesc
fSampleSize	images/SkImageDecoder.h	/^    int                     fSampleSize;$/;"	m	class:SkImageDecoder
fSampleSize	images/SkImageRef.h	/^    int                     fSampleSize;$/;"	m	class:SkImageRef
fSaveCount	core/SkCanvas.h	/^    int         fSaveCount;$/;"	m	class:SkAutoCanvasRestore
fSaveCount	core/SkClipStack.h	/^    int     fSaveCount;$/;"	m	class:SkClipStack
fSaveLayerCount	core/SkCanvas.h	/^    int         fSaveLayerCount;    \/\/ number of successful saveLayer calls$/;"	m	class:SkCanvas
fScalarsArray	utils/SkInterpolator.h	/^    SkScalar(* fScalarsArray)[10];$/;"	m	class:SkInterpolator
fScale	core/SkDraw.h	/^    SkScalar        fScale;$/;"	m	class:SkTextToPathIter
fScale	effects/SkTestImageFilters.h	/^    SkScalar fScale;$/;"	m	class:SkDownSampleImageFilter
fScale	utils/SkUnitMappers.h	/^    SkFract fScale;    \/\/ computed from fSegments$/;"	m	class:SkDiscreteMapper
fScaleToFit	effects/SkDashPathEffect.h	/^    bool        fScaleToFit;$/;"	m	class:SkDashPathEffect
fScaleType	views/SkImageView.h	/^    uint8_t     fScaleType;$/;"	m	class:SkImageView
fScissor	gpu/GrGLInterface.h	/^    GrGLScissorProc fScissor;$/;"	m	struct:GrGLInterface
fScreen	views/SkOSWindow_SDL.h	/^    SDL_Surface* fScreen;$/;"	m	class:SkOSWindow
fScrollBar	views/SkWidget.h	/^    SkView*         fScrollBar;$/;"	m	class:SkGridView
fScrollBar	views/SkWidgetViews.h	/^    SkScrollBarView*    fScrollBar;$/;"	m	class:SkListView
fScrollIndex	views/SkWidget.h	/^    int             fScrollIndex;   \/\/ logical index of top-most visible row$/;"	m	class:SkListView
fScrollIndex	views/SkWidgetViews.h	/^    int16_t         fScrollIndex, fCurrIndex;$/;"	m	class:SkListView
fSecond	core/SkTime.h	/^        uint8_t  fSecond;        \/\/!< 0..59$/;"	m	struct:SkTime::DateTime
fSecondPageFirstResourceIndex	pdf/SkPDFDocument.h	/^    int fSecondPageFirstResourceIndex;$/;"	m	class:SkPDFDocument
fSeed	core/SkRandom.h	/^    uint32_t fSeed;$/;"	m	class:SkRandom
fSegLength	effects/SkDiscretePathEffect.h	/^    SkScalar fSegLength, fPerterb;$/;"	m	class:SkDiscretePathEffect
fSegmentMask	core/SkPath.h	/^    uint8_t             fSegmentMask;$/;"	m	class:SkPath
fSegmentState	core/SkPath.h	/^        SkBool8         fSegmentState;$/;"	m	class:SkPath::Iter
fSegments	core/SkPathMeasure.h	/^    SkTDArray<Segment>  fSegments;$/;"	m	class:SkPathMeasure
fSegments	utils/SkUnitMappers.h	/^    int     fSegments;$/;"	m	class:SkDiscreteMapper
fSetFlags	effects/SkPaintFlagsDrawFilter.h	/^    uint16_t    fSetFlags;      \/\/ user specified$/;"	m	class:SkPaintFlagsDrawFilter
fShader	core/SkColorFilter.h	/^    SkShader*       fShader;$/;"	m	class:SkFilterShader
fShader	core/SkPaint.h	/^    SkShader*       fShader;$/;"	m	class:SkPaint
fShaderA	core/SkComposeShader.h	/^    SkShader*   fShaderA;$/;"	m	class:SkComposeShader
fShaderB	core/SkComposeShader.h	/^    SkShader*   fShaderB;$/;"	m	class:SkComposeShader
fShaderResources	pdf/SkPDFDevice.h	/^    SkTDArray<SkPDFObject*> fShaderResources;$/;"	m	class:SkPDFDevice
fShaderSource	gpu/GrGLInterface.h	/^    GrGLShaderSourceProc fShaderSource;$/;"	m	struct:GrGLInterface
fShape	effects/SkGroupShape.h	/^        SkShape*     fShape;$/;"	m	struct:SkGroupShape::Rec
fShift	effects/SkColorMatrixFilter.h	/^        int     fShift;$/;"	m	struct:SkColorMatrixFilter::State
fShift	effects/SkKernel33MaskFilter.h	/^    int fShift;$/;"	m	class:SkKernel33MaskFilter
fShiftFixedX	gpu/GrTexture.h	/^    int      fShiftFixedX;$/;"	m	class:GrTexture
fShiftFixedY	gpu/GrTexture.h	/^    int      fShiftFixedY;$/;"	m	class:GrTexture
fShouldCancelDecode	images/SkImageDecoder.h	/^    mutable bool            fShouldCancelDecode;$/;"	m	class:SkImageDecoder
fShownLength	views/SkScrollBarView.h	/^    unsigned    fTotalLength, fStartPoint, fShownLength;$/;"	m	class:SkScrollBarView
fSigma	effects/SkBlurImageFilter.h	/^    SkSize   fSigma;$/;"	m	class:SkBlurImageFilter
fSignBitInt	core/SkFloatBits.h	/^    int32_t fSignBitInt;$/;"	m	union:SkFloatIntUnion
fSingleBlock	core/SkWriter32.h	/^    char*       fSingleBlock;$/;"	m	class:SkWriter32
fSingleBlockSize	core/SkWriter32.h	/^    uint32_t    fSingleBlockSize;$/;"	m	class:SkWriter32
fSize	SkTypes.h	/^    size_t      fSize;  \/\/ can be larger than the requested size (see kReuse)$/;"	m	class:SkAutoSMalloc
fSize	SkTypes.h	/^    size_t  fSize;  \/\/ can be larger than the requested size (see kReuse)$/;"	m	class:SkAutoMalloc
fSize	core/SkData.h	/^    size_t      fSize;$/;"	m	class:SkAutoDataUnref
fSize	core/SkData.h	/^    size_t      fSize;$/;"	m	class:SkData
fSize	core/SkMMapStream.h	/^    size_t  fSize;$/;"	m	class:SkMMAPStream
fSize	core/SkMallocPixelRef.h	/^    size_t          fSize;$/;"	m	class:SkMallocPixelRef
fSize	core/SkTypes.h	/^    size_t      fSize;  \/\/ can be larger than the requested size (see kReuse)$/;"	m	class:SkAutoSMalloc
fSize	core/SkTypes.h	/^    size_t  fSize;  \/\/ can be larger than the requested size (see kReuse)$/;"	m	class:SkAutoMalloc
fSize	core/SkWriter32.h	/^    uint32_t    fSize;$/;"	m	class:SkWriter32
fSize	images/SkFlipPixelRef.h	/^    size_t          fSize;  \/\/ size of 1 page. fStorage holds 2 pages$/;"	m	class:SkFlipPixelRef
fSkStream	utils/win/SkIStream.h	/^    SkStream *fSkStream;$/;"	m	class:SkIStream
fSkWStream	utils/win/SkIStream.h	/^    SkWStream *fSkWStream;$/;"	m	class:SkWIStream
fSkinName	views/SkWidgetViews.h	/^    SkString        fSkinName;$/;"	m	class:SkListView
fSlot	utils/SkJSON.h	/^            Slot* fSlot;$/;"	m	class:SkJSON::Object::Iter
fSlotName	views/SkOSMenu.h	/^        SkString        fSlotName;$/;"	m	class:SkOSMenu::Item
fSlots	core/SkTDStack.h	/^        T    fSlots[kSlotCount];$/;"	m	struct:SkTDStack::Rec
fSoftwarePathRenderer	gpu/GrContext.h	/^    GrSoftwarePathRenderer*     fSoftwarePathRenderer;$/;"	m	class:GrContext
fSource	views/SkWidget.h	/^    SkListSource*   fSource;$/;"	m	class:SkGridView
fSource	views/SkWidget.h	/^    SkListSource*   fSource;$/;"	m	class:SkListView
fSource	views/SkWidgetViews.h	/^    SkListSource*   fSource;$/;"	m	class:SkListView
fSourcePath	core/SkPath.h	/^    const SkPath*       fSourcePath;$/;"	m	class:SkPath
fSpacer	views/SkStackViewLayout.h	/^    SkScalar    fSpacer;$/;"	m	class:SkStackViewLayout
fSpacingAdd	utils/SkTextBox.h	/^    SkScalar    fSpacingMul, fSpacingAdd;$/;"	m	class:SkTextBox
fSpacingAdd	views/SkTextBox.h	/^    SkScalar    fSpacingMul, fSpacingAdd;$/;"	m	class:SkTextBox
fSpacingAlign	utils/SkTextBox.h	/^    uint8_t     fMode, fSpacingAlign;$/;"	m	class:SkTextBox
fSpacingAlign	views/SkTextBox.h	/^    uint8_t     fMode, fSpacingAlign;$/;"	m	class:SkTextBox
fSpacingAlign	views/SkWidget.h	/^    uint8_t     fSpacingAlign;$/;"	m	class:SkStaticTextView
fSpacingAlign	views/SkWidgetViews.h	/^    uint8_t     fSpacingAlign;$/;"	m	class:SkStaticTextView
fSpacingMul	utils/SkTextBox.h	/^    SkScalar    fSpacingMul, fSpacingAdd;$/;"	m	class:SkTextBox
fSpacingMul	views/SkTextBox.h	/^    SkScalar    fSpacingMul, fSpacingAdd;$/;"	m	class:SkTextBox
fSpecular	effects/SkEmbossMaskFilter.h	/^        uint8_t     fSpecular;      \/\/ exponent, 4.4 right now$/;"	m	struct:SkEmbossMaskFilter::Light
fSpeed0	views/SkTouchGesture.h	/^    SkScalar    fSpeed0;$/;"	m	struct:SkFlingState
fSrcBlendCoeff	gpu/GrPaint.h	/^    GrBlendCoeff                fSrcBlendCoeff;$/;"	m	class:GrPaint
fStageClassID	gpu/GrProgramStageFactory.h	/^    StageKey fStageClassID;$/;"	m	class:GrProgramStageFactory
fStartId	core/SkAdvancedTypefaceMetrics.h	/^        uint16_t fStartId;$/;"	m	struct:SkAdvancedTypefaceMetrics::AdvanceMetric
fStartPoint	views/SkScrollBarView.h	/^    unsigned    fTotalLength, fStartPoint, fShownLength;$/;"	m	class:SkScrollBarView
fStartX	views/SkTouchGesture.h	/^        float   fStartX, fStartY;$/;"	m	struct:SkTouchGesture::Rec
fStartY	views/SkTouchGesture.h	/^        float   fStartX, fStartY;$/;"	m	struct:SkTouchGesture::Rec
fState	effects/SkBlurDrawLooper.h	/^    State   fState;$/;"	m	class:SkBlurDrawLooper
fState	effects/SkColorMatrixFilter.h	/^    State       fState;$/;"	m	class:SkColorMatrixFilter
fState	pdf/SkPDFShader.h	/^        const State* fState;$/;"	m	class:SkPDFShader::ShaderCanonicalEntry
fState	pdf/SkPDFStream.h	/^    State fState;$/;"	m	class:SkPDFStream
fState	pipe/SkGPipe.h	/^    class SkGPipeState* fState;$/;"	m	class:SkGPipeReader	typeref:class:SkGPipeReader::SkGPipeState
fState	views/SkTouchGesture.h	/^    State           fState;$/;"	m	class:SkTouchGesture
fState	views/SkView.h	/^        State       fState;$/;"	m	class:SkView::Click
fState	views/SkWidget.h	/^    State   fState;$/;"	m	class:SkButtonWidget
fState	views/SkWidget.h	/^    State   fState;$/;"	m	class:SkCheckBoxView
fStemV	core/SkAdvancedTypefaceMetrics.h	/^    int16_t fStemV;        \/\/ Thickness of dominant vertical stem.$/;"	m	class:SkAdvancedTypefaceMetrics
fStencilBits	gpu/GrTypes.h	/^    int                             fStencilBits;$/;"	m	struct:GrPlatformRenderTargetDesc
fStencilBuffer	gpu/GrRenderTarget.h	/^    GrStencilBuffer*  fStencilBuffer;$/;"	m	class:GrRenderTarget
fStencilFunc	gpu/GrGLInterface.h	/^    GrGLStencilFuncProc fStencilFunc;$/;"	m	struct:GrGLInterface
fStencilFuncSeparate	gpu/GrGLInterface.h	/^    GrGLStencilFuncSeparateProc fStencilFuncSeparate;$/;"	m	struct:GrGLInterface
fStencilMask	gpu/GrGLInterface.h	/^    GrGLStencilMaskProc fStencilMask;$/;"	m	struct:GrGLInterface
fStencilMaskSeparate	gpu/GrGLInterface.h	/^    GrGLStencilMaskSeparateProc fStencilMaskSeparate;$/;"	m	struct:GrGLInterface
fStencilOp	gpu/GrGLInterface.h	/^    GrGLStencilOpProc fStencilOp;$/;"	m	struct:GrGLInterface
fStencilOpSeparate	gpu/GrGLInterface.h	/^    GrGLStencilOpSeparateProc fStencilOpSeparate;$/;"	m	struct:GrGLInterface
fStop	core/SkBuffer.h	/^    char* fStop;$/;"	m	class:SkWBuffer
fStop	core/SkBuffer.h	/^    const char* fStop;$/;"	m	class:SkRBuffer
fStop	core/SkDraw.h	/^    const char*     fStop;$/;"	m	class:SkTextToPathIter
fStop	core/SkReader32.h	/^    const char* fStop;  \/\/ end of buffer$/;"	m	class:SkReader32
fStop	core/SkTDict.h	/^        Pair*   fStop;$/;"	m	class:SkTDict::Iter
fStop	pdf/SkPDFTypes.h	/^        Rec* fStop;$/;"	m	class:SkPDFDict::Iter
fStop	xml/SkDOM.h	/^        const Attr* fStop;$/;"	m	class:SkDOM::AttrIter
fStorage	SkTypes.h	/^    uint32_t    fStorage[(kSize + 3) >> 2];$/;"	m	class:SkAutoSMalloc
fStorage	core/SkCanvas.h	/^        intptr_t          fStorage[32];$/;"	m	class:SkCanvas::LayerIter
fStorage	core/SkDescriptor.h	/^    uint32_t        fStorage[(kStorageSize + 3) >> 2];$/;"	m	class:SkAutoDescriptor
fStorage	core/SkMallocPixelRef.h	/^    void*           fStorage;$/;"	m	class:SkMallocPixelRef
fStorage	core/SkPerspIter.h	/^    SkFixed         fStorage[kCount * 2];$/;"	m	class:SkPerspIter
fStorage	core/SkTArray.h	/^    SkAlignedSTStorage<N,T> fStorage;$/;"	m	class:SkSTArray
fStorage	core/SkTLazy.h	/^    char fStorage[sizeof(T)];$/;"	m	class:SkTLazy
fStorage	core/SkTSearch.h	/^    char    fStorage[STORAGE+1];$/;"	m	class:SkAutoAsciiToLC
fStorage	core/SkTemplates.h	/^    SkAlignedSStorage<sizeof(T)*N> fStorage;$/;"	m	class:SkAlignedSTStorage
fStorage	core/SkTemplates.h	/^    char    fStorage[N * sizeof(T)];$/;"	m	class:SkAutoSTArray
fStorage	core/SkThread_platform.h	/^    uint32_t    fStorage[kStorageIntCount];$/;"	m	class:SkMutex
fStorage	core/SkTypes.h	/^    uint32_t    fStorage[(kSize + 3) >> 2];$/;"	m	class:SkAutoSMalloc
fStorage	effects/SkTestImageFilters.h	/^    intptr_t    fStorage[16];$/;"	m	class:SkMergeImageFilter
fStorage	images/SkFlipPixelRef.h	/^    void*           fStorage;$/;"	m	class:SkFlipPixelRef
fStorage	utils/SkInterpolator.h	/^    void* fStorage;$/;"	m	class:SkInterpolatorBase
fStorage	utils/SkMeshUtils.h	/^    void*       fStorage; \/\/ may be null$/;"	m	class:SkMeshIndices
fStorage32	core/SkTemplates.h	/^        uint32_t    fStorage32[(N*sizeof(T) + 3) >> 2];$/;"	m	union:SkAutoSTMalloc::__anon23
fStr	core/SkOSFile.h	/^    uint16_t*   fStr;$/;"	m	class:SkUTF16_Str
fStr	core/SkString.h	/^    const char* fStr;$/;"	m	class:SkString
fStr	views/SkViewInflate.h	/^        char*   fStr;$/;"	m	struct:SkViewInflate::IDStr
fStrCache	views/SkWidget.h	/^    SkString*       fStrCache;$/;"	m	class:SkListView
fStream	images/SkImageRef.h	/^    SkStream*               fStream;$/;"	m	class:SkImageRef
fStream	images/SkJpegUtility.h	/^    SkStream*   fStream;$/;"	m	struct:skjpeg_source_mgr
fStream	images/SkJpegUtility.h	/^    SkWStream*  fStream;$/;"	m	struct:skjpeg_destination_mgr
fStream	svg/SkSVGParser.h	/^    SkDynamicMemoryWStream fStream;$/;"	m	class:SkSVGParser
fStream	xml/SkXMLWriter.h	/^    SkWStream&      fStream;$/;"	m	class:SkXMLStreamWriter
fStrike	gpu/SkGr.h	/^    SkGlyphCache* fStrike;$/;"	m	class:SkGrFontScaler
fStrings	core/SkTDict.h	/^    SkChunkAlloc    fStrings;$/;"	m	class:SkTDict
fStrings	utils/SkJSON.h	/^            char**   fStrings;$/;"	m	union:SkJSON::Array::__anon42
fStrings	views/SkViewInflate.h	/^    SkChunkAlloc        fStrings;$/;"	m	class:SkViewInflate
fStrokeJoin	core/SkScalerContext.h	/^        uint8_t     fStrokeJoin;$/;"	m	struct:SkScalerContext::Rec
fStyle	core/SkAdvancedTypefaceMetrics.h	/^    uint16_t fStyle;        \/\/ Font style characteristics.$/;"	m	class:SkAdvancedTypefaceMetrics
fStyle	core/SkTypeface.h	/^    Style       fStyle;$/;"	m	class:SkTypeface
fStyle	effects/Sk1DPathEffect.h	/^    Style       fStyle;         \/\/ copied from constructor$/;"	m	class:SkPath1DPathEffect
fSubstitute	pdf/SkPDFCatalog.h	/^        SkPDFObject* fSubstitute;$/;"	m	struct:SkPDFCatalog::SubstituteMapping
fSubstitute	pdf/SkPDFStream.h	/^    SkRefPtr<SkPDFStream> fSubstitute;$/;"	m	class:SkPDFStream
fSubstituteMap	pdf/SkPDFCatalog.h	/^    SkTDArray<SubstituteMapping> fSubstituteMap;$/;"	m	class:SkPDFCatalog
fSubstituteResourcesFirstPage	pdf/SkPDFCatalog.h	/^    SkTDArray<SkPDFObject*> fSubstituteResourcesFirstPage;$/;"	m	class:SkPDFCatalog
fSubstituteResourcesRemaining	pdf/SkPDFCatalog.h	/^    SkTDArray<SkPDFObject*> fSubstituteResourcesRemaining;$/;"	m	class:SkPDFCatalog
fSubstitutes	pdf/SkPDFDocument.h	/^    SkTDArray<SkPDFObject*> fSubstitutes;$/;"	m	class:SkPDFDocument
fSuffix	core/SkOSFile.h	/^        SkString    fPath, fSuffix;$/;"	m	class:SkOSFile::Iter
fSuppressPaint	svg/SkSVGParser.h	/^    SkBool8 fSuppressPaint;$/;"	m	class:SkSVGParser
fSurface	gpu/SkNativeGLContext.h	/^    EGLSurface fSurface;$/;"	m	class:SkNativeGLContext
fSurface	views/SkOSWindow_SDL.h	/^    SDL_Surface* fSurface;$/;"	m	class:SkOSWindow
fSurface	views/SkOSWindow_Win.h	/^    EGLSurface          fSurface;$/;"	m	class:SkOSWindow
fSwapRAndB	gpu/GrSamplerState.h	/^    bool                fSwapRAndB;$/;"	m	class:GrSamplerState
fTFArray	core/SkFlattenable.h	/^    SkTypeface** fTFArray;$/;"	m	class:SkFlattenableReadBuffer
fTFCount	core/SkFlattenable.h	/^    int        fTFCount;$/;"	m	class:SkFlattenableReadBuffer
fTFSet	core/SkFlattenable.h	/^    SkRefCntSet*    fTFSet;$/;"	m	class:SkFlattenableWriteBuffer
fTStorage	core/SkTemplates.h	/^        T           fTStorage[1];   \/\/ do NOT want to invoke T::T()$/;"	m	union:SkAutoSTMalloc::__anon23
fTValue	core/SkPathMeasure.h	/^        unsigned    fTValue : 15;$/;"	m	struct:SkPathMeasure::Segment
fTable	effects/SkTableMaskFilter.h	/^    uint8_t fTable[256];$/;"	m	class:SkTableMaskFilter
fTag	core/SkDescriptor.h	/^        uint32_t fTag;$/;"	m	struct:SkDescriptor::Entry
fTag	core/SkGlobals.h	/^        uint32_t    fTag;$/;"	m	class:SkGlobals::Rec
fTagHead	views/SkEventSink.h	/^    SkTagList*      fTagHead;$/;"	m	class:SkEventSink
fTail	core/SkStream.h	/^    Block*  fTail;$/;"	m	class:SkDynamicMemoryWStream
fTail	core/SkWriter32.h	/^    Block*  fTail;$/;"	m	class:SkWriter32
fTail	utils/SkJSON.h	/^        Slot* fTail;$/;"	m	class:SkJSON::Object
fTargetID	views/SkEvent.h	/^    SkEventSinkID   fTargetID;$/;"	m	class:SkEvent
fTargetID	views/SkView.h	/^        SkEventSinkID   fTargetID;$/;"	m	class:SkView::Click
fTargetProc	views/SkEvent.h	/^    Proc            fTargetProc;$/;"	m	class:SkEvent
fTerminal	svg/SkSVGPaintState.h	/^    SkString fTerminal;$/;"	m	class:SkSVGPaint
fTex	utils/SkMeshUtils.h	/^    SkPoint*    fTex;$/;"	m	class:SkMeshIndices
fTexCount	utils/SkMeshUtils.h	/^    size_t      fIndexCount, fTexCount;$/;"	m	class:SkMeshIndices
fTexImage2D	gpu/GrGLInterface.h	/^    GrGLTexImage2DProc fTexImage2D;$/;"	m	struct:GrGLInterface
fTexParameteri	gpu/GrGLInterface.h	/^    GrGLTexParameteriProc fTexParameteri;$/;"	m	struct:GrGLInterface
fTexStorage2D	gpu/GrGLInterface.h	/^    GrGLTexStorage2DProc fTexStorage2D;$/;"	m	struct:GrGLInterface
fTexSubImage2D	gpu/GrGLInterface.h	/^    GrGLTexSubImage2DProc fTexSubImage2D;$/;"	m	struct:GrGLInterface
fText	core/SkDraw.h	/^    const char*     fText;$/;"	m	class:SkTextToPathIter
fText	text/SkTextLayout.h	/^    SkTDArray<char> fText;$/;"	m	class:SkTextLayout
fText	utils/SkTextBox.h	/^    const char* fText;$/;"	m	class:SkTextBox
fText	views/SkTextBox.h	/^    const char* fText;$/;"	m	class:SkTextBox
fText	views/SkWidget.h	/^    SkString    fText;$/;"	m	class:SkStaticTextView
fText	views/SkWidget.h	/^    SkString fText;$/;"	m	class:SkTextView
fText	views/SkWidgetViews.h	/^    SkString    fText;$/;"	m	class:SkStaticTextView
fTextContext	gpu/GrTextContext.h	/^        GrTextContext* fTextContext;$/;"	m	class:GrTextContext::AutoFinish
fTextContext	gpu/SkGpuDevice.h	/^    GrTextContext*      fTextContext;$/;"	m	class:SkGpuDevice
fTextScaleX	core/SkPaint.h	/^    SkScalar        fTextScaleX;$/;"	m	class:SkPaint
fTextSize	core/SkPaint.h	/^    SkScalar        fTextSize;$/;"	m	class:SkPaint
fTextSize	core/SkScalerContext.h	/^        SkScalar    fTextSize, fPreScaleX, fPreSkewX;$/;"	m	struct:SkScalerContext::Rec
fTextSkewX	core/SkPaint.h	/^    SkScalar        fTextSkewX;$/;"	m	class:SkPaint
fTexture	gpu/GrRenderTarget.h	/^    GrTexture*        fTexture; \/\/ not ref'ed$/;"	m	class:GrRenderTarget
fTexture	gpu/SkGpuDevice.h	/^    GrTexture*          fTexture;$/;"	m	class:SkGpuDevice
fTexture	gpu/SkGrTexturePixelRef.h	/^    GrTexture*  fTexture;$/;"	m	class:SkGrTexturePixelRef
fTextureCache	gpu/GrContext.h	/^    GrResourceCache*    fTextureCache;$/;"	m	class:GrContext
fTextureDomain	gpu/GrSamplerState.h	/^    GrRect              fTextureDomain;$/;"	m	class:GrSamplerState
fTextureHandle	gpu/GrTypes.h	/^    GrPlatform3DObject              fTextureHandle;$/;"	m	struct:GrPlatformTextureDesc
fTextureSamplers	gpu/GrPaint.h	/^    GrSamplerState              fTextureSamplers[kMaxTextures];$/;"	m	class:GrPaint
fTextures	gpu/GrPaint.h	/^    GrTexture*      fTextures[kMaxTextures];$/;"	m	class:GrPaint
fTileMode	core/SkShader.h	/^        TileMode    fTileMode;      \/\/!< The tile mode used.$/;"	m	struct:SkShader::GradientInfo
fTime	utils/SkInterpolator.h	/^        SkMSec  fTime;$/;"	m	struct:SkInterpolatorBase::SkTimeCode
fTime	views/SkEvent.h	/^    SkMSec          fTime;$/;"	m	class:SkEvent
fTime0	views/SkTouchGesture.h	/^    double      fTime0;$/;"	m	struct:SkFlingState
fTimes	utils/SkInterpolator.h	/^    SkTimeCode* fTimes;     \/\/ pointer into fStorage$/;"	m	class:SkInterpolatorBase
fTimesArray	utils/SkInterpolator.h	/^    SkTimeCode(* fTimesArray)[10];$/;"	m	class:SkInterpolatorBase
fTitle	views/SkOSMenu.h	/^    SkString fTitle;$/;"	m	class:SkOSMenu
fTitle	views/SkWindow.h	/^    SkString    fTitle;$/;"	m	class:SkWindow
fTop	SkRect.h	/^    SkScalar    fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkRect
fTop	SkRect.h	/^    int32_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkIRect
fTop	core/SkPaint.h	/^        SkScalar    fTop;       \/\/!< The greatest distance above the baseline for any glyph (will be <= 0)$/;"	m	struct:SkPaint::FontMetrics
fTop	core/SkRect.h	/^    SkScalar    fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkRect
fTop	core/SkRect.h	/^    int32_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:SkIRect
fTop	core/SkScalerContext.h	/^    int16_t     fTop, fLeft;$/;"	m	struct:SkGlyph
fTop	gpu/GrRect.h	/^    int16_t fLeft, fTop, fRight, fBottom;$/;"	m	struct:GrIRect16
fTop	views/SkBorderView.h	/^    SkScalar fLeft, fRight, fTop, fBottom;  \/\/margin on each side$/;"	m	class:SkBorderView
fTotalCapacity	core/SkChunkAlloc.h	/^    size_t  fTotalCapacity;$/;"	m	class:SkChunkAlloc
fTotalCount	core/SkTDStack.h	/^    int     fCount, fTotalCount;$/;"	m	class:SkTDStack
fTotalInverse	core/SkShader.h	/^    SkMatrix            fTotalInverse;$/;"	m	class:SkShader
fTotalInverseClass	core/SkShader.h	/^    uint8_t             fTotalInverseClass;$/;"	m	class:SkShader
fTotalLength	views/SkScrollBarView.h	/^    unsigned    fTotalLength, fStartPoint, fShownLength;$/;"	m	class:SkScrollBarView
fTouches	views/SkTouchGesture.h	/^    SkTDArray<Rec> fTouches;$/;"	m	class:SkTouchGesture
fTrailerDict	pdf/SkPDFDocument.h	/^    SkRefPtr<SkPDFDict> fTrailerDict;$/;"	m	class:SkPDFDocument
fTransformID	svg/SkSVGPaintState.h	/^    SkString fTransformID;$/;"	m	class:SkSVGPaint
fType	core/SkAdvancedTypefaceMetrics.h	/^        MetricType fType;$/;"	m	struct:SkAdvancedTypefaceMetrics::AdvanceMetric
fType	core/SkAdvancedTypefaceMetrics.h	/^    FontType fType;$/;"	m	class:SkAdvancedTypefaceMetrics
fType	core/SkMetaData.h	/^        uint8_t     fType;$/;"	m	struct:SkMetaData::Rec
fType	core/SkPathMeasure.h	/^        unsigned    fType : 2;$/;"	m	struct:SkPathMeasure::Segment
fType	gpu/GrClip.h	/^        GrClipType   fType;$/;"	m	struct:GrClip::Element
fType	gpu/GrContextFactory.h	/^        GLContextType             fType;$/;"	m	struct:GrContextFactory::GPUContext
fType	utils/SkJSON.h	/^        Type fType;$/;"	m	class:SkJSON::Array
fType	views/SkEvent.h	/^    mutable char*   fType;  \/\/ may be characters with low bit set to know that it is not a pointer$/;"	m	class:SkEvent
fType	views/SkOSMenu.h	/^        Type            fType;$/;"	m	class:SkOSMenu::Item
fType	views/SkView.h	/^        char*           fType;$/;"	m	class:SkView::Click
fTypeMask	core/SkMatrix.h	/^    mutable uint32_t fTypeMask;$/;"	m	class:SkMatrix
fTypeface	core/SkPaint.h	/^    SkTypeface*     fTypeface;$/;"	m	class:SkPaint
fTypeface	pdf/SkPDFFont.h	/^    SkRefPtr<SkTypeface> fTypeface;$/;"	m	class:SkPDFFont
fU	utils/SkCamera.h	/^    SkVector3D  fU, fV;$/;"	m	class:SkPatch3D
fUCS2	core/SkString.h	/^    uint16_t*   fUCS2;$/;"	m	class:SkAutoUCS2
fURI	core/SkPixelRef.h	/^    SkString    fURI;$/;"	m	class:SkPixelRef
fURL	ports/SkStream_Win.h	/^    SkString fURL;$/;"	m	class:SkURLStream
fURLStream	ports/SkStream_Win.h	/^    HINTERNET fURLStream;$/;"	m	class:SkURLStream
fUniform1f	gpu/GrGLInterface.h	/^    GrGLUniform1fProc fUniform1f;$/;"	m	struct:GrGLInterface
fUniform1fv	gpu/GrGLInterface.h	/^    GrGLUniform1fvProc fUniform1fv;$/;"	m	struct:GrGLInterface
fUniform1i	gpu/GrGLInterface.h	/^    GrGLUniform1iProc fUniform1i;$/;"	m	struct:GrGLInterface
fUniform1iv	gpu/GrGLInterface.h	/^    GrGLUniform1ivProc fUniform1iv;$/;"	m	struct:GrGLInterface
fUniform2f	gpu/GrGLInterface.h	/^    GrGLUniform2fProc fUniform2f;$/;"	m	struct:GrGLInterface
fUniform2fv	gpu/GrGLInterface.h	/^    GrGLUniform2fvProc  fUniform2fv;$/;"	m	struct:GrGLInterface
fUniform2i	gpu/GrGLInterface.h	/^    GrGLUniform2iProc fUniform2i;$/;"	m	struct:GrGLInterface
fUniform2iv	gpu/GrGLInterface.h	/^    GrGLUniform2ivProc fUniform2iv;$/;"	m	struct:GrGLInterface
fUniform3f	gpu/GrGLInterface.h	/^    GrGLUniform3fProc fUniform3f;$/;"	m	struct:GrGLInterface
fUniform3fv	gpu/GrGLInterface.h	/^    GrGLUniform3fvProc fUniform3fv;$/;"	m	struct:GrGLInterface
fUniform3i	gpu/GrGLInterface.h	/^    GrGLUniform3iProc fUniform3i;$/;"	m	struct:GrGLInterface
fUniform3iv	gpu/GrGLInterface.h	/^    GrGLUniform3ivProc fUniform3iv;$/;"	m	struct:GrGLInterface
fUniform4f	gpu/GrGLInterface.h	/^    GrGLUniform4fProc fUniform4f;$/;"	m	struct:GrGLInterface
fUniform4fv	gpu/GrGLInterface.h	/^    GrGLUniform4fvProc fUniform4fv;$/;"	m	struct:GrGLInterface
fUniform4i	gpu/GrGLInterface.h	/^    GrGLUniform4iProc fUniform4i;$/;"	m	struct:GrGLInterface
fUniform4iv	gpu/GrGLInterface.h	/^    GrGLUniform4ivProc fUniform4iv;$/;"	m	struct:GrGLInterface
fUniformMatrix2fv	gpu/GrGLInterface.h	/^    GrGLUniformMatrix2fvProc fUniformMatrix2fv;$/;"	m	struct:GrGLInterface
fUniformMatrix3fv	gpu/GrGLInterface.h	/^    GrGLUniformMatrix3fvProc fUniformMatrix3fv;$/;"	m	struct:GrGLInterface
fUniformMatrix4fv	gpu/GrGLInterface.h	/^    GrGLUniformMatrix4fvProc fUniformMatrix4fv;$/;"	m	struct:GrGLInterface
fUniqueID	core/SkTypeface.h	/^    SkFontID    fUniqueID;$/;"	m	class:SkTypeface
fUnitsPerEm	utils/SkSfntUtils.h	/^    uint16_t    fUnitsPerEm;$/;"	m	struct:SkSfntTable_head
fUnixWindow	views/SkOSWindow_Unix.h	/^    SkUnixWindow fUnixWindow;$/;"	m	class:SkOSWindow
fUnmapBuffer	gpu/GrGLInterface.h	/^    GrGLUnmapBufferProc fUnmapBuffer;$/;"	m	struct:GrGLInterface
fUnrefOnRelease	utils/win/SkIStream.h	/^    bool fUnrefOnRelease;$/;"	m	class:SkIStream
fUnrefStream	images/SkJpegUtility.h	/^    bool        fUnrefStream;$/;"	m	struct:skjpeg_source_mgr
fUri	views/SkImageView.h	/^    SkString    fUri;$/;"	m	class:SkImageView
fUriIsValid	views/SkImageView.h	/^    SkBool8     fUriIsValid;$/;"	m	class:SkImageView
fUseExternalMatrix	core/SkCanvas.h	/^    bool        fUseExternalMatrix;$/;"	m	class:SkCanvas
fUsePrefTable	images/SkImageDecoder.h	/^    bool                    fUsePrefTable;$/;"	m	class:SkImageDecoder
fUseProgram	gpu/GrGLInterface.h	/^    GrGLUseProgramProc fUseProgram;$/;"	m	struct:GrGLInterface
fV	utils/SkCamera.h	/^    SkVector3D  fU, fV;$/;"	m	class:SkPatch3D
fV0	core/SkClampRange.h	/^    int fV0, fV1;$/;"	m	struct:SkClampRange
fV1	core/SkClampRange.h	/^    int fV0, fV1;$/;"	m	struct:SkClampRange
fVal	gpu/GrTemplates.h	/^    T  fVal;$/;"	m	class:GrAutoTPtrValueRestore
fValue	core/SkTDict.h	/^        T           fValue;$/;"	m	struct:SkTDict::Pair
fValue	pdf/SkPDFTypes.h	/^    SkScalar fValue;$/;"	m	class:SkPDFScalar
fValue	pdf/SkPDFTypes.h	/^    SkTDArray<SkPDFObject*> fValue;$/;"	m	class:SkPDFArray
fValue	pdf/SkPDFTypes.h	/^    SkTDArray<struct Rec> fValue;$/;"	m	class:SkPDFDict
fValue	pdf/SkPDFTypes.h	/^    bool fValue;$/;"	m	class:SkPDFBool
fValue	pdf/SkPDFTypes.h	/^    const SkString fValue;$/;"	m	class:SkPDFName
fValue	pdf/SkPDFTypes.h	/^    const SkString fValue;$/;"	m	class:SkPDFString
fValue	pdf/SkPDFTypes.h	/^    int32_t fValue;$/;"	m	class:SkPDFInt
fValue	views/SkWidget.h	/^    uint16_t    fValue, fMax;$/;"	m	class:SkProgressView
fValue	views/SkWidget.h	/^    uint16_t fValue, fMax;$/;"	m	class:SkSliderView
fValues	utils/SkInterpolator.h	/^    SkScalar* fValues;  \/\/ pointer into fStorage$/;"	m	class:SkInterpolator
fValuesReused	xml/SkBML_WXMLParser.h	/^    int fAttrsCount, fNamesReused, fValuesReused;$/;"	m	class:BML_WXMLParser
fVerbStop	core/SkPath.h	/^        const uint8_t*  fVerbStop;$/;"	m	class:SkPath::Iter
fVerbStop	core/SkPath.h	/^        const uint8_t*  fVerbStop;$/;"	m	class:SkPath::RawIter
fVerbs	core/SkEdgeClipper.h	/^    SkPath::Verb    fVerbs[kMaxVerbs];$/;"	m	class:SkEdgeClipper
fVerbs	core/SkPath.h	/^        const uint8_t*  fVerbs;$/;"	m	class:SkPath::Iter
fVerbs	core/SkPath.h	/^        const uint8_t*  fVerbs;$/;"	m	class:SkPath::RawIter
fVerbs	core/SkPath.h	/^    SkTDArray<uint8_t>  fVerbs;$/;"	m	class:SkPath
fVersion	utils/SkSfntUtils.h	/^    SkFixed     fVersion;$/;"	m	struct:SkSfntTable_head
fVersion	utils/SkSfntUtils.h	/^    SkFixed     fVersion;$/;"	m	struct:SkSfntTable_maxp
fVertexAttrib4fv	gpu/GrGLInterface.h	/^    GrGLVertexAttrib4fvProc fVertexAttrib4fv;$/;"	m	struct:GrGLInterface
fVertexAttribPointer	gpu/GrGLInterface.h	/^    GrGLVertexAttribPointerProc fVertexAttribPointer;$/;"	m	struct:GrGLInterface
fVerticalAdvance	core/SkAdvancedTypefaceMetrics.h	/^        int16_t fVerticalAdvance;$/;"	m	struct:SkAdvancedTypefaceMetrics::VerticalMetric
fVerticalMetrics	core/SkAdvancedTypefaceMetrics.h	/^    SkTScopedPtr<VerticalAdvanceRange> fVerticalMetrics;$/;"	m	class:SkAdvancedTypefaceMetrics
fVi	views/SkOSWindow_Unix.h	/^    XVisualInfo* fVi;$/;"	m	class:SkOSWindow
fView	views/SkViewInflate.h	/^        SkView* fView;$/;"	m	struct:SkViewInflate::IDStr
fViewport	gpu/GrGLInterface.h	/^    GrGLViewportProc fViewport;$/;"	m	struct:GrGLInterface
fVisibleCount	views/SkWidget.h	/^    SkIPoint        fVisibleCount;$/;"	m	class:SkGridView
fVisibleRowCount	views/SkWidget.h	/^    int             fVisibleRowCount;$/;"	m	class:SkListView
fVisibleRowCount	views/SkWidgetViews.h	/^    uint16_t        fVisibleRowCount, fBindingCount;$/;"	m	class:SkListView
fVoids	utils/SkJSON.h	/^            void*    fVoids;$/;"	m	union:SkJSON::Array::__anon42
fWaitingOnInval	views/SkWindow.h	/^    bool    fWaitingOnInval;$/;"	m	class:SkWindow
fWeOwnTheBuffer	core/SkStream.h	/^    bool        fWeOwnTheBuffer;$/;"	m	class:SkBufferStream
fWeOwnTheType	views/SkView.h	/^        bool            fWeOwnTheType;$/;"	m	class:SkView::Click
fWeakCnt	core/SkWeakRefCnt.h	/^    mutable int32_t fWeakCnt;$/;"	m	class:SkWeakRefCnt
fWidth	SkBitmap.cpp	/^    uint32_t    fWidth, fHeight;$/;"	m	struct:MipLevel	file:
fWidth	SkBitmap.h	/^    uint32_t    fWidth;$/;"	m	class:SkBitmap
fWidth	core/SkBitmap.h	/^    uint32_t    fWidth;$/;"	m	class:SkBitmap
fWidth	core/SkPaint.h	/^    SkScalar        fWidth;$/;"	m	class:SkPaint
fWidth	core/SkPicture.h	/^    int fWidth, fHeight;$/;"	m	class:SkPicture
fWidth	core/SkScalerContext.h	/^    uint16_t    fWidth, fHeight;$/;"	m	struct:SkGlyph
fWidth	core/SkSize.h	/^    T fWidth;$/;"	m	struct:SkTSize
fWidth	core/SkStroke.h	/^    SkScalar    fWidth, fMiterLimit;$/;"	m	class:SkStroke
fWidth	gpu/GrRenderTarget.h	/^    int               fWidth;$/;"	m	class:GrRenderTarget
fWidth	gpu/GrTexture.h	/^    int fWidth;$/;"	m	class:GrTexture
fWidth	gpu/GrTypes.h	/^    int                             fWidth;         \/\/<! width in pixels$/;"	m	struct:GrPlatformRenderTargetDesc
fWidth	gpu/GrTypes.h	/^    int                             fWidth;         \/\/<! width in pixels$/;"	m	struct:GrPlatformTextureDesc
fWidth	gpu/GrTypes.h	/^    int                    fWidth;  \/\/!< Width of the texture$/;"	m	struct:GrTextureDesc
fWidth	images/SkMovie.h	/^        int     fWidth;$/;"	m	struct:SkMovie::Info
fWidth	images/SkPageFlipper.h	/^    int         fWidth;$/;"	m	class:SkPageFlipper
fWidth	views/SkView.h	/^    SkScalar    fWidth, fHeight;$/;"	m	class:SkView
fWin	views/SkOSWindow_Unix.h	/^  Window fWin;$/;"	m	struct:SkUnixWindow
fWindow	gpu/SkNativeGLContext.h	/^    HWND fWindow;$/;"	m	class:SkNativeGLContext
fWriter	core/SkOrderedWriteBuffer.h	/^    SkWriter32 fWriter;$/;"	m	class:SkOrderedWriteBuffer
fWriter	pipe/SkGPipe.h	/^    SkWriter32 fWriter;$/;"	m	class:SkGPipeWriter
fWriter	xml/SkBML_WXMLParser.h	/^    SkWStream&  fWriter;$/;"	m	class:BML_WXMLParser
fX	core/SkPerspIter.h	/^    SkFixed         fX, fY;$/;"	m	class:SkPerspIter
fX	core/SkPoint.h	/^    SkScalar    fX, fY;$/;"	m	struct:SkPoint
fX	core/SkPoint.h	/^    int32_t fX, fY;$/;"	m	struct:SkIPoint
fX	gpu/GrPoint.h	/^    int16_t fX, fY;$/;"	m	struct:GrIPoint16
fX	utils/SkCamera.h	/^    SkScalar    fX, fY, fZ;$/;"	m	struct:SkPoint3D
fX	utils/SkCamera.h	/^    SkUnitScalar    fX, fY, fZ;$/;"	m	struct:SkUnit3D
fXHeight	core/SkPaint.h	/^        SkScalar    fXHeight;   \/\/!< the height of an 'x' in px, or 0 if no 'x' in face$/;"	m	struct:SkPaint::FontMetrics
fXMLWriter	svg/SkSVGParser.h	/^    SkXMLStreamWriter fXMLWriter;$/;"	m	class:SkSVGParser
fXMax	core/SkPaint.h	/^        SkScalar    fXMax;      \/\/!< The maximum bounding box x value for all glyphs$/;"	m	struct:SkPaint::FontMetrics
fXMax	utils/SkSfntUtils.h	/^    int16_t     fXMax;$/;"	m	struct:SkSfntTable_head
fXMin	core/SkPaint.h	/^        SkScalar    fXMin;      \/\/!< The minimum bounding box x value for all glyphs$/;"	m	struct:SkPaint::FontMetrics
fXMin	utils/SkSfntUtils.h	/^    int16_t     fXMin;$/;"	m	struct:SkSfntTable_head
fXObjectResources	pdf/SkPDFDevice.h	/^    SkTDArray<SkPDFObject*> fXObjectResources;$/;"	m	class:SkPDFDevice
fXPos	core/SkDraw.h	/^    SkScalar        fXPos;      \/\/ accumulated xpos, returned in next$/;"	m	class:SkTextToPathIter
fXRefFileOffset	pdf/SkPDFDocument.h	/^    int64_t fXRefFileOffset;$/;"	m	class:SkPDFDocument
fXYIndex	core/SkDraw.h	/^    int             fXYIndex;   \/\/ cache for horizontal -vs- vertical text$/;"	m	class:SkTextToPathIter
fXfermode	core/SkPaint.h	/^    SkXfermode*     fXfermode;$/;"	m	class:SkPaint
fY	core/SkPerspIter.h	/^    SkFixed         fX, fY;$/;"	m	class:SkPerspIter
fY	core/SkPoint.h	/^    SkScalar    fX, fY;$/;"	m	struct:SkPoint
fY	core/SkPoint.h	/^    int32_t fX, fY;$/;"	m	struct:SkIPoint
fY	gpu/GrPoint.h	/^    int16_t fX, fY;$/;"	m	struct:GrIPoint16
fY	utils/SkCamera.h	/^    SkScalar    fX, fY, fZ;$/;"	m	struct:SkPoint3D
fY	utils/SkCamera.h	/^    SkUnitScalar    fX, fY, fZ;$/;"	m	struct:SkUnit3D
fYMax	utils/SkSfntUtils.h	/^    int16_t     fYMax;$/;"	m	struct:SkSfntTable_head
fYMin	utils/SkSfntUtils.h	/^    int16_t     fYMin;$/;"	m	struct:SkSfntTable_head
fYPtrs	SkBitmap.h	/^        uint8_t** fYPtrs;$/;"	m	class:SkBitmap::RLEPixels
fYPtrs	core/SkBitmap.h	/^        uint8_t** fYPtrs;$/;"	m	class:SkBitmap::RLEPixels
fYear	core/SkTime.h	/^        uint16_t fYear;          \/\/!< e.g. 2005$/;"	m	struct:SkTime::DateTime
fZ	utils/SkCamera.h	/^    SkScalar    fX, fY, fZ;$/;"	m	struct:SkPoint3D
fZ	utils/SkCamera.h	/^    SkUnitScalar    fX, fY, fZ;$/;"	m	struct:SkUnit3D
fZenith	utils/SkCamera.h	/^    SkPoint3D   fZenith;$/;"	m	class:SkCamera3D
f_clipPath	svg/SkSVGPaintState.h	/^    SkString f_clipPath;$/;"	m	class:SkSVGPaint
f_clipRule	svg/SkSVGPaintState.h	/^    SkString f_clipRule;$/;"	m	class:SkSVGPaint
f_enableBackground	svg/SkSVGPaintState.h	/^    SkString f_enableBackground;$/;"	m	class:SkSVGPaint
f_fill	svg/SkSVGPaintState.h	/^    SkString f_fill;$/;"	m	class:SkSVGPaint
f_fillRule	svg/SkSVGPaintState.h	/^    SkString f_fillRule;$/;"	m	class:SkSVGPaint
f_filter	svg/SkSVGPaintState.h	/^    SkString f_filter;$/;"	m	class:SkSVGPaint
f_fontFamily	svg/SkSVGPaintState.h	/^    SkString f_fontFamily;$/;"	m	class:SkSVGPaint
f_fontSize	svg/SkSVGPaintState.h	/^    SkString f_fontSize;$/;"	m	class:SkSVGPaint
f_letterSpacing	svg/SkSVGPaintState.h	/^    SkString f_letterSpacing;$/;"	m	class:SkSVGPaint
f_mask	svg/SkSVGPaintState.h	/^    SkString f_mask;$/;"	m	class:SkSVGPaint
f_opacity	svg/SkSVGPaintState.h	/^    SkString f_opacity;$/;"	m	class:SkSVGPaint
f_stopColor	svg/SkSVGPaintState.h	/^    SkString f_stopColor;$/;"	m	class:SkSVGPaint
f_stopOpacity	svg/SkSVGPaintState.h	/^    SkString f_stopOpacity;$/;"	m	class:SkSVGPaint
f_stroke	svg/SkSVGPaintState.h	/^    SkString f_stroke;$/;"	m	class:SkSVGPaint
f_strokeDasharray	svg/SkSVGPaintState.h	/^    SkString f_strokeDasharray;$/;"	m	class:SkSVGPaint
f_strokeLinecap	svg/SkSVGPaintState.h	/^    SkString f_strokeLinecap;$/;"	m	class:SkSVGPaint
f_strokeLinejoin	svg/SkSVGPaintState.h	/^    SkString f_strokeLinejoin;$/;"	m	class:SkSVGPaint
f_strokeMiterlimit	svg/SkSVGPaintState.h	/^    SkString f_strokeMiterlimit;$/;"	m	class:SkSVGPaint
f_strokeWidth	svg/SkSVGPaintState.h	/^    SkString f_strokeWidth;$/;"	m	class:SkSVGPaint
f_style	svg/SkSVGPaintState.h	/^    SkString f_style; \/\/ unused, but allows array access to the rest$/;"	m	class:SkSVGPaint
f_transform	svg/SkSVGPaintState.h	/^    SkString f_transform;$/;"	m	class:SkSVGPaint
factory	core/SkTRegistry.h	/^    Factory factory() const { return fFact; }$/;"	f	class:SkTRegistry
find	core/SkPtrRecorder.h	/^    uint32_t find(T ptr) {$/;"	f	class:SkTPtrSet
find	core/SkTDArray.h	/^    int find(const T& elem) const {$/;"	f	class:SkTDArray
find	core/SkTDict.h	/^    bool find(const char name[]) const$/;"	f	class:SkTDict
find	core/SkTDict.h	/^    bool find(const char name[], T* value) const$/;"	f	class:SkTDict
find	core/SkTDict.h	/^    bool find(const char name[], size_t len) const$/;"	f	class:SkTDict
find	core/SkTDict.h	/^    bool find(const char name[], size_t len, T* value) const$/;"	f	class:SkTDict
findBool	views/SkEvent.h	/^    bool findBool(const char name[], bool* value) const { return fMeta.findBool(name, value); }$/;"	f	class:SkEvent
findData	views/SkEvent.h	/^    const void* findData(const char name[], size_t* byteCount = NULL) const {$/;"	f	class:SkEvent
findEntry	core/SkDescriptor.h	/^    const void* findEntry(uint32_t tag, uint32_t* length) const$/;"	f	class:SkDescriptor
findKey	core/SkTDict.h	/^    bool findKey(T& value, const char** name) const$/;"	f	class:SkTDict
findPtr	views/SkEvent.h	/^    bool findPtr(const char name[], void** value) const { return fMeta.findPtr(name, value); }$/;"	f	class:SkEvent
findRefCnt	core/SkMetaData.h	/^    bool findRefCnt(const char name[], SkRefCnt** ptr = NULL) {$/;"	f	class:SkMetaData
findS32	views/SkEvent.h	/^    bool findS32(const char name[], int32_t* value = NULL) const { return fMeta.findS32(name, value); }$/;"	f	class:SkEvent
findScalar	views/SkEvent.h	/^    bool findScalar(const char name[], SkScalar* value = NULL) const { return fMeta.findScalar(name, value); }$/;"	f	class:SkEvent
findScalar	xml/SkDOM.h	/^    bool findScalar(const Node* node, const char name[], SkScalar value[]) const$/;"	f	class:SkDOM
findScalars	views/SkEvent.h	/^    const SkScalar* findScalars(const char name[], int* count, SkScalar values[] = NULL) const { return fMeta.findScalars(name, count, values); }$/;"	f	class:SkEvent
findString	views/SkEvent.h	/^    const char* findString(const char name[]) const { return fMeta.findString(name); }$/;"	f	class:SkEvent
find_index	core/SkTDict.h	/^    int find_index(const char name[]) const$/;"	f	class:SkTDict
find_index	core/SkTDict.h	/^    int find_index(const char name[], size_t len) const$/;"	f	class:SkTDict
finish	gpu/GrTextContext.h	/^    virtual void finish() {$/;"	f	class:GrTextContext
flagAsResolved	gpu/GrRenderTarget.h	/^    void flagAsResolved() { fResolveRect.setLargestInverted(); }$/;"	f	class:GrRenderTarget
flatten	SkBitmap.cpp	/^void SkBitmap::flatten(SkFlattenableWriteBuffer& buffer) const {$/;"	f	class:SkBitmap
flatten	SkPixelRef.cpp	/^void SkPixelRef::flatten(SkFlattenableWriteBuffer& buffer) const {$/;"	f	class:SkPixelRef
flatten	core/SkOrderedWriteBuffer.h	/^    virtual void flatten(void* dst) { fWriter.flatten(dst); }$/;"	f	class:SkOrderedWriteBuffer
flattenObject	core/SkFlattenable.h	/^    void flattenObject(SkFlattenable* obj, SkFlattenableWriteBuffer& buffer) {$/;"	f	class:SkFlattenableWriteBuffer
floats	utils/SkJSON.h	/^        float* floats() const {$/;"	f	class:SkJSON::Array
flush	core/SkDevice.h	/^    virtual void flush() {}$/;"	f	class:SkDevice
forceGenerateImageFromPath	core/SkScalerContext.h	/^    void forceGenerateImageFromPath() { fGenerateImageFromPath = true; }$/;"	f	class:SkScalerContext
free	SkTypes.h	/^    void free() {$/;"	f	class:SkAutoFree
free	SkTypes.h	/^    void free() {$/;"	f	class:SkAutoMalloc
free	core/SkPostConfig.h	/^#undef free$/;"	d
free	core/SkTemplates.h	/^    void    free() { delete fObj; fObj = NULL; }$/;"	f	class:SkAutoTDelete
free	core/SkTemplates.h	/^    void    free() { delete[] fArray; fArray = NULL; }$/;"	f	class:SkAutoTDeleteArray
free	core/SkTypes.h	/^    void free() {$/;"	f	class:SkAutoFree
free	core/SkTypes.h	/^    void free() {$/;"	f	class:SkAutoMalloc
free	gpu/GrGlyph.h	/^    void free() {$/;"	f	struct:GrGlyph
freeAll	core/SkTDArray.h	/^    void freeAll() {$/;"	f	class:SkTDArray
freeMipMap	SkBitmap.cpp	/^void SkBitmap::freeMipMap() {$/;"	f	class:SkBitmap
freePixels	SkBitmap.cpp	/^void SkBitmap::freePixels() {$/;"	f	class:SkBitmap
fromBack	core/SkTArray.h	/^    T& fromBack(int i) {$/;"	f	class:SkTArray
fromBack	core/SkTArray.h	/^    const T& fromBack(int i) const {$/;"	f	class:SkTArray
front	core/SkDeque.h	/^    void* front() {$/;"	f	class:SkDeque
front	core/SkTArray.h	/^    T& front() { SkASSERT(fCount > 0); return fItemArray[0];}$/;"	f	class:SkTArray
front	core/SkTArray.h	/^    const T& front() const { SkASSERT(fCount > 0); return fItemArray[0];}$/;"	f	class:SkTArray
gAttributes	svg/SkSVGPaintState.h	/^    static SkSVGAttribute gAttributes[];$/;"	m	class:SkSVGPaint
gCounter	gpu/GrInstanceCounter.h	/^    static int gCounter;$/;"	m	class:GrInstanceCounter
gCounter	gpu/GrInstanceCounter.h	/^template <typename T> int GrInstanceCounter<T>::gCounter;$/;"	m	class:GrInstanceCounter
gEmptyRec	core/SkString.h	/^    static const Rec gEmptyRec;$/;"	m	class:SkString
gHead	core/SkTRegistry.h	/^    static SkTRegistry* gHead;$/;"	m	class:SkTRegistry
gHead	core/SkTRegistry.h	/^template <typename T, typename P> SkTRegistry<T, P>* SkTRegistry<T, P>::gHead;$/;"	m	class:SkTRegistry
gMIN_ALLOC_COUNT	core/SkTArray.h	/^    static const int gMIN_ALLOC_COUNT = 8;$/;"	m	class:SkTArray
gMapPtsProcs	core/SkMatrix.h	/^    static const MapPtsProc gMapPtsProcs[];$/;"	m	class:SkMatrix
gMapXYProcs	core/SkMatrix.h	/^    static const MapXYProc gMapXYProcs[];$/;"	m	class:SkMatrix
gPixelRefMutex	SkPixelRef.cpp	/^    SK_DECLARE_STATIC_MUTEX(gPixelRefMutex);$/;"	v
gPixelRefMutexRingIndex	SkPixelRef.cpp	/^    static int32_t gPixelRefMutexRingIndex;$/;"	v	file:
gTable	core/SkUnPreMultiply.h	/^    static const uint32_t gTable[256];$/;"	m	class:SkUnPreMultiply
gUNCACHED_KEY	gpu/SkGr.h	/^static const GrContext::TextureKey gUNCACHED_KEY = ~0;$/;"	v
gWC	gpu/SkNativeGLContext.h	/^    static ATOM gWC;$/;"	m	class:SkNativeGLContext
gainFocus	core/SkDevice.h	/^    virtual void gainFocus(SkCanvas*, const SkMatrix&, const SkRegion&,$/;"	f	class:SkDevice
get	SkTypes.h	/^    const void* get() const { return fPtr; }$/;"	f	class:SkAutoMalloc
get	SkTypes.h	/^    void* get() const { return fPtr; }$/;"	f	class:SkAutoFree
get	SkTypes.h	/^    void* get() const { return fPtr; }$/;"	f	class:SkAutoSMalloc
get	SkTypes.h	/^    void* get() { return fPtr; }$/;"	f	class:SkAutoMalloc
get	core/SkData.h	/^    SkData* get() const { return fRef; }$/;"	f	class:SkAutoDataUnref
get	core/SkMatrix.h	/^    SkScalar get(int index) const {$/;"	f	class:SkMatrix
get	core/SkOSFile.h	/^    const uint16_t* get() const { return fStr; }$/;"	f	class:SkUTF16_Str
get	core/SkRefCnt.h	/^    T* get() const { return fObj; }$/;"	f	class:SkAutoTUnref
get	core/SkRefCnt.h	/^    T* get() const { return fObj; }$/;"	f	class:SkRefPtr
get	core/SkRelay.h	/^    T* get() const { return fPtr; }$/;"	f	class:SkTRelay
get	core/SkTLazy.h	/^    T* get() const { SkASSERT(this->isValid()); return fPtr; }$/;"	f	class:SkTLazy
get	core/SkTScopedPtr.h	/^    T* get() const { return fObj; }$/;"	f	class:SkTScopedPtr
get	core/SkTemplates.h	/^    T*      get() const { return fArray; }$/;"	f	class:SkAutoTDeleteArray
get	core/SkTemplates.h	/^    T*      get() const { return fObj; }$/;"	f	class:SkAutoTDelete
get	core/SkTemplates.h	/^    T* get() const { return fArray; }$/;"	f	class:SkAutoSTArray
get	core/SkTemplates.h	/^    T* get() const { return fArray; }$/;"	f	class:SkAutoTArray
get	core/SkTemplates.h	/^    T* get() const { return fPtr; }$/;"	f	class:SkAutoSTMalloc
get	core/SkTemplates.h	/^    T* get() const { return fPtr; }$/;"	f	class:SkAutoTMalloc
get	core/SkTemplates.h	/^    void* get() { return fData; }$/;"	f	class:SkAlignedSStorage
get	core/SkTemplates.h	/^    void* get() { return fStorage.get(); }$/;"	f	class:SkAlignedSTStorage
get	core/SkTypes.h	/^    const void* get() const { return fPtr; }$/;"	f	class:SkAutoMalloc
get	core/SkTypes.h	/^    void* get() const { return fPtr; }$/;"	f	class:SkAutoFree
get	core/SkTypes.h	/^    void* get() const { return fPtr; }$/;"	f	class:SkAutoSMalloc
get	core/SkTypes.h	/^    void* get() { return fPtr; }$/;"	f	class:SkAutoMalloc
get	gpu/GrContextFactory.h	/^    GrContext* get(GLContextType type) {$/;"	f	class:GrContextFactory
get	utils/win/SkTScopedComPtr.h	/^    T *get() const { return fPtr; }$/;"	f	class:SkTScopedComPtr
get32	core/Sk64.h	/^    int32_t get32() const { SkASSERT(this->is32()); return (int32_t)fLo; }$/;"	f	struct:Sk64
getActiveMaskStageMask	gpu/GrPaint.h	/^    int getActiveMaskStageMask() const {$/;"	f	class:GrPaint
getActiveStageMask	gpu/GrPaint.h	/^    int getActiveStageMask() const {$/;"	f	class:GrPaint
getActiveTextureStageMask	gpu/GrPaint.h	/^    int getActiveTextureStageMask() const {$/;"	f	class:GrPaint
getAddr	SkBitmap.cpp	/^void* SkBitmap::getAddr(int x, int y) const {$/;"	f	class:SkBitmap
getAddr	core/SkMallocPixelRef.h	/^    void* getAddr() const { return fStorage; }$/;"	f	class:SkMallocPixelRef
getAddr1	SkBitmap.h	/^inline uint8_t* SkBitmap::getAddr1(int x, int y) const {$/;"	f	class:SkBitmap
getAddr1	core/SkBitmap.h	/^inline uint8_t* SkBitmap::getAddr1(int x, int y) const {$/;"	f	class:SkBitmap
getAddr1	core/SkMask.h	/^    uint8_t* getAddr1(int x, int y) const {$/;"	f	struct:SkMask
getAddr16	SkBitmap.h	/^inline uint16_t* SkBitmap::getAddr16(int x, int y) const {$/;"	f	class:SkBitmap
getAddr16	core/SkBitmap.h	/^inline uint16_t* SkBitmap::getAddr16(int x, int y) const {$/;"	f	class:SkBitmap
getAddr32	SkBitmap.h	/^inline uint32_t* SkBitmap::getAddr32(int x, int y) const {$/;"	f	class:SkBitmap
getAddr32	core/SkBitmap.h	/^inline uint32_t* SkBitmap::getAddr32(int x, int y) const {$/;"	f	class:SkBitmap
getAddr8	SkBitmap.h	/^inline uint8_t* SkBitmap::getAddr8(int x, int y) const {$/;"	f	class:SkBitmap
getAddr8	core/SkBitmap.h	/^inline uint8_t* SkBitmap::getAddr8(int x, int y) const {$/;"	f	class:SkBitmap
getAddr8	core/SkMask.h	/^    uint8_t* getAddr8(int x, int y) const {$/;"	f	struct:SkMask
getAddrLCD16	core/SkMask.h	/^    uint16_t* getAddrLCD16(int x, int y) const {$/;"	f	struct:SkMask
getAddrLCD32	core/SkMask.h	/^    uint32_t* getAddrLCD32(int x, int y) const {$/;"	f	struct:SkMask
getAlign	views/SkStackViewLayout.h	/^    Align   getAlign() const { return (Align)fAlign; }$/;"	f	class:SkStackViewLayout
getAllocator	images/SkImageDecoder.h	/^    SkBitmap::Allocator* getAllocator() const { return fAllocator; }$/;"	f	class:SkImageDecoder
getAlpha	core/SkPaint.h	/^    uint8_t getAlpha() const { return SkToU8(SkColorGetA(fColor)); }$/;"	f	class:SkPaint
getAnchorPoint	utils/SkLayer.h	/^    const SkPoint& getAnchorPoint() const { return m_anchorPoint; }$/;"	f	class:SkLayer
getAnimator	animator/SkAnimatorView.h	/^    SkAnimator* getAnimator() const { return fAnimator; }$/;"	f	class:SkAnimatorView
getAt	pdf/SkPDFTypes.h	/^    SkPDFObject* getAt(int index) { return fValue[index]; }$/;"	f	class:SkPDFArray
getBitmap	views/SkWindow.h	/^    const SkBitmap& getBitmap() const { return fBitmap; }$/;"	f	class:SkWindow
getBottom	views/SkBorderView.h	/^    SkScalar getBottom() const { return fBottom; }$/;"	f	class:SkBorderView
getBoundary	utils/SkBoundaryPatch.h	/^    SkBoundary* getBoundary() const { return fBoundary; }$/;"	f	class:SkBoundaryPatch
getBounder	core/SkCanvas.h	/^    SkBounder*  getBounder() const { return fBounder; }$/;"	f	class:SkCanvas
getBounds	SkBitmap.cpp	/^void SkBitmap::getBounds(SkIRect* bounds) const {$/;"	f	class:SkBitmap
getBounds	SkBitmap.cpp	/^void SkBitmap::getBounds(SkRect* bounds) const {$/;"	f	class:SkBitmap
getBounds	core/SkPath.h	/^    const SkRect& getBounds() const {$/;"	f	class:SkPath
getBounds	core/SkRegion.h	/^    const SkIRect& getBounds() const { return fBounds; }$/;"	f	class:SkRegion
getButtonState	views/SkWidget.h	/^    State   getButtonState() const { return fState; }$/;"	f	class:SkButtonWidget
getCap	core/SkStroke.h	/^    SkPaint::Cap    getCap() const { return (SkPaint::Cap)fCap; }$/;"	f	class:SkStroke
getCheckState	views/SkWidgetViews.h	/^    CheckState  getCheckState() const { return (CheckState)fCheckState; }$/;"	f	class:SkCheckButtonView
getChecksum	core/SkDescriptor.h	/^    uint32_t getChecksum() const { return fChecksum; }$/;"	f	class:SkDescriptor
getChildrenMatrix	utils/SkLayer.h	/^    const SkMatrix& getChildrenMatrix() const { return fChildrenMatrix; }$/;"	f	class:SkLayer
getChooser	images/SkImageDecoder.h	/^    Chooser* getChooser() const { return fChooser; }$/;"	f	class:SkImageDecoder
getColor	SkBitmap.cpp	/^SkColor SkBitmap::getColor(int x, int y) const {$/;"	f	class:SkBitmap
getColor	core/SkPaint.h	/^    SkColor getColor() const { return fColor; }$/;"	f	class:SkPaint
getColorFilter	core/SkPaint.h	/^    SkColorFilter* getColorFilter() const { return fColorFilter; }$/;"	f	class:SkPaint
getColorTable	SkBitmap.h	/^    SkColorTable* getColorTable() const { return fColorTable; }$/;"	f	class:SkBitmap
getColorTable	core/SkBitmap.h	/^    SkColorTable* getColorTable() const { return fColorTable; }$/;"	f	class:SkBitmap
getConfig	SkBitmap.h	/^    Config  getConfig() const { return this->config(); }$/;"	f	class:SkBitmap
getConfig	core/SkBitmap.h	/^    Config  getConfig() const { return this->config(); }$/;"	f	class:SkBitmap
getConservativeBounds	gpu/GrClip.h	/^    const GrRect& getConservativeBounds() const { return fConservativeBounds; }$/;"	f	class:GrClip
getConvexity	core/SkPath.h	/^    Convexity getConvexity() const {$/;"	f	class:SkPath
getConvexityOrUnknown	core/SkPath.h	/^    Convexity getConvexityOrUnknown() const { return (Convexity)fConvexity; }$/;"	f	class:SkPath
getCount	core/SkDescriptor.h	/^    uint32_t getCount() const { return fCount; }$/;"	f	class:SkDescriptor
getCount	views/SkOSMenu.h	/^    int         getCount() const { return fItems.count(); }$/;"	f	class:SkOSMenu
getCustomStage	gpu/GrSamplerState.h	/^    GrCustomStage* getCustomStage() const { return fCustomStage; }$/;"	f	class:GrSamplerState
getDecoderFactory	images/SkImageRef.h	/^    SkImageDecoderFactory* getDecoderFactory() const { return fFactory; }$/;"	f	class:SkImageRef
getDefaultStyle	text/SkTextLayout.h	/^    SkTextStyle* getDefaultStyle() const { return fDefaultStyle; }$/;"	f	class:SkTextLayout
getDesc	core/SkDescriptor.h	/^    SkDescriptor* getDesc() const { return fDesc; }$/;"	f	class:SkAutoDescriptor
getDeviceCapabilities	core/SkDevice.h	/^    virtual uint32_t getDeviceCapabilities() { return 0; }$/;"	f	class:SkDevice
getDeviceConfig	core/SkShader.h	/^    SkBitmap::Config    getDeviceConfig() const { return (SkBitmap::Config)fDeviceConfig; }$/;"	f	class:SkShader
getDirtyBounds	views/SkWindow.h	/^    const SkIRect& getDirtyBounds() const { return fDirtyRgn.getBounds(); }$/;"	f	class:SkWindow
getDisplay	views/SkOSWindow_Unix.h	/^    void* getDisplay() const { return (void*)fUnixWindow.fDisplay; }$/;"	f	class:SkOSWindow
getDitherImage	images/SkImageDecoder.h	/^    bool getDitherImage() const { return fDitherImage; }$/;"	f	class:SkImageDecoder
getDoAA	gpu/GrClip.h	/^    bool getDoAA(int i) const   { return fList[i].fDoAA; }$/;"	f	class:GrClip
getDoFill	core/SkStroke.h	/^    bool    getDoFill() const { return SkToBool(fDoFill); }$/;"	f	class:SkStroke
getDocumentFlags	pdf/SkPDFCatalog.h	/^    SkPDFDocument::Flags getDocumentFlags() const { return fDocumentFlags; }$/;"	f	class:SkPDFCatalog
getDumper	utils/SkDumpCanvas.h	/^    Dumper* getDumper() const { return fDumper; }$/;"	f	class:SkDumpCanvas
getElementCount	gpu/GrClip.h	/^    int getElementCount() const { return fList.count(); }$/;"	f	class:GrClip
getElementType	gpu/GrClip.h	/^    GrClipType getElementType(int i) const { return fList[i].fType; }$/;"	f	class:GrClip
getErrorCode	xml/SkXMLParser.h	/^    ErrorCode getErrorCode() const { return fCode; }$/;"	f	class:SkXMLParserError
getEvent	views/SkOSMenu.h	/^        SkEvent*    getEvent() const { return fEvent; }$/;"	f	class:SkOSMenu::Item
getFBOID	gpu/SkGLContext.h	/^    int getFBOID() const { return fFBO; }$/;"	f	class:SkGLContext
getFactoryRecorder	core/SkFlattenable.h	/^    SkFactorySet* getFactoryRecorder() const { return fFactorySet; }$/;"	f	class:SkFlattenableWriteBuffer
getFast32	views/SkEvent.h	/^    uint32_t getFast32() const { return f32; }$/;"	f	class:SkEvent
getFillType	core/SkPath.h	/^    FillType getFillType() const { return (FillType)fFillType; }$/;"	f	class:SkPath
getFilter	gpu/GrSamplerState.h	/^    Filter getFilter() const { return fFilter; }$/;"	f	class:GrSamplerState
getFilterDirection	gpu/GrSamplerState.h	/^    FilterDirection getFilterDirection() const { return fFilterDirection; }$/;"	f	class:GrSamplerState
getFixed	core/Sk64.h	/^    SkFixed getFixed() const {$/;"	f	struct:Sk64
getFlags	SkBitmap.h	/^    unsigned getFlags() const { return fFlags; }$/;"	f	class:SkColorTable
getFlags	core/SkBitmap.h	/^    unsigned getFlags() const { return fFlags; }$/;"	f	class:SkColorTable
getFlags	core/SkColorFilter.h	/^    virtual uint32_t getFlags() { return 0; }$/;"	f	class:SkColorFilter
getFlags	core/SkFlattenable.h	/^    Flags getFlags() const { return (Flags)fFlags; }$/;"	f	class:SkFlattenableWriteBuffer
getFlags	core/SkPaint.h	/^    uint32_t getFlags() const { return fFlags; }$/;"	f	class:SkPaint
getFlags	core/SkShader.h	/^    virtual uint32_t getFlags() { return 0; }$/;"	f	class:SkShader
getFlags	views/SkView.h	/^    uint32_t    getFlags() const { return fFlags; }$/;"	f	class:SkView
getFontCache	gpu/GrContext.h	/^    GrFontCache* getFontCache() { return fFontCache; }$/;"	f	class:GrContext
getFontContrastScale	core/SkDeviceProfile.h	/^    float getFontContrastScale() const { return fContrastScale; }$/;"	f	class:SkDeviceProfile
getFontGammaExponent	core/SkDeviceProfile.h	/^    float getFontGammaExponent() const { return fGammaExponent; }$/;"	f	class:SkDeviceProfile
getFontGlyphUsage	pdf/SkPDFDevice.h	/^    const SkPDFGlyphSetMap& getFontGlyphUsage() const {$/;"	f	class:SkPDFDevice
getFontSpacing	core/SkPaint.h	/^    SkScalar getFontSpacing() const { return this->getFontMetrics(NULL, 0); }$/;"	f	class:SkPaint
getFormat	core/SkScalerContext.h	/^        SkMask::Format getFormat() const {$/;"	f	struct:SkScalerContext::Rec
getFrontBack	images/SkFlipPixelRef.h	/^    void getFrontBack(const void** front, void** back) const {$/;"	f	class:SkFlipPixelRef
getGenerationID	SkBitmap.cpp	/^uint32_t SkBitmap::getGenerationID() const {$/;"	f	class:SkBitmap
getGenerationID	SkPixelRef.cpp	/^uint32_t SkPixelRef::getGenerationID() const {$/;"	f	class:SkPixelRef
getGlyphCount	core/SkScalerContext.h	/^    unsigned    getGlyphCount() { return this->generateGlyphCount(); }$/;"	f	class:SkScalerContext
getGlyphID	core/SkScalerContext.h	/^    uint16_t getGlyphID() const {$/;"	f	struct:SkGlyph
getGlyphID	core/SkScalerContext.h	/^    unsigned getGlyphID(unsigned baseGlyphCount) const {$/;"	f	struct:SkGlyph
getGpu	gpu/GrContext.h	/^    GrGpu* getGpu() { return fGpu; }$/;"	f	class:GrContext
getGpu	gpu/GrContext.h	/^    const GrGpu* getGpu() const { return fGpu; }$/;"	f	class:GrContext
getGpu	gpu/GrResource.h	/^    GrGpu* getGpu() const { return fGpu; }$/;"	f	class:GrResource
getHWND	views/SkOSWindow_Mac.h	/^    void*   getHWND() const { return fHWND; }$/;"	f	class:SkOSWindow
getHWND	views/SkOSWindow_Unix.h	/^    void* getHWND() const { return (void*)fUnixWindow.fWin; }$/;"	f	class:SkOSWindow
getHWND	views/SkOSWindow_Win.h	/^    void*   getHWND() const { return fHWND; }$/;"	f	class:SkOSWindow
getHWND	views/SkOSWindow_iOS.h	/^    void*   getHWND() const { return fHWND; }$/;"	f	class:SkOSWindow
getHash	gpu/GrKey.h	/^    intptr_t getHash() const { return fHash; }$/;"	f	class:GrKey
getHeight	utils/SkLayer.h	/^    SkScalar getHeight() const { return m_size.height(); }$/;"	f	class:SkLayer
getHinting	core/SkPaint.h	/^    Hinting getHinting() const {$/;"	f	class:SkPaint
getHinting	core/SkScalerContext.h	/^        SkPaint::Hinting getHinting() const {$/;"	f	struct:SkScalerContext::Rec
getID	views/SkOSMenu.h	/^        int         getID() const { return fID; }$/;"	f	class:SkOSMenu::Item
getIDs	svg/SkSVGParser.h	/^    SkTDict<SkSVGElement*>& getIDs() { return fIDs; }$/;"	f	class:SkSVGParser
getImageFilter	core/SkPaint.h	/^    SkImageFilter* getImageFilter() const { return fImageFilter; }$/;"	f	class:SkPaint
getIndex8Color	SkBitmap.h	/^inline SkPMColor SkBitmap::getIndex8Color(int x, int y) const {$/;"	f	class:SkBitmap
getIndex8Color	core/SkBitmap.h	/^inline SkPMColor SkBitmap::getIndex8Color(int x, int y) const {$/;"	f	class:SkBitmap
getInstance	gpu/GrProgramStageFactory.h	/^    static const GrProgramStageFactory& getInstance() {$/;"	f	class:GrTProgramStageFactory
getInverseClass	core/SkShader.h	/^    MatrixClass         getInverseClass() const { return (MatrixClass)fTotalInverseClass; }$/;"	f	class:SkShader
getJoin	core/SkStroke.h	/^    SkPaint::Join   getJoin() const { return (SkPaint::Join)fJoin; }$/;"	f	class:SkStroke
getKernel	gpu/GrSamplerState.h	/^    const float* getKernel() const { return fKernel; }$/;"	f	class:GrSamplerState
getKernelWidth	gpu/GrSamplerState.h	/^    int getKernelWidth() const { return fKernelWidth; }$/;"	f	class:GrSamplerState
getKeyEquivalent	views/SkOSMenu.h	/^        SkUnichar   getKeyEquivalent() const { return fKey; }$/;"	f	class:SkOSMenu::Item
getLabel	views/SkOSMenu.h	/^        const char* getLabel() const { return fLabel.c_str(); }$/;"	f	class:SkOSMenu::Item
getLeft	views/SkBorderView.h	/^    SkScalar getLeft() const { return fLeft; }$/;"	f	class:SkBorderView
getLength	core/SkDescriptor.h	/^    uint32_t getLength() const { return fLength; }$/;"	f	class:SkDescriptor
getLength	core/SkStream.h	/^    size_t getLength() { return this->read(NULL, 0); }$/;"	f	class:SkStream
getLineNumber	xml/SkXMLParser.h	/^    int getLineNumber() const { return fLineNumber; }$/;"	f	class:SkXMLParserError
getListSource	views/SkWidget.h	/^    SkListSource*   getListSource() const { return fSource; }$/;"	f	class:SkGridView
getListSource	views/SkWidget.h	/^    SkListSource*   getListSource() const { return fSource; }$/;"	f	class:SkListView
getListSource	views/SkWidgetViews.h	/^    SkListSource*   getListSource() const { return fSource; }$/;"	f	class:SkListView
getLocalClipBoundsCompareType	core/SkCanvas.h	/^    const SkRectCompareType& getLocalClipBoundsCompareType() const {$/;"	f	class:SkCanvas
getLocalClipBoundsCompareType	core/SkCanvas.h	/^    const SkRectCompareType& getLocalClipBoundsCompareType(EdgeType et) const {$/;"	f	class:SkCanvas
getLocalMatrix	views/SkView.h	/^    const SkMatrix& getLocalMatrix() const { return fMatrix; }$/;"	f	class:SkView
getLooper	core/SkPaint.h	/^    SkDrawLooper* getLooper() const { return fLooper; }$/;"	f	class:SkPaint
getLuminanceBits	core/SkScalerContext.h	/^        unsigned getLuminanceBits() const {$/;"	f	struct:SkScalerContext::Rec
getLuminanceByte	core/SkScalerContext.h	/^        U8CPU getLuminanceByte() const {$/;"	f	struct:SkScalerContext::Rec
getLuminanceColor	core/SkScalerContext.h	/^        SkColor getLuminanceColor() const {$/;"	f	struct:SkScalerContext::Rec
getMSAASampleCount	views/SkOSWindow_Unix.h	/^    int getMSAASampleCount() const { return fMSAASampleCount; }$/;"	f	class:SkOSWindow
getMapPtsProc	core/SkMatrix.h	/^    MapPtsProc getMapPtsProc() const {$/;"	f	class:SkMatrix
getMapXYProc	core/SkMatrix.h	/^    MapXYProc getMapXYProc() const {$/;"	f	class:SkMatrix
getMask	gpu/GrPaint.h	/^    GrTexture* getMask(int i) const { $/;"	f	class:GrPaint
getMaskFilter	core/SkPaint.h	/^    SkMaskFilter* getMaskFilter() const { return fMaskFilter; }$/;"	f	class:SkPaint
getMaskFormat	core/SkScalerContext.h	/^    SkMask::Format getMaskFormat() const {$/;"	f	class:SkScalerContext
getMaskSampler	gpu/GrPaint.h	/^    const GrSamplerState& getMaskSampler(int i) const {$/;"	f	class:GrPaint
getMatrix	effects/Sk2DPathEffect.h	/^    const SkMatrix& getMatrix() const { return fMatrix; }$/;"	f	class:Sk2DPathEffect
getMatrix	gpu/GrSamplerState.h	/^    const GrMatrix& getMatrix() const { return fMatrix; }$/;"	f	class:GrSamplerState
getMatrix	utils/SkLayer.h	/^    const SkMatrix& getMatrix() const { return fMatrix; }$/;"	f	class:SkLayer
getMatrix	views/SkWindow.h	/^    const SkMatrix& getMatrix() const { return fMatrix; }$/;"	f	class:SkWindow
getMax	views/SkProgressBarView.h	/^        int getMax() const { return fMax; }$/;"	f	class:SkProgressBarView
getMax	views/SkWidget.h	/^    uint16_t    getMax() const { return fMax; }$/;"	f	class:SkProgressView
getMax	views/SkWidget.h	/^    uint16_t    getMax() const { return fMax; }$/;"	f	class:SkSliderView
getMenus	views/SkWindow.h	/^    const SkTDArray<SkOSMenu*>* getMenus() { return &fMenus; }$/;"	f	class:SkWindow
getMetaData	views/SkEvent.h	/^    SkMetaData& getMetaData() { return fMeta; }$/;"	f	class:SkEvent
getMetaData	views/SkEvent.h	/^    const SkMetaData& getMetaData() const { return fMeta; }$/;"	f	class:SkEvent
getMode	utils/SkTextBox.h	/^    Mode    getMode() const { return (Mode)fMode; }$/;"	f	class:SkTextBox
getMode	views/SkTextBox.h	/^    Mode    getMode() const { return (Mode)fMode; }$/;"	f	class:SkTextBox
getMode	views/SkWidget.h	/^    Mode    getMode() const { return (Mode)fMode; }$/;"	f	class:SkStaticTextView
getMode	views/SkWidgetViews.h	/^    Mode    getMode() const { return (Mode)fMode; }$/;"	f	class:SkStaticTextView
getNativeCode	xml/SkXMLParser.h	/^    int getNativeCode() const { return fNativeCode; }$/;"	f	class:SkXMLParserError
getNestLevel	utils/SkDumpCanvas.h	/^    int getNestLevel() const { return fNestLevel; }$/;"	f	class:SkDumpCanvas
getOffset	core/SkStream.h	/^    size_t getOffset() const { return fBytesWritten; }$/;"	f	class:SkDynamicMemoryWStream
getOp	gpu/GrClip.h	/^    SkRegion::Op getOp(int i) const { return fList[i].fOp; }$/;"	f	class:GrClip
getOpacity	utils/SkLayer.h	/^    SkScalar getOpacity() const { return m_opacity; }$/;"	f	class:SkLayer
getOrient	views/SkStackViewLayout.h	/^    Orient  getOrient() const { return (Orient)fOrient; }$/;"	f	class:SkStackViewLayout
getOrigin	core/SkDevice.h	/^    const SkIPoint& getOrigin() const { return fOrigin; }$/;"	f	class:SkDevice
getPack	views/SkStackViewLayout.h	/^    Pack    getPack() const { return (Pack)fPack; }$/;"	f	class:SkStackViewLayout
getPaint	core/SkDraw.h	/^    const SkPaint&  getPaint() const { return fPaint; }$/;"	f	class:SkTextToPathIter
getPaintAlpha	core/SkShader.h	/^    uint8_t             getPaintAlpha() const { return fPaintAlpha; }$/;"	f	class:SkShader
getParent	utils/SkLayer.h	/^    SkLayer* getParent() const { return fParent; }$/;"	f	class:SkLayer
getParent	views/SkView.h	/^    SkView*     getParent() const { return fParent; }$/;"	f	class:SkView
getPath	gpu/GrClip.h	/^    const SkPath& getPath(int i) const {$/;"	f	class:GrClip
getPathEffect	core/SkPaint.h	/^    SkPathEffect* getPathEffect() const { return fPathEffect; }$/;"	f	class:SkPaint
getPathFill	gpu/GrClip.h	/^    GrPathFill getPathFill(int i) const {$/;"	f	class:GrClip
getPathScale	core/SkDraw.h	/^    SkScalar        getPathScale() const { return fScale; }$/;"	f	class:SkTextToPathIter
getPeeker	images/SkImageDecoder.h	/^    Peeker* getPeeker() const { return fPeeker; }$/;"	f	class:SkImageDecoder
getPerspX	core/SkMatrix.h	/^    SkPersp getPerspX() const { return fMat[kMPersp0]; }$/;"	f	class:SkMatrix
getPerspY	core/SkMatrix.h	/^    SkPersp getPerspY() const { return fMat[kMPersp1]; }$/;"	f	class:SkMatrix
getPerspectiveTypeMaskOnly	core/SkMatrix.h	/^    TypeMask getPerspectiveTypeMaskOnly() const {$/;"	f	class:SkMatrix
getPixelRef	core/SkDevice.h	/^    SkPixelRef* getPixelRef() const { return fBitmap.pixelRef(); }$/;"	f	class:SkDevice
getPixels	SkBitmap.h	/^    void* getPixels() const { return fPixels; }$/;"	f	class:SkBitmap
getPixels	core/SkBitmap.h	/^    void* getPixels() const { return fPixels; }$/;"	f	class:SkBitmap
getPosition	utils/SkLayer.h	/^    const SkPoint& getPosition() const { return m_position; }$/;"	f	class:SkLayer
getProgress	views/SkProgressBarView.h	/^        int getProgress() const { return fProgress; }$/;"	f	class:SkProgressBarView
getProxy	utils/SkProxyCanvas.h	/^    SkCanvas*   getProxy() const { return fProxy; }$/;"	f	class:SkProxyCanvas
getRadial2CenterX1	gpu/GrSamplerState.h	/^    GrScalar getRadial2CenterX1() const { return fRadial2CenterX1; }$/;"	f	class:GrSamplerState
getRadial2Radius0	gpu/GrSamplerState.h	/^    GrScalar getRadial2Radius0() const { return fRadial2Radius0; }$/;"	f	class:GrSamplerState
getRasterizer	core/SkPaint.h	/^    SkRasterizer* getRasterizer() const { return fRasterizer; }$/;"	f	class:SkPaint
getReader32	core/SkOrderedReadBuffer.h	/^    SkReader32* getReader32() { return &fReader; }$/;"	f	class:SkOrderedReadBuffer
getRecordingCanvas	core/SkPicture.h	/^    SkCanvas* getRecordingCanvas() const { return fCanvas; }$/;"	f	class:SkAutoPictureRecord
getRect	gpu/GrClip.h	/^    const GrRect& getRect(int i) const {$/;"	f	class:GrClip
getRefCnt	core/SkRefCnt.h	/^    int32_t getRefCnt() const { return fRefCnt; }$/;"	f	class:SkRefCnt
getRefCnt	effects/SkGroupShape.h	/^    int32_t getRefCnt() const { return fRefCnt; }$/;"	f	class:SkTRefCnt
getRefCntRecorder	core/SkFlattenable.h	/^    SkRefCntSet* getRefCntRecorder() const { return fRCSet; }$/;"	f	class:SkFlattenableWriteBuffer
getResolveRect	gpu/GrRenderTarget.h	/^    const GrIRect& getResolveRect() const { return fResolveRect; }$/;"	f	class:GrRenderTarget
getRight	views/SkBorderView.h	/^    SkScalar getRight() const { return fRight; }$/;"	f	class:SkBorderView
getRound	views/SkStackViewLayout.h	/^    bool    getRound() const { return SkToBool(fRound); }$/;"	f	class:SkStackViewLayout
getRowHeight	views/SkWidget.h	/^    SkScalar    getRowHeight() const { return fRowHeight; }$/;"	f	class:SkListView
getSafeSize	SkBitmap.cpp	/^size_t SkBitmap::getSafeSize() const {$/;"	f	class:SkBitmap
getSafeSize64	SkBitmap.cpp	/^Sk64 SkBitmap::getSafeSize64() const {$/;"	f	class:SkBitmap
getSampleMode	gpu/GrSamplerState.h	/^    SampleMode getSampleMode() const { return fSampleMode; }$/;"	f	class:GrSamplerState
getSampleSize	images/SkImageDecoder.h	/^    int getSampleSize() const { return fSampleSize; }$/;"	f	class:SkImageDecoder
getSaveCount	core/SkClipStack.h	/^    int getSaveCount() const { return fSaveCount; }$/;"	f	class:SkClipStack
getScaleType	views/SkImageView.h	/^    ScaleType   getScaleType() const { return (ScaleType)fScaleType; }$/;"	f	class:SkImageView
getScaleX	core/SkMatrix.h	/^    SkScalar getScaleX() const { return fMat[kMScaleX]; }$/;"	f	class:SkMatrix
getScaleY	core/SkMatrix.h	/^    SkScalar getScaleY() const { return fMat[kMScaleY]; }$/;"	f	class:SkMatrix
getSegmentMasks	core/SkPath.h	/^    uint32_t getSegmentMasks() const { return fSegmentMask; }$/;"	f	class:SkPath
getSelection	views/SkWidget.h	/^    int     getSelection() const { return fCurrIndex; }$/;"	f	class:SkGridView
getSelection	views/SkWidget.h	/^    int     getSelection() const { return fCurrIndex; }$/;"	f	class:SkListView
getSelection	views/SkWidgetViews.h	/^    int     getSelection() const { return fCurrIndex; }$/;"	f	class:SkListView
getShader	core/SkPaint.h	/^    SkShader* getShader() const { return fShader; }$/;"	f	class:SkPaint
getShapeMatrixRef	effects/SkGroupShape.h	/^    SkMatrixRef* getShapeMatrixRef(int index) const {$/;"	f	class:SkGroupShape
getShown	views/SkScrollBarView.h	/^    unsigned getShown() const { return fShownLength; }$/;"	f	class:SkScrollBarView
getSign	core/Sk64.h	/^    int     getSign() const { return (fHi >> 31) | Sk32ToBool(fHi | fLo); }$/;"	f	struct:Sk64
getSingleBlock	core/SkWriter32.h	/^    void* getSingleBlock() const { return fSingleBlock; }$/;"	f	class:SkWriter32
getSinkID	views/SkEventSink.h	/^    SkEventSinkID getSinkID() const { return fID; }$/;"	f	class:SkEventSink
getSize	SkBitmap.h	/^    size_t getSize() const { return fHeight * fRowBytes; }$/;"	f	class:SkBitmap
getSize	core/SkBitmap.h	/^    size_t getSize() const { return fHeight * fRowBytes; }$/;"	f	class:SkBitmap
getSize	core/SkMallocPixelRef.h	/^    size_t getSize() const { return fSize; }$/;"	f	class:SkMallocPixelRef
getSize	utils/SkLayer.h	/^    const SkSize& getSize() const { return m_size; }$/;"	f	class:SkLayer
getSize64	SkBitmap.h	/^    Sk64 getSize64() const {$/;"	f	class:SkBitmap
getSize64	core/SkBitmap.h	/^    Sk64 getSize64() const {$/;"	f	class:SkBitmap
getSkewX	core/SkMatrix.h	/^    SkScalar getSkewX() const { return fMat[kMSkewX]; }$/;"	f	class:SkMatrix
getSkewY	core/SkMatrix.h	/^    SkScalar getSkewY() const { return fMat[kMSkewY]; }$/;"	f	class:SkMatrix
getSlotName	views/SkOSMenu.h	/^        const char* getSlotName() const { return fSlotName.c_str(); }$/;"	f	class:SkOSMenu::Item
getSpacer	views/SkStackViewLayout.h	/^    SkScalar    getSpacer() const { return fSpacer; }$/;"	f	class:SkStackViewLayout
getSpacingAlign	utils/SkTextBox.h	/^    SpacingAlign    getSpacingAlign() const { return (SpacingAlign)fSpacingAlign; }$/;"	f	class:SkTextBox
getSpacingAlign	views/SkTextBox.h	/^    SpacingAlign    getSpacingAlign() const { return (SpacingAlign)fSpacingAlign; }$/;"	f	class:SkTextBox
getSpacingAlign	views/SkWidget.h	/^    SkTextBox::SpacingAlign getSpacingAlign() const { return (SkTextBox::SpacingAlign)fSpacingAlign; }$/;"	f	class:SkStaticTextView
getSpacingAlign	views/SkWidgetViews.h	/^    SkTextBox::SpacingAlign getSpacingAlign() const { return (SkTextBox::SpacingAlign)fSpacingAlign; }$/;"	f	class:SkStaticTextView
getSpan16Alpha	core/SkShader.h	/^    virtual uint8_t getSpan16Alpha() const { return fPaintAlpha; }$/;"	f	class:SkShader
getStart	views/SkScrollBarView.h	/^    unsigned getStart() const { return fStartPoint; }$/;"	f	class:SkScrollBarView
getState	views/SkWidget.h	/^    State   getState() const { return fState; }$/;"	f	class:SkCheckBoxView
getStencilBuffer	gpu/GrRenderTarget.h	/^    GrStencilBuffer* getStencilBuffer() const { return fStencilBuffer; }$/;"	f	class:GrRenderTarget
getStrokeCap	core/SkPaint.h	/^    Cap getStrokeCap() const { return (Cap)fCapType; }$/;"	f	class:SkPaint
getStrokeJoin	core/SkPaint.h	/^    Join getStrokeJoin() const { return (Join)fJoinType; }$/;"	f	class:SkPaint
getStrokeMiter	core/SkPaint.h	/^    SkScalar getStrokeMiter() const { return fMiterLimit; }$/;"	f	class:SkPaint
getStrokeWidth	core/SkPaint.h	/^    SkScalar getStrokeWidth() const { return fWidth; }$/;"	f	class:SkPaint
getStyle	core/SkPaint.h	/^    Style getStyle() const { return (Style)fStyle; }$/;"	f	class:SkPaint
getSubOffset	SkBitmap.cpp	/^static size_t getSubOffset(const SkBitmap& bm, int x, int y) {$/;"	f	file:
getSubX	core/SkScalerContext.h	/^    unsigned getSubX() const {$/;"	f	struct:SkGlyph
getSubXFixed	core/SkScalerContext.h	/^    SkFixed getSubXFixed() const {$/;"	f	struct:SkGlyph
getSubYFixed	core/SkScalerContext.h	/^    SkFixed getSubYFixed() const {$/;"	f	struct:SkGlyph
getTargetID	views/SkEvent.h	/^    SkEventSinkID getTargetID() const { return fTargetID; }$/;"	f	class:SkEvent
getTargetProc	views/SkEvent.h	/^    Proc getTargetProc() const { return fTargetProc; }$/;"	f	class:SkEvent
getTextAlign	core/SkPaint.h	/^    Align   getTextAlign() const { return (Align)fTextAlign; }$/;"	f	class:SkPaint
getTextContext	gpu/GrTextContext.h	/^inline GrTextContext* GrTextContext::AutoFinish::getTextContext() const {$/;"	f	class:GrTextContext::AutoFinish
getTextEncoding	core/SkPaint.h	/^    TextEncoding getTextEncoding() const { return (TextEncoding)fTextEncoding; }$/;"	f	class:SkPaint
getTextScaleX	core/SkPaint.h	/^    SkScalar getTextScaleX() const { return fTextScaleX; }$/;"	f	class:SkPaint
getTextSize	core/SkPaint.h	/^    SkScalar getTextSize() const { return fTextSize; }$/;"	f	class:SkPaint
getTextSkewX	core/SkPaint.h	/^    SkScalar getTextSkewX() const { return fTextSkewX; }$/;"	f	class:SkPaint
getTexture	SkBitmap.cpp	/^SkGpuTexture* SkBitmap::getTexture() const {$/;"	f	class:SkBitmap
getTexture	core/SkPixelRef.h	/^    virtual SkGpuTexture* getTexture() { return NULL; }$/;"	f	class:SkPixelRef
getTexture	gpu/GrPaint.h	/^    GrTexture* getTexture(int i) const { $/;"	f	class:GrPaint
getTextureDomain	gpu/GrSamplerState.h	/^    const GrRect& getTextureDomain() const { return fTextureDomain; }$/;"	f	class:GrSamplerState
getTextureSampler	gpu/GrPaint.h	/^    const GrSamplerState& getTextureSampler(int i) const {$/;"	f	class:GrPaint
getTitle	views/SkOSMenu.h	/^    const char* getTitle() const { return fTitle.c_str(); }$/;"	f	class:SkOSMenu
getTitle	views/SkWindow.h	/^    const char* getTitle() const { return fTitle.c_str(); }$/;"	f	class:SkWindow
getTop	views/SkBorderView.h	/^    SkScalar getTop() const { return fTop; }$/;"	f	class:SkBorderView
getTotal	views/SkScrollBarView.h	/^    unsigned getTotal() const { return fTotalLength; }$/;"	f	class:SkScrollBarView
getTotalInverse	core/SkShader.h	/^    const SkMatrix&     getTotalInverse() const { return fTotalInverse; }$/;"	f	class:SkShader
getTranslateX	core/SkMatrix.h	/^    SkScalar getTranslateX() const { return fMat[kMTransX]; }$/;"	f	class:SkMatrix
getTranslateY	core/SkMatrix.h	/^    SkScalar getTranslateY() const { return fMat[kMTransY]; }$/;"	f	class:SkMatrix
getType	core/SkMatrix.h	/^    TypeMask getType() const {$/;"	f	class:SkMatrix
getType	views/SkOSMenu.h	/^        Type        getType() const { return fType; }$/;"	f	class:SkOSMenu::Item
getType	views/SkView.h	/^        const char* getType() const { return fType; }$/;"	f	class:SkView::Click
getTypeface	core/SkPaint.h	/^    SkTypeface* getTypeface() const { return fTypeface; }$/;"	f	class:SkPaint
getTypefaceRecorder	core/SkFlattenable.h	/^    SkRefCntSet* getTypefaceRecorder() const { return fTFSet; }$/;"	f	class:SkFlattenableWriteBuffer
getUCS2	core/SkString.h	/^    const uint16_t* getUCS2() const { return fUCS2; }$/;"	f	class:SkAutoUCS2
getURI	core/SkPixelRef.h	/^    const char* getURI() const { return fURI.size() ? fURI.c_str() : NULL; }$/;"	f	class:SkPixelRef
getUnixWindow	views/SkOSWindow_Unix.h	/^    void* getUnixWindow() const { return (void*)&fUnixWindow; }$/;"	f	class:SkOSWindow
getValue	views/SkWidget.h	/^    uint16_t    getValue() const { return fValue; }$/;"	f	class:SkProgressView
getValue	views/SkWidget.h	/^    uint16_t    getValue() const { return fValue; }$/;"	f	class:SkSliderView
getVisibleRowCount	views/SkWidgetViews.h	/^    int     getVisibleRowCount() const { return fVisibleRowCount; }$/;"	f	class:SkListView
getWXFrame	views/SkOSWindow_wxwidgets.h	/^    wxFrame* getWXFrame() const { return fFrame; }$/;"	f	class:SkOSWindow
getWeakCnt	core/SkWeakRefCnt.h	/^    int32_t getWeakCnt() const { return fWeakCnt; }$/;"	f	class:SkWeakRefCnt
getWidth	utils/SkLayer.h	/^    SkScalar getWidth() const { return m_size.width(); }$/;"	f	class:SkLayer
getWrapX	gpu/GrSamplerState.h	/^    WrapMode getWrapX() const { return fWrapX; }$/;"	f	class:GrSamplerState
getWrapY	gpu/GrSamplerState.h	/^    WrapMode getWrapY() const { return fWrapY; }$/;"	f	class:GrSamplerState
getXY	core/SkPerspIter.h	/^    const SkFixed* getXY() const { return fStorage; }$/;"	f	class:SkPerspIter
getXfermode	core/SkPaint.h	/^    SkXfermode* getXfermode() const { return fXfermode; }$/;"	f	class:SkPaint
get_default_mutex	SkPixelRef.cpp	/^SkBaseMutex* get_default_mutex() {$/;"	f
gl	gpu/SkGLContext.h	/^    const GrGLInterface* gl() const { return fGL; }$/;"	f	class:SkGLContext
globalM	views/SkTouchGesture.h	/^    const SkMatrix& globalM() const { return fGlobalM; }$/;"	f	class:SkTouchGesture
globalRef	SkPixelRef.cpp	/^void SkPixelRef::globalRef(void* data) {$/;"	f	class:SkPixelRef
globalToLocal	views/SkView.h	/^    void        globalToLocal(SkPoint* pt) const { if (pt) this->globalToLocal(pt->fX, pt->fY, pt); }$/;"	f	class:SkView
globalUnref	SkPixelRef.cpp	/^void SkPixelRef::globalUnref() {$/;"	f	class:SkPixelRef
glyphID	gpu/GrGlyph.h	/^    uint16_t glyphID() const { return UnpackID(fPackedID); }$/;"	f	struct:GrGlyph
growBy	core/SkTDArray.h	/^    void growBy(size_t extra) {$/;"	f	class:SkTDArray
growToInclude	SkRect.h	/^    void growToInclude(SkScalar x, SkScalar y) {$/;"	f	struct:SkRect
growToInclude	SkRect.h	/^    void growToInclude(const SkRect& r) { this->join(r); }$/;"	f	struct:SkRect
growToInclude	core/SkRect.h	/^    void growToInclude(SkScalar x, SkScalar y) {$/;"	f	struct:SkRect
growToInclude	core/SkRect.h	/^    void growToInclude(const SkRect& r) { this->join(r); }$/;"	f	struct:SkRect
hasBool	core/SkMetaData.h	/^    bool hasBool(const char name[], bool value) const {$/;"	f	class:SkMetaData
hasBool	views/SkEvent.h	/^    bool hasBool(const char name[], bool value) const { return fMeta.hasBool(name, value); }$/;"	f	class:SkEvent
hasConservativeBounds	gpu/GrClip.h	/^    bool hasConservativeBounds() const { return fConservativeBoundsValid; }$/;"	f	class:GrClip
hasData	core/SkMetaData.h	/^    bool hasData(const char name[], const void* data, size_t byteCount) const {$/;"	f	class:SkMetaData
hasData	views/SkEvent.h	/^    bool hasData(const char name[], const void* data, size_t byteCount) const {$/;"	f	class:SkEvent
hasError	xml/SkXMLParser.h	/^    bool hasError() const { return fCode != kNoError || fNativeCode != -1; }$/;"	f	class:SkXMLParserError
hasMask	gpu/GrPaint.h	/^    bool hasMask() const {$/;"	f	class:GrPaint
hasMipMap	SkBitmap.cpp	/^bool SkBitmap::hasMipMap() const {$/;"	f	class:SkBitmap
hasNoun	xml/SkXMLParser.h	/^    bool hasNoun() const { return fNoun.size() > 0; }$/;"	f	class:SkXMLParserError
hasPerspective	core/SkMatrix.h	/^    bool hasPerspective() const {$/;"	f	class:SkMatrix
hasPtr	core/SkMetaData.h	/^    bool hasPtr(const char name[], void* value) const {$/;"	f	class:SkMetaData
hasPtr	views/SkEvent.h	/^    bool hasPtr(const char name[], void* value) const { return fMeta.hasPtr(name, value); }$/;"	f	class:SkEvent
hasRefCnt	core/SkMetaData.h	/^    bool hasRefCnt(const char name[], SkRefCnt* ptr) {$/;"	f	class:SkMetaData
hasS32	core/SkMetaData.h	/^    bool hasS32(const char name[], int32_t value) const {$/;"	f	class:SkMetaData
hasS32	views/SkEvent.h	/^    bool hasS32(const char name[], int32_t value) const { return fMeta.hasS32(name, value); }$/;"	f	class:SkEvent
hasScalar	core/SkMetaData.h	/^    bool hasScalar(const char name[], SkScalar value) const {$/;"	f	class:SkMetaData
hasScalar	views/SkEvent.h	/^    bool hasScalar(const char name[], SkScalar value) const { return fMeta.hasScalar(name, value); }$/;"	f	class:SkEvent
hasScrollBar	views/SkWidgetViews.h	/^    bool    hasScrollBar() const { return fScrollBar != NULL; }$/;"	f	class:SkListView
hasString	core/SkMetaData.h	/^    bool hasString(const char name[], const char value[]) const {$/;"	f	class:SkMetaData
hasString	views/SkEvent.h	/^    bool hasString(const char name[], const char value[]) const { return fMeta.hasString(name, value); }$/;"	f	class:SkEvent
hasTexture	gpu/GrPaint.h	/^    bool hasTexture() const {$/;"	f	class:GrPaint
hasTextureDomain	gpu/GrSamplerState.h	/^    bool hasTextureDomain() const {return SkIntToScalar(0) != fTextureDomain.right();}$/;"	f	class:GrSamplerState
hasTextureOrMask	gpu/GrPaint.h	/^    bool hasTextureOrMask() const {$/;"	f	class:GrPaint
height	SkBitmap.h	/^    int height() const { return fHeight; }$/;"	f	class:SkBitmap
height	SkRect.h	/^    SkScalar    height() const { return fBottom - fTop; }$/;"	f	struct:SkRect
height	SkRect.h	/^    int height() const { return fBottom - fTop; }$/;"	f	struct:SkIRect
height	core/SkBitmap.h	/^    int height() const { return fHeight; }$/;"	f	class:SkBitmap
height	core/SkDevice.h	/^    virtual int height() const { return fBitmap.height(); }$/;"	f	class:SkDevice
height	core/SkPicture.h	/^    int height() const { return fHeight; }$/;"	f	class:SkPicture
height	core/SkRect.h	/^    SkScalar    height() const { return fBottom - fTop; }$/;"	f	struct:SkRect
height	core/SkRect.h	/^    int height() const { return fBottom - fTop; }$/;"	f	struct:SkIRect
height	core/SkSize.h	/^	T height() const { return fHeight; }$/;"	f	struct:SkTSize
height	gpu/GrGlyph.h	/^    int height() const { return fBounds.height(); }$/;"	f	struct:GrGlyph
height	gpu/GrRect.h	/^    int height() const { return fBottom - fTop; }$/;"	f	struct:GrIRect16
height	gpu/GrRenderTarget.h	/^    int height() const { return fHeight; }$/;"	f	class:GrRenderTarget
height	gpu/GrTexture.h	/^    int height() const { return fHeight; }$/;"	f	class:GrTexture
height	images/SkPageFlipper.h	/^    int height() const { return fHeight; }$/;"	f	class:SkPageFlipper
height	views/SkView.h	/^    SkScalar    height() const { return fHeight; }$/;"	f	class:SkView
immediateCanvas	utils/SkDeferredCanvas.h	/^        SkCanvas* immediateCanvas() const {return fImmediateCanvas;}$/;"	f	class:SkDeferredCanvas::DeferredDevice
immediateDevice	utils/SkDeferredCanvas.h	/^        SkDevice* immediateDevice() const {return fImmediateDevice;}$/;"	f	class:SkDeferredCanvas::DeferredDevice
incPtr	core/SkPtrRecorder.h	/^    virtual void incPtr(void* ptr) {}$/;"	f	class:SkPtrSet
index	core/SkTDStack.h	/^    T& index(int idx) {$/;"	f	class:SkTDStack
index	core/SkTDStack.h	/^    const T& index(int idx) const {$/;"	f	class:SkTDStack
indexCount	utils/SkMeshUtils.h	/^    size_t          indexCount() const { return fIndexCount; }$/;"	f	class:SkMeshIndices
indices	utils/SkMeshUtils.h	/^    const uint16_t* indices() const { return fIndices; }$/;"	f	class:SkMeshIndices
init	core/SkBlitter.h	/^    void init(SkBlitter* blitter, const SkIRect& clipRect) {$/;"	f	class:SkRectClipBlitter
init	core/SkBlitter.h	/^    void init(SkBlitter* blitter, const SkRegion* clipRgn) {$/;"	f	class:SkRgnClipBlitter
init	core/SkDescriptor.h	/^    void init()$/;"	f	class:SkDescriptor
init	core/SkScalerContext.h	/^    void init(uint32_t id) {$/;"	f	struct:SkGlyph
init	core/SkTArray.h	/^    void init(const T* array, int count,$/;"	f	class:SkTArray
init	core/SkTLazy.h	/^    T* init() {$/;"	f	class:SkTLazy
init	gpu/GrGlyph.h	/^    void init(GrGlyph::PackedID packed, const GrIRect& bounds) {$/;"	f	struct:GrGlyph
init	gpu/GrTextContext.h	/^    virtual void init(GrContext* context, const GrPaint&,$/;"	f	class:GrTextContext
init	utils/SkMeshUtils.h	/^    bool init(int texW, int texH, int rows, int cols) {$/;"	f	class:SkMeshIndices
initialTransform	pdf/SkPDFDevice.h	/^    SK_API const SkMatrix& initialTransform() const {$/;"	f	class:SkPDFDevice
inlineFactoryNames	core/SkFlattenable.h	/^    bool inlineFactoryNames() const {$/;"	f	class:SkFlattenableWriteBuffer
insert	core/SkString.h	/^    void insert(size_t offset, const SkString& src) { this->insert(offset, src.c_str(), src.size()); }$/;"	f	class:SkString
insert	core/SkTDArray.h	/^    T* insert(size_t index) {$/;"	f	class:SkTDArray
insert	core/SkTDArray.h	/^    T* insert(size_t index, size_t count, const T* src = NULL) {$/;"	f	class:SkTDArray
insertName	pdf/SkPDFTypes.h	/^    void insertName(const char key[], const SkString& name) {$/;"	f	class:SkPDFDict
inset	SkRect.h	/^    void inset(SkScalar dx, SkScalar dy)  {$/;"	f	struct:SkRect
inset	SkRect.h	/^    void inset(int32_t dx, int32_t dy) {$/;"	f	struct:SkIRect
inset	core/SkRect.h	/^    void inset(SkScalar dx, SkScalar dy)  {$/;"	f	struct:SkRect
inset	core/SkRect.h	/^    void inset(int32_t dx, int32_t dy) {$/;"	f	struct:SkIRect
inspect	images/SkImageDecoder.h	/^        virtual void inspect(int index, SkBitmap::Config config, int width, int height) {}$/;"	f	class:SkImageDecoder::Chooser
int16_t	config/sk_stdint.h	/^typedef short int16_t;$/;"	t
int16_t	gpu/GrConfig.h	/^typedef short int16_t;$/;"	t
int32_t	config/sk_stdint.h	/^typedef int int32_t;$/;"	t
int32_t	gpu/GrConfig.h	/^typedef int int32_t;$/;"	t
int64_t	config/sk_stdint.h	/^typedef long long int64_t;$/;"	t
int64_t	gpu/GrConfig.h	/^typedef __int64 int64_t;$/;"	t
int8_t	config/sk_stdint.h	/^typedef signed char int8_t;$/;"	t
int8_t	gpu/GrConfig.h	/^typedef signed char int8_t;$/;"	t
internalGet	pdf/SkBitSet.h	/^    uint32_t* internalGet(int index) const {$/;"	f	class:SkBitSet
internal_dispose	core/SkRefCnt.h	/^    virtual void internal_dispose() const {$/;"	f	class:SkRefCnt
intersect	SkRect.h	/^    bool intersect(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
intersect	SkRect.h	/^    bool intersect(const SkIRect& r) {$/;"	f	struct:SkIRect
intersect	SkRect.h	/^    bool intersect(int32_t left, int32_t top, int32_t right, int32_t bottom) {$/;"	f	struct:SkIRect
intersect	core/SkRect.h	/^    bool intersect(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
intersect	core/SkRect.h	/^    bool intersect(const SkIRect& r) {$/;"	f	struct:SkIRect
intersect	core/SkRect.h	/^    bool intersect(int32_t left, int32_t top, int32_t right, int32_t bottom) {$/;"	f	struct:SkIRect
intersectNoEmptyCheck	SkRect.h	/^    bool intersectNoEmptyCheck(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
intersectNoEmptyCheck	core/SkRect.h	/^    bool intersectNoEmptyCheck(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
intersects	SkRect.h	/^    bool intersects(SkScalar left, SkScalar top, SkScalar right, SkScalar bottom) const {$/;"	f	struct:SkRect
intersects	core/SkRect.h	/^    bool intersects(SkScalar left, SkScalar top, SkScalar right, SkScalar bottom) const {$/;"	f	struct:SkRect
intmax_t	config/sk_stdint.h	/^typedef int64_t intmax_t;$/;"	t
ints	utils/SkJSON.h	/^        int32_t* ints() const {$/;"	f	class:SkJSON::Array
inval	images/SkFlipPixelRef.h	/^    void inval() { fFlipper.inval(); }$/;"	f	class:SkFlipPixelRef
inval	images/SkFlipPixelRef.h	/^    void inval(const SkIRect& rect) { fFlipper.inval(rect); }$/;"	f	class:SkFlipPixelRef
inval	images/SkFlipPixelRef.h	/^    void inval(const SkRect& r, bool doAA) { fFlipper.inval(r, doAA); }$/;"	f	class:SkFlipPixelRef
inval	images/SkFlipPixelRef.h	/^    void inval(const SkRegion& rgn) { fFlipper.inval(rgn); }$/;"	f	class:SkFlipPixelRef
is16Bit	SkRect.h	/^    bool is16Bit() const {$/;"	f	struct:SkIRect
is16Bit	core/SkRect.h	/^    bool is16Bit() const {$/;"	f	struct:SkIRect
is32	core/Sk64.h	/^    SkBool is32() const { return fHi == ((int32_t)fLo >> 31); }$/;"	f	struct:Sk64
is64	core/Sk64.h	/^    SkBool is64() const { return fHi != ((int32_t)fLo >> 31); }$/;"	f	struct:Sk64
isActive	views/SkTouchGesture.h	/^    bool isActive() const { return fActive; }$/;"	f	struct:SkFlingState
isActive	views/SkTouchGesture.h	/^    bool isActive() { return fFlinger.isActive(); }$/;"	f	class:SkTouchGesture
isAntiAlias	core/SkPaint.h	/^    bool isAntiAlias() const {$/;"	f	class:SkPaint
isAutohinted	core/SkPaint.h	/^    bool isAutohinted() const {$/;"	f	class:SkPaint
isAvailable	core/SkReader32.h	/^    bool isAvailable(uint32_t size) const { return fCurr + size <= fStop; }$/;"	f	class:SkReader32
isBold	core/SkTypeface.h	/^    bool isBold() const { return (fStyle & kBold) != 0; }$/;"	f	class:SkTypeface
isClipToBounds	views/SkView.h	/^    int         isClipToBounds() const { return !(fFlags & kNoClip_Mask); }$/;"	f	class:SkView
isCloseLine	core/SkPath.h	/^        bool isCloseLine() const { return SkToBool(fCloseLine); }$/;"	f	class:SkPath::Iter
isComplex	core/SkRegion.h	/^    bool isComplex() const { return !this->isEmpty() && !this->isRect(); }$/;"	f	class:SkRegion
isConvex	core/SkPath.h	/^    bool isConvex() const {$/;"	f	class:SkPath
isCrossProcess	core/SkFlattenable.h	/^    bool isCrossProcess() const {$/;"	f	class:SkFlattenableWriteBuffer
isDevKernText	core/SkPaint.h	/^    bool isDevKernText() const {$/;"	f	class:SkPaint
isDirty	images/SkFlipPixelRef.h	/^    bool isDirty() const { return fFlipper.isDirty(); }$/;"	f	class:SkFlipPixelRef
isDirty	images/SkPageFlipper.h	/^    bool isDirty() const { return !fDirty1->isEmpty(); }$/;"	f	class:SkPageFlipper
isDirty	views/SkWindow.h	/^    bool    isDirty() const { return !fDirtyRgn.isEmpty(); }$/;"	f	class:SkWindow
isDither	core/SkPaint.h	/^    bool isDither() const {$/;"	f	class:SkPaint
isEmbeddedBitmapText	core/SkPaint.h	/^    bool isEmbeddedBitmapText() const {$/;"	f	class:SkPaint
isEmpty	SkRect.h	/^    bool isEmpty() const { return fLeft >= fRight || fTop >= fBottom; }$/;"	f	struct:SkIRect
isEmpty	SkRect.h	/^    bool isEmpty() const { return fLeft >= fRight || fTop >= fBottom; }$/;"	f	struct:SkRect
isEmpty	core/SkMask.h	/^    bool isEmpty() const { return fBounds.isEmpty(); }$/;"	f	struct:SkMask
isEmpty	core/SkRect.h	/^    bool isEmpty() const { return fLeft >= fRight || fTop >= fBottom; }$/;"	f	struct:SkIRect
isEmpty	core/SkRect.h	/^    bool isEmpty() const { return fLeft >= fRight || fTop >= fBottom; }$/;"	f	struct:SkRect
isEmpty	core/SkRegion.h	/^    bool isEmpty() const { return fRunHead == SkRegion_gEmptyRunHeadPtr; }$/;"	f	class:SkRegion
isEmpty	core/SkSize.h	/^    bool isEmpty() const {$/;"	f	struct:SkTSize
isEmpty	core/SkString.h	/^    bool        isEmpty() const { return 0 == fRec->fLength; }$/;"	f	class:SkString
isEmpty	core/SkTDArray.h	/^    bool isEmpty() const { return fCount == 0; }$/;"	f	class:SkTDArray
isEmpty	gpu/GrClip.h	/^    bool isEmpty() const { return 0 == fList.count(); }$/;"	f	class:GrClip
isEmpty	gpu/GrGlyph.h	/^    bool isEmpty() const { return fBounds.isEmpty(); }$/;"	f	struct:GrGlyph
isEmpty	gpu/GrRect.h	/^    bool isEmpty() const { return fLeft >= fRight || fTop >= fBottom; }$/;"	f	struct:GrIRect16
isEnabled	views/SkView.h	/^    int         isEnabled() const { return fFlags & kEnabled_Mask; }$/;"	f	class:SkView
isFakeBoldText	core/SkPaint.h	/^    bool isFakeBoldText() const {$/;"	f	class:SkPaint
isFilterBitmap	core/SkPaint.h	/^    bool isFilterBitmap() const {$/;"	f	class:SkPaint
isFinite	SkRect.h	/^    bool isFinite() const {$/;"	f	struct:SkRect
isFinite	core/SkRect.h	/^    bool isFinite() const {$/;"	f	struct:SkRect
isFixedWidth	core/SkTypeface.h	/^    bool isFixedWidth() const { return fIsFixedWidth; }$/;"	f	class:SkTypeface
isFocusable	views/SkView.h	/^    int         isFocusable() const { return fFlags & kFocusable_Mask; }$/;"	f	class:SkView
isFullMetrics	core/SkScalerContext.h	/^    bool isFullMetrics() const {$/;"	f	struct:SkGlyph
isGradient	gpu/GrSamplerState.h	/^    bool isGradient() const {$/;"	f	class:GrSamplerState
isIdentity	core/SkMatrix.h	/^    bool isIdentity() const {$/;"	f	class:SkMatrix
isImmutable	SkBitmap.cpp	/^bool SkBitmap::isImmutable() const { $/;"	f	class:SkBitmap
isImmutable	core/SkPixelRef.h	/^    bool isImmutable() const { return fIsImmutable; }$/;"	f	class:SkPixelRef
isInverseFillType	core/SkPath.h	/^    bool isInverseFillType() const { return (fFillType & 2) != 0; }$/;"	f	class:SkPath
isItalic	core/SkTypeface.h	/^    bool isItalic() const { return (fStyle & kItalic) != 0; }$/;"	f	class:SkTypeface
isJustAdvance	core/SkScalerContext.h	/^    bool isJustAdvance() const {$/;"	f	struct:SkGlyph
isLCDRenderText	core/SkPaint.h	/^    bool isLCDRenderText() const {$/;"	f	class:SkPaint
isLinearText	core/SkPaint.h	/^    bool isLinearText() const {$/;"	f	class:SkPaint
isLocked	core/SkPixelRef.h	/^    bool isLocked() const { return fLockCount > 0; }$/;"	f	class:SkPixelRef
isMultisampled	gpu/GrRenderTarget.h	/^    bool isMultisampled() const { return 0 != fSampleCnt; }$/;"	f	class:GrRenderTarget
isNeg	core/Sk64.h	/^    SkBool  isNeg() const { return (uint32_t)fHi >> 31; }$/;"	f	struct:Sk64
isNull	SkBitmap.h	/^    bool isNull() const { return NULL == fPixels && NULL == fPixelRef; }$/;"	f	class:SkBitmap
isNull	core/SkBitmap.h	/^    bool isNull() const { return NULL == fPixels && NULL == fPixelRef; }$/;"	f	class:SkBitmap
isOpaque	SkBitmap.cpp	/^bool SkBitmap::isOpaque() const {$/;"	f	class:SkBitmap
isOpaque	SkBitmap.h	/^    bool isOpaque() const { return (fFlags & kColorsAreOpaque_Flag) != 0; }$/;"	f	class:SkColorTable
isOpaque	core/SkBitmap.h	/^    bool isOpaque() const { return (fFlags & kColorsAreOpaque_Flag) != 0; }$/;"	f	class:SkColorTable
isOpaque	core/SkDevice.h	/^    bool isOpaque() const { return fBitmap.isOpaque(); }$/;"	f	class:SkDevice
isOpaque	core/SkShader.h	/^    virtual bool isOpaque() const { return false; }$/;"	f	class:SkShader
isPos	core/Sk64.h	/^    SkBool  isPos() const { return ~(fHi >> 31) & (fHi | fLo); }$/;"	f	struct:Sk64
isPos32Bits	SkBitmap.cpp	/^static bool isPos32Bits(const Sk64& value) {$/;"	f	file:
isRadial2PosRoot	gpu/GrSamplerState.h	/^    bool     isRadial2PosRoot() const { return SkToBool(fRadial2PosRoot); }$/;"	f	class:GrSamplerState
isRecording	pipe/SkGPipe.h	/^    bool isRecording() const { return NULL != fCanvas; }$/;"	f	class:SkGPipeWriter
isRect	core/SkRegion.h	/^    bool isRect() const { return fRunHead == SkRegion_gRectRunHeadPtr; }$/;"	f	class:SkRegion
isRect	gpu/GrClip.h	/^    bool isRect() const {$/;"	f	class:GrClip
isStrikeThruText	core/SkPaint.h	/^    bool isStrikeThruText() const {$/;"	f	class:SkPaint
isSubpixel	core/SkScalerContext.h	/^    bool isSubpixel() const {$/;"	f	class:SkScalerContext
isSubpixelText	core/SkPaint.h	/^    bool isSubpixelText() const {$/;"	f	class:SkPaint
isTriviallyIdentity	core/SkMatrix.h	/^    bool isTriviallyIdentity() const {$/;"	f	class:SkMatrix
isUnderlineText	core/SkPaint.h	/^    bool isUnderlineText() const {$/;"	f	class:SkPaint
isValid	core/SkStream.h	/^    bool isValid() const { return fFD >= 0; }$/;"	f	class:SkFDStream
isValid	core/SkStream.h	/^    bool isValid() const { return fFILE != NULL; }$/;"	f	class:SkFILEStream
isValid	core/SkStream.h	/^    bool isValid() const { return fFILE != NULL; }$/;"	f	class:SkFILEWStream
isValid	core/SkTLazy.h	/^    bool isValid() const { return NULL != fPtr; }$/;"	f	class:SkTLazy
isValid	gpu/GrResource.h	/^    bool isValid() const { return NULL != fGpu; }$/;"	f	class:GrResource
isValid	gpu/GrTextContext.h	/^    bool isValid() const {$/;"	f	class:GrTextContext
isVerticalText	core/SkPaint.h	/^    bool isVerticalText() const {$/;"	f	class:SkPaint
isVisible	views/SkView.h	/^    int         isVisible() const { return fFlags & kVisible_Mask; }$/;"	f	class:SkView
isVolatile	SkBitmap.cpp	/^bool SkBitmap::isVolatile() const {$/;"	f	class:SkBitmap
isZero	core/Sk64.h	/^    SkBool  isZero() const { return (fHi | fLo) == 0; }$/;"	f	struct:Sk64
isZero	core/SkPoint.h	/^    bool isZero() const { return (fX | fY) == 0; }$/;"	f	struct:SkIPoint
isZero	core/SkSize.h	/^    bool isZero() const {$/;"	f	struct:SkTSize
iset	SkRect.h	/^    void iset(int left, int top, int right, int bottom) {$/;"	f	struct:SkRect
iset	core/SkPoint.h	/^    void iset(const SkIPoint& p) {$/;"	f	struct:SkPoint
iset	core/SkPoint.h	/^    void iset(int32_t x, int32_t y) {$/;"	f	struct:SkPoint
iset	core/SkRect.h	/^    void iset(int left, int top, int right, int bottom) {$/;"	f	struct:SkRect
join	SkRect.h	/^    void join(const SkIRect& r) {$/;"	f	struct:SkIRect
join	SkRect.h	/^    void join(const SkRect& r) {$/;"	f	struct:SkRect
join	core/SkRect.h	/^    void join(const SkIRect& r) {$/;"	f	struct:SkIRect
join	core/SkRect.h	/^    void join(const SkRect& r) {$/;"	f	struct:SkRect
jsval	xml/SkJS.h	/^    typedef jsword  jsval;$/;"	t
jsword	xml/SkJS.h	/^    typedef JSWord jsword;$/;"	t
k0_SkKey	views/SkKey.h	/^    k0_SkKey,$/;"	e	enum:SkKey
k16Bit_SrcDepth	images/SkImageDecoder.h	/^        k16Bit_SrcDepth,$/;"	e	enum:SkImageDecoder::SrcDepth
k1_SkKey	views/SkKey.h	/^    k1_SkKey,$/;"	e	enum:SkKey
k2_SkKey	views/SkKey.h	/^    k2_SkKey,$/;"	e	enum:SkKey
k32Bit_SrcDepth	images/SkImageDecoder.h	/^        k32Bit_SrcDepth$/;"	e	enum:SkImageDecoder::SrcDepth
k3D_Format	core/SkMask.h	/^        k3D_Format, \/\/!< 3 8bit per pixl planes: alpha, mul, add$/;"	e	enum:SkMask::Format
k3_SkKey	views/SkKey.h	/^    k3_SkKey,$/;"	e	enum:SkKey
k4_SkKey	views/SkKey.h	/^    k4_SkKey,$/;"	e	enum:SkKey
k4x4Downsample_Filter	gpu/GrSamplerState.h	/^        k4x4Downsample_Filter,$/;"	e	enum:GrSamplerState::Filter
k5_SkKey	views/SkKey.h	/^    k5_SkKey,$/;"	e	enum:SkKey
k6_SkKey	views/SkKey.h	/^    k6_SkKey,$/;"	e	enum:SkKey
k7_SkKey	views/SkKey.h	/^    k7_SkKey,$/;"	e	enum:SkKey
k8_SkKey	views/SkKey.h	/^    k8_SkKey,$/;"	e	enum:SkKey
k9_SkKey	views/SkKey.h	/^    k9_SkKey,$/;"	e	enum:SkKey
kA1_Config	SkBitmap.h	/^        kA1_Config,$/;"	e	enum:SkBitmap::Config
kA1_Config	core/SkBitmap.h	/^        kA1_Config,$/;"	e	enum:SkBitmap::Config
kA565_GrMaskFormat	gpu/GrTypes.h	/^    kA565_GrMaskFormat,  \/\/!< 2-bytes per pixel$/;"	e	enum:GrMaskFormat
kA888_GrMaskFormat	gpu/GrTypes.h	/^    kA888_GrMaskFormat,  \/\/!< 4-bytes per pixel$/;"	e	enum:GrMaskFormat
kA8_Config	SkBitmap.h	/^        kA8_Config,         \/\/!< 8-bits per pixel, with only alpha specified (0 is transparent, 0xFF is opaque)$/;"	e	enum:SkBitmap::Config
kA8_Config	core/SkBitmap.h	/^        kA8_Config,         \/\/!< 8-bits per pixel, with only alpha specified (0 is transparent, 0xFF is opaque)$/;"	e	enum:SkBitmap::Config
kA8_Format	core/SkMask.h	/^        kA8_Format, \/\/!< 8bits per pixel mask (e.g. antialiasing)$/;"	e	enum:SkMask::Format
kA8_GrMaskFormat	gpu/GrTypes.h	/^    kA8_GrMaskFormat,    \/\/!< 1-byte per pixel$/;"	e	enum:GrMaskFormat
kAA_EdgeType	core/SkCanvas.h	/^        kAA_EdgeType$/;"	e	enum:SkCanvas::EdgeType
kANGLE_BackEndType	views/SkOSWindow_Win.h	/^        kANGLE_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kANGLE_GLContextType	gpu/GrContextFactory.h	/^      kANGLE_GLContextType,$/;"	e	enum:GrContextFactory::GLContextType
kARGB32_Format	core/SkMask.h	/^        kARGB32_Format,         \/\/!< SkPMColor$/;"	e	enum:SkMask::Format
kARGB_4444_Config	SkBitmap.h	/^        kARGB_4444_Config,  \/\/!< 16-bits per pixel, (see SkColorPriv.h for packing)$/;"	e	enum:SkBitmap::Config
kARGB_4444_Config	core/SkBitmap.h	/^        kARGB_4444_Config,  \/\/!< 16-bits per pixel, (see SkColorPriv.h for packing)$/;"	e	enum:SkBitmap::Config
kARGB_8888_Config	SkBitmap.h	/^        kARGB_8888_Config,  \/\/!< 32-bits per pixel, (see SkColorPriv.h for packing)$/;"	e	enum:SkBitmap::Config
kARGB_8888_Config	core/SkBitmap.h	/^        kARGB_8888_Config,  \/\/!< 32-bits per pixel, (see SkColorPriv.h for packing)$/;"	e	enum:SkBitmap::Config
kARGB_ClipLayer_SaveFlag	core/SkCanvas.h	/^        kARGB_ClipLayer_SaveFlag    = 0x1F$/;"	e	enum:SkCanvas::SaveFlags
kARGB_NoClipLayer_SaveFlag	core/SkCanvas.h	/^        kARGB_NoClipLayer_SaveFlag  = 0x0F,$/;"	e	enum:SkCanvas::SaveFlags
kAScaleX	core/SkMatrix.h	/^        kAScaleX,$/;"	e	enum:SkMatrix::__anon7
kAScaleY	core/SkMatrix.h	/^        kAScaleY,$/;"	e	enum:SkMatrix::__anon7
kASkewX	core/SkMatrix.h	/^        kASkewX,$/;"	e	enum:SkMatrix::__anon7
kASkewY	core/SkMatrix.h	/^        kASkewY,$/;"	e	enum:SkMatrix::__anon7
kATransX	core/SkMatrix.h	/^        kATransX,$/;"	e	enum:SkMatrix::__anon7
kATransY	core/SkMatrix.h	/^        kATransY$/;"	e	enum:SkMatrix::__anon7
kAction_Type	views/SkOSMenu.h	/^        kAction_Type,$/;"	e	enum:SkOSMenu::Type
kAdd	core/SkRandom.h	/^        kAdd = 1013904223$/;"	e	enum:SkRandom::__anon13
kAdd_Mode	effects/SkPorterDuff.h	/^        kAdd_Mode,      \/\/!< Saturate(S + D)$/;"	e	enum:SkPorterDuff::Mode
kAffine_Mask	core/SkMatrix.h	/^        kAffine_Mask        = 0x04,  \/\/!< set if the matrix skews or rotates$/;"	e	enum:SkMatrix::TypeMask
kAfterEdge	effects/SkBlurDrawLooper.h	/^        kAfterEdge,$/;"	e	enum:SkBlurDrawLooper::State
kAlignCount	core/SkPaint.h	/^        kAlignCount$/;"	e	enum:SkPaint::Align
kAlignCount	views/SkStackViewLayout.h	/^        kAlignCount$/;"	e	enum:SkStackViewLayout::Align
kAllCaps_Style	core/SkAdvancedTypefaceMetrics.h	/^        kAllCaps_Style     = 0x10000,$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kAllFlagMasks	views/SkView.h	/^        kAllFlagMasks   = (uint32_t)(0 - 1) >> (32 - kFlagShiftCount)$/;"	e	enum:SkView::Flag_Mask
kAllFlags	core/SkPaint.h	/^        kAllFlags = 0x3FFF$/;"	e	enum:SkPaint::Flags
kAllMasks	core/SkMatrix.h	/^        kAllMasks = kTranslate_Mask |$/;"	e	enum:SkMatrix::__anon9
kAll_BlurFlag	effects/SkBlurDrawLooper.h	/^        kAll_BlurFlag = 0x07$/;"	e	enum:SkBlurDrawLooper::BlurFlags
kAll_BlurFlag	effects/SkBlurMaskFilter.h	/^        kAll_BlurFlag = 0x03$/;"	e	enum:SkBlurMaskFilter::BlurFlags
kAll_Capabilities	core/SkDevice.h	/^        kAll_Capabilities  = 0x3$/;"	e	enum:SkDevice::Capabilities
kAlloc_OnShrink	SkTypes.h	/^        kAlloc_OnShrink,$/;"	e	enum:SkAutoMalloc::OnShrink
kAlloc_OnShrink	core/SkTypes.h	/^        kAlloc_OnShrink,$/;"	e	enum:SkAutoMalloc::OnShrink
kAlphaUnchanged_Flag	core/SkColorFilter.h	/^        kAlphaUnchanged_Flag = 0x01,$/;"	e	enum:SkColorFilter::Flags
kAlpha_8_GrPixelConfig	gpu/GrTypes.h	/^    kAlpha_8_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kAnimContent_DirtyFlag	views/SkWidgetViews.h	/^        kAnimContent_DirtyFlag  = 0x02$/;"	e	enum:SkListView::DirtyFlags
kAnimCount_DirtyFlag	views/SkWidgetViews.h	/^        kAnimCount_DirtyFlag    = 0x01,$/;"	e	enum:SkListView::DirtyFlags
kAnimDirCount	views/SkWidget.h	/^        kAnimDirCount$/;"	e	enum:SkTextView::AnimaDir
kAntiAlias_Flag	core/SkPaint.h	/^        kAntiAlias_Flag       = 0x01,   \/\/!< mask to enable antialiasing$/;"	e	enum:SkPaint::Flags
kApprox_ScratchTexMatch	gpu/GrContext.h	/^        kApprox_ScratchTexMatch$/;"	e	enum:GrContext::ScratchTexMatch
kArabic_FallbackScript	ports/SkTypeface_android.h	/^    kArabic_FallbackScript,$/;"	e	enum:FallbackScripts
kArmenian_FallbackScript	ports/SkTypeface_android.h	/^    kArmenian_FallbackScript,$/;"	e	enum:FallbackScripts
kArray	utils/SkJSON.h	/^        kArray,$/;"	e	enum:SkJSON::Type
kAttrCount	views/SkWidget.h	/^        kAttrCount$/;"	e	enum:SkGridView::Attr
kAttrCount	views/SkWidget.h	/^        kAttrCount$/;"	e	enum:SkListView::Attr
kAttributesSize	svg/SkSVGPaintState.h	/^    static const int kAttributesSize;$/;"	m	class:SkSVGPaint
kAutoHeight_Mode	views/SkWidget.h	/^        kAutoHeight_Mode,$/;"	e	enum:SkStaticTextView::Mode
kAutoHeight_Mode	views/SkWidgetViews.h	/^        kAutoHeight_Mode,$/;"	e	enum:SkStaticTextView::Mode
kAutoHinting_Flag	core/SkPaint.h	/^        kAutoHinting_Flag     = 0x800,  \/\/!< mask to force Freetype's autohinter$/;"	e	enum:SkPaint::Flags
kAutoResolves_ResolveType	gpu/GrRenderTarget.h	/^        kAutoResolves_ResolveType,$/;"	e	enum:GrRenderTarget::ResolveType
kAutoWidth_Mode	views/SkWidget.h	/^        kAutoWidth_Mode,$/;"	e	enum:SkStaticTextView::Mode
kAutoWidth_Mode	views/SkWidgetViews.h	/^        kAutoWidth_Mode,$/;"	e	enum:SkStaticTextView::Mode
kAuto_FontHintLevel	core/SkDeviceProfile.h	/^        kAuto_FontHintLevel$/;"	e	enum:SkDeviceProfile::FontHintLevel
kAutohinting_Flag	core/SkScalerContext.h	/^        kAutohinting_Flag         = 0x0020,$/;"	e	enum:SkScalerContext::Flags
kAvoidColor_Mode	effects/SkAvoidXfermode.h	/^        kAvoidColor_Mode,   \/\/!< draw everywhere except on the opColor$/;"	e	enum:SkAvoidXfermode::Mode
kBGRA_8888_PM_GrPixelConfig	gpu/GrTypes.h	/^    kBGRA_8888_PM_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kBGRA_8888_UPM_GrPixelConfig	gpu/GrTypes.h	/^    kBGRA_8888_UPM_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kBGRA_Premul_Config8888	core/SkCanvas.h	/^        kBGRA_Premul_Config8888,$/;"	e	enum:SkCanvas::Config8888
kBGRA_Unpremul_Config8888	core/SkCanvas.h	/^        kBGRA_Unpremul_Config8888,$/;"	e	enum:SkCanvas::Config8888
kBGR_Horizontal_LCDConfig	core/SkDeviceProfile.h	/^        kBGR_Horizontal_LCDConfig,$/;"	e	enum:SkDeviceProfile::LCDConfig
kBGR_LCDOrder	SkFontHost.h	/^        kBGR_LCDOrder = 1,$/;"	e	enum:SkFontHost::LCDOrder
kBGR_LCDOrder	core/SkFontHost.h	/^        kBGR_LCDOrder = 1,$/;"	e	enum:SkFontHost::LCDOrder
kBGR_Vertical_LCDConfig	core/SkDeviceProfile.h	/^        kBGR_Vertical_LCDConfig$/;"	e	enum:SkDeviceProfile::LCDConfig
kBG_Attr	views/SkWidget.h	/^        kBG_Attr,$/;"	e	enum:SkGridView::Attr
kBG_Attr	views/SkWidget.h	/^        kBG_Attr,$/;"	e	enum:SkListView::Attr
kBMP_Format	images/SkImageDecoder.h	/^        kBMP_Format,$/;"	e	enum:SkImageDecoder::Format
kBW_EdgeType	core/SkCanvas.h	/^        kBW_EdgeType,$/;"	e	enum:SkCanvas::EdgeType
kBW_Format	core/SkMask.h	/^        kBW_Format, \/\/!< 1bit per pixel mask (e.g. monochrome)$/;"	e	enum:SkMask::Format
kB_Axis	effects/SkColorMatrix.h	/^        kB_Axis = 2$/;"	e	enum:SkColorMatrix::Axis
kBack_SkKey	views/SkKey.h	/^    kBack_SkKey,    \/\/!< (CLR)$/;"	e	enum:SkKey
kBackward_AnimDir	views/SkWidget.h	/^        kBackward_AnimDir,$/;"	e	enum:SkTextView::AnimaDir
kBackward_TextBufferDirection	core/SkPaint.h	/^        kBackward_TextBufferDirection$/;"	e	enum:SkPaint::TextBufferDirection
kBeforeEdge	effects/SkBlurDrawLooper.h	/^        kBeforeEdge,$/;"	e	enum:SkBlurDrawLooper::State
kBengali_FallbackScript	ports/SkTypeface_android.h	/^    kBengali_FallbackScript,$/;"	e	enum:FallbackScripts
kBevel_Join	core/SkPaint.h	/^        kBevel_Join,    \/\/!< connect path segments with a flat bevel join$/;"	e	enum:SkPaint::Join
kBilinear_Filter	gpu/GrSamplerState.h	/^        kBilinear_Filter,$/;"	e	enum:GrSamplerState::Filter
kBitmap_Type	core/SkDrawFilter.h	/^        kBitmap_Type,$/;"	e	enum:SkDrawFilter::Type
kBlurStyleCount	effects/SkBlurMaskFilter.h	/^        kBlurStyleCount$/;"	e	enum:SkBlurMaskFilter::BlurStyle
kBold	core/SkTypeface.h	/^        kBold   = 0x01,$/;"	e	enum:SkTypeface::Style
kBoldItalic	core/SkTypeface.h	/^        kBoldItalic = 0x03$/;"	e	enum:SkTypeface::Style
kBool	utils/SkJSON.h	/^        kBool,$/;"	e	enum:SkJSON::Type
kBool_Type	core/SkMetaData.h	/^        kBool_Type,$/;"	e	enum:SkMetaData::Type
kBorder_SkinEnum	views/SkWidgetViews.h	/^    kBorder_SkinEnum,$/;"	e	enum:SkinEnum
kBorder_WidgetEnum	views/SkWidgetViews.h	/^    kBorder_WidgetEnum,         \/\/!< <sk-border>$/;"	e	enum:SkWidgetEnum
kBottom	utils/SkBoundaryPatch.h	/^        kBottom = 2,$/;"	e	enum:SkBoundary::Edge
kBufferSize	images/SkJpegUtility.h	/^        kBufferSize = 1024$/;"	e	enum:skjpeg_destination_mgr::__anon38
kBufferSize	images/SkJpegUtility.h	/^        kBufferSize = 1024$/;"	e	enum:skjpeg_source_mgr::__anon37
kBuffered_DrawCategory	gpu/GrContext.h	/^        kBuffered_DrawCategory,      \/\/ last draw was inserted in draw buffer$/;"	e	enum:GrContext::DrawCategory
kButt_Cap	core/SkPaint.h	/^        kButt_Cap,      \/\/!< begin\/end contours with no extension$/;"	e	enum:SkPaint::Cap
kButton_SkinEnum	views/SkWidgetViews.h	/^    kButton_SkinEnum,$/;"	e	enum:SkinEnum
kButton_WidgetEnum	views/SkWidgetViews.h	/^    kButton_WidgetEnum,         \/\/!< <sk-button>$/;"	e	enum:SkWidgetEnum
kCCW_Direction	core/SkPath.h	/^        kCCW_Direction$/;"	e	enum:SkPath::Direction
kCCW_SkRotationDirection	core/SkGeometry.h	/^    kCCW_SkRotationDirection$/;"	e	enum:SkRotationDirection
kCFF_Font	core/SkAdvancedTypefaceMetrics.h	/^        kCFF_Font,$/;"	e	enum:SkAdvancedTypefaceMetrics::FontType
kCW_Direction	core/SkPath.h	/^        kCW_Direction,$/;"	e	enum:SkPath::Direction
kCW_SkRotationDirection	core/SkGeometry.h	/^    kCW_SkRotationDirection,$/;"	e	enum:SkRotationDirection
kCamera_SkKey	views/SkKey.h	/^    kCamera_SkKey,  \/\/!< camera         - same$/;"	e	enum:SkKey
kCanResolve_ResolveType	gpu/GrRenderTarget.h	/^        kCanResolve_ResolveType,$/;"	e	enum:GrRenderTarget::ResolveType
kCanonicalTextSizeForPaths	core/SkPaint.h	/^        kCanonicalTextSizeForPaths = 64$/;"	e	enum:SkPaint::__anon10
kCantResolve_ResolveType	gpu/GrRenderTarget.h	/^        kCantResolve_ResolveType,$/;"	e	enum:GrRenderTarget::ResolveType
kCapCount	core/SkPaint.h	/^        kCapCount,$/;"	e	enum:SkPaint::Cap
kCenter_Align	core/SkPaint.h	/^        kCenter_Align,$/;"	e	enum:SkPaint::Align
kCenter_Align	views/SkStackViewLayout.h	/^        kCenter_Align,$/;"	e	enum:SkStackViewLayout::Align
kCenter_Pack	views/SkStackViewLayout.h	/^        kCenter_Pack,$/;"	e	enum:SkStackViewLayout::Pack
kCenter_ScaleToFit	core/SkMatrix.h	/^        kCenter_ScaleToFit,$/;"	e	enum:SkMatrix::ScaleToFit
kCenter_SpacingAlign	utils/SkTextBox.h	/^        kCenter_SpacingAlign,$/;"	e	enum:SkTextBox::SpacingAlign
kCenter_SpacingAlign	views/SkTextBox.h	/^        kCenter_SpacingAlign,$/;"	e	enum:SkTextBox::SpacingAlign
kClamp_TileMode	core/SkShader.h	/^        kClamp_TileMode,$/;"	e	enum:SkShader::TileMode
kClamp_WrapMode	gpu/GrSamplerState.h	/^        kClamp_WrapMode,$/;"	e	enum:GrSamplerState::WrapMode
kClear_Mode	core/SkXfermode.h	/^        kClear_Mode,    \/\/!< [0, 0]$/;"	e	enum:SkXfermode::Mode
kClear_Mode	effects/SkPorterDuff.h	/^        kClear_Mode,    \/\/!< [0, 0]$/;"	e	enum:SkPorterDuff::Mode
kClipPath	svg/SkSVGPaintState.h	/^        kClipPath,$/;"	e	enum:SkSVGPaint::Field
kClipRule	svg/SkSVGPaintState.h	/^        kClipRule,$/;"	e	enum:SkSVGPaint::Field
kClipToLayer_SaveFlag	core/SkCanvas.h	/^        kClipToLayer_SaveFlag       = 0x10,$/;"	e	enum:SkCanvas::SaveFlags
kClip_SaveFlag	core/SkCanvas.h	/^        kClip_SaveFlag              = 0x02,$/;"	e	enum:SkCanvas::SaveFlags
kClip_Verb	utils/SkDumpCanvas.h	/^        kClip_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kClose_PathCmd	gpu/GrTypes.h	/^    kClose_PathCmd,     \/\/!< Closes the current subpath$/;"	e	enum:GrPathCmd
kClose_Verb	core/SkPath.h	/^        kClose_Verb,    \/\/!< iter.next returns 1 point (contour's moveTo pt)$/;"	e	enum:SkPath::Verb
kCodeMask	core/SkScalerContext.h	/^        kCodeMask = ((1 << kSubShift) - 1),$/;"	e	enum:SkGlyph::__anon17
kCoeffCount	core/SkXfermode.h	/^        kCoeffCount$/;"	e	enum:SkXfermode::Coeff
kCoeffModesCnt	core/SkXfermode.h	/^        kCoeffModesCnt, $/;"	e	enum:SkXfermode::Mode
kColorBurn_Mode	core/SkXfermode.h	/^        kColorBurn_Mode,$/;"	e	enum:SkXfermode::Mode
kColorDodge_Mode	core/SkXfermode.h	/^        kColorDodge_Mode,$/;"	e	enum:SkXfermode::Mode
kColorFilter_Bit	effects/SkLayerDrawLooper.h	/^        kColorFilter_Bit = 1 << 5,  \/\/!< use this layer's colorfilter$/;"	e	enum:SkLayerDrawLooper::Bits
kColor_GradientType	core/SkShader.h	/^        kColor_GradientType,$/;"	e	enum:SkShader::GradientType
kColorsAreOpaque_Flag	SkBitmap.h	/^        kColorsAreOpaque_Flag   = 0x01  \/\/!< if set, all of the colors in the table are opaque (alpha==0xFF)$/;"	e	enum:SkColorTable::Flags
kColorsAreOpaque_Flag	core/SkBitmap.h	/^        kColorsAreOpaque_Flag   = 0x01  \/\/!< if set, all of the colors in the table are opaque (alpha==0xFF)$/;"	e	enum:SkColorTable::Flags
kComplex_ClipType	core/SkCanvas.h	/^        kComplex_ClipType$/;"	e	enum:SkCanvas::ClipType
kCompressed_State	pdf/SkPDFStream.h	/^        kCompressed_State,     \/\/!< The stream's already been compressed.$/;"	e	enum:SkPDFStream::State
kComputeBoundsAndRenderImage_CreateMode	core/SkMask.h	/^        kComputeBoundsAndRenderImage_CreateMode  \/\/!< compute bounds, alloc image and render into it$/;"	e	enum:SkMask::CreateMode
kConcave_Convexity	core/SkPath.h	/^        kConcave_Convexity$/;"	e	enum:SkPath::Convexity
kConfigCount	SkBitmap.h	/^        kConfigCount$/;"	e	enum:SkBitmap::Config
kConfigCount	core/SkBitmap.h	/^        kConfigCount$/;"	e	enum:SkBitmap::Config
kConstA_BlendCoeff	gpu/GrTypes.h	/^    kConstA_BlendCoeff,  \/\/<! constant color alpha$/;"	e	enum:GrBlendCoeff
kConstC_BlendCoeff	gpu/GrTypes.h	/^    kConstC_BlendCoeff,  \/\/<! constant color$/;"	e	enum:GrBlendCoeff
kConstInY16_Flag	core/SkShader.h	/^        kConstInY16_Flag = 0x10$/;"	e	enum:SkShader::Flags
kConstInY32_Flag	core/SkShader.h	/^        kConstInY32_Flag = 0x08,$/;"	e	enum:SkShader::Flags
kContent_DrawingArea	pdf/SkPDFDevice.h	/^        kContent_DrawingArea,  \/\/ Drawing area for the page content.$/;"	e	enum:SkPDFDevice::DrawingArea
kConvex_Convexity	core/SkPath.h	/^        kConvex_Convexity,$/;"	e	enum:SkPath::Convexity
kConvolution_Filter	gpu/GrSamplerState.h	/^        kConvolution_Filter,$/;"	e	enum:GrSamplerState::Filter
kCount	core/SkPerspIter.h	/^        kCount  = (1 << kShift)$/;"	e	enum:SkPerspIter::__anon11
kCountMaskFormats	core/SkMask.h	/^        kCountMaskFormats = kLCD32_Format + 1$/;"	e	enum:SkMask::__anon5
kCount_GrMaskFormats	gpu/GrTypes.h	/^    kCount_GrMaskFormats \/\/!< used to allocate arrays sized for mask formats$/;"	e	enum:GrMaskFormat
kCrossProcess_Flag	core/SkFlattenable.h	/^        kCrossProcess_Flag       = 0x01,$/;"	e	enum:SkFlattenableWriteBuffer::Flags
kCrossProcess_Flag	pipe/SkGPipe.h	/^        kCrossProcess_Flag = 1 << 0,$/;"	e	enum:SkGPipeWriter::Flags
kCubic_PathCmd	gpu/GrTypes.h	/^    kCubic_PathCmd,     \/\/!< Adds a cubic segment$/;"	e	enum:GrPathCmd
kCubic_SegmentMask	core/SkPath.h	/^        kCubic_SegmentMask  = 1 << 2$/;"	e	enum:SkPath::SegmentMask
kCubic_Verb	core/SkPath.h	/^        kCubic_Verb,    \/\/!< iter.next returns 4 points$/;"	e	enum:SkPath::Verb
kCustom_Type	views/SkOSMenu.h	/^        kCustom_Type$/;"	e	enum:SkOSMenu::Type
kDA_BlendCoeff	gpu/GrTypes.h	/^    kDA_BlendCoeff,      \/\/<! dst alpha$/;"	e	enum:GrBlendCoeff
kDA_Coeff	core/SkXfermode.h	/^        kDA_Coeff,      \/** dst alpha *\/$/;"	e	enum:SkXfermode::Coeff
kDC_BlendCoeff	gpu/GrTypes.h	/^    kDC_BlendCoeff,      \/\/<! dst color$/;"	e	enum:GrBlendCoeff
kDC_Coeff	core/SkXfermode.h	/^        kDC_Coeff,      \/** dst color *\/$/;"	e	enum:SkXfermode::Coeff
kDarken_Mode	core/SkXfermode.h	/^        kDarken_Mode,$/;"	e	enum:SkXfermode::Mode
kDarken_Mode	effects/SkPorterDuff.h	/^        kDarken_Mode,   \/\/!< [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]$/;"	e	enum:SkPorterDuff::Mode
kData_Type	core/SkMetaData.h	/^        kData_Type,$/;"	e	enum:SkMetaData::Type
kDebugArraySize	core/SkTDArray.h	/^        kDebugArraySize = 16$/;"	e	enum:SkTDArray::__anon21
kDebug_GLContextType	gpu/GrContextFactory.h	/^      kDebug_GLContextType,$/;"	e	enum:GrContextFactory::GLContextType
kDecodeBounds_Mode	images/SkImageDecoder.h	/^        kDecodeBounds_Mode, \/\/!< only return width\/height\/config in bitmap$/;"	e	enum:SkImageDecoder::Mode
kDecodePixels_Mode	images/SkImageDecoder.h	/^        kDecodePixels_Mode  \/\/!< return entire bitmap (including pixels)$/;"	e	enum:SkImageDecoder::Mode
kDefault	core/SkAdvancedTypefaceMetrics.h	/^            kDefault,  \/\/ Default advance: fAdvance.count = 1$/;"	e	enum:SkAdvancedTypefaceMetrics::AdvanceMetric::MetricType
kDefaultBufferSize	core/SkStream.h	/^        kDefaultBufferSize  = 128$/;"	e	enum:SkBufferStream::__anon19
kDefaultQuality	images/SkImageEncoder.h	/^        kDefaultQuality = 80$/;"	e	enum:SkImageEncoder::__anon36
kDefault_BitmapType	core/SkShader.h	/^        kDefault_BitmapType,\/\/<! Access bitmap using local coords transformed$/;"	e	enum:SkShader::BitmapType
kDefault_Cap	core/SkPaint.h	/^        kDefault_Cap = kButt_Cap$/;"	e	enum:SkPaint::Cap
kDefault_Filter	gpu/GrSamplerState.h	/^        kDefault_Filter = kNearest_Filter$/;"	e	enum:GrSamplerState::Filter
kDefault_FilterDirection	gpu/GrSamplerState.h	/^        kDefault_FilterDirection = kX_FilterDirection,$/;"	e	enum:GrSamplerState::FilterDirection
kDefault_Join	core/SkPaint.h	/^        kDefault_Join = kMiter_Join$/;"	e	enum:SkPaint::Join
kDefault_SampleMode	gpu/GrSamplerState.h	/^        kDefault_SampleMode = kNormal_SampleMode$/;"	e	enum:GrSamplerState::SampleMode
kDefault_WrapMode	gpu/GrSamplerState.h	/^        kDefault_WrapMode = kClamp_WrapMode$/;"	e	enum:GrSamplerState::WrapMode
kDesktop_GrGLBinding	gpu/GrGLInterface.h	/^    kDesktop_GrGLBinding = 0x01,$/;"	e	enum:GrGLBinding
kDevKernText_Flag	core/SkPaint.h	/^        kDevKernText_Flag     = 0x100,  \/\/!< mask to enable device kerning text$/;"	e	enum:SkPaint::Flags
kDevKernText_Flag	core/SkScalerContext.h	/^        kDevKernText_Flag         = 0x0002,$/;"	e	enum:SkScalerContext::Flags
kDevanagari_FallbackScript	ports/SkTypeface_android.h	/^    kDevanagari_FallbackScript,$/;"	e	enum:FallbackScripts
kDifference_Mode	core/SkXfermode.h	/^        kDifference_Mode,$/;"	e	enum:SkXfermode::Mode
kDifference_Op	core/SkRegion.h	/^        kDifference_Op, \/\/!< subtract the op region from the first region$/;"	e	enum:SkRegion::Op
kDifferent	animator/SkAnimator.h	/^        kDifferent,$/;"	e	enum:SkAnimator::DifferenceType
kDilate_Filter	gpu/GrSamplerState.h	/^        kDilate_Filter,$/;"	e	enum:GrSamplerState::Filter
kDiscard_FlushBit	gpu/GrContext.h	/^        kDiscard_FlushBit                    = 0x2,$/;"	e	enum:GrContext::FlushBits
kDither_Flag	core/SkBlitRow.h	/^        kDither_Flag        = 0x04$/;"	e	enum:SkBlitRow::Flags16
kDither_Flag	core/SkPaint.h	/^        kDither_Flag          = 0x04,   \/\/!< mask to enable dithering$/;"	e	enum:SkPaint::Flags
kDone	effects/SkBlurDrawLooper.h	/^        kDone$/;"	e	enum:SkBlurDrawLooper::State
kDone_Status	pipe/SkGPipe.h	/^        kDone_Status,   \/\/!< no more data expected from reader$/;"	e	enum:SkGPipeReader::Status
kDone_Verb	core/SkPath.h	/^        kDone_Verb      \/\/!< iter.next returns 0 points$/;"	e	enum:SkPath::Verb
kDontFlush_PixelOpsFlag	gpu/GrContext.h	/^        kDontFlush_PixelOpsFlag = 0x1,$/;"	e	enum:GrContext::PixelOpsFlags
kDown_SkKey	views/SkKey.h	/^    kDown_SkKey,$/;"	e	enum:SkKey
kDown_State	views/SkView.h	/^            kDown_State,$/;"	e	enum:SkView::Click::State
kDraftMode_Flags	pdf/SkPDFDocument.h	/^        kDraftMode_Flags    = 0x03,$/;"	e	enum:SkPDFDocument::Flags
kDrawBitmap_Verb	utils/SkDumpCanvas.h	/^        kDrawBitmap_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kDrawData_Verb	utils/SkDumpCanvas.h	/^        kDrawData_Verb$/;"	e	enum:SkDumpCanvas::Verb
kDrawPaint_Verb	utils/SkDumpCanvas.h	/^        kDrawPaint_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kDrawPath_Verb	utils/SkDumpCanvas.h	/^        kDrawPath_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kDrawPicture_Verb	utils/SkDumpCanvas.h	/^        kDrawPicture_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kDrawPoints_Verb	utils/SkDumpCanvas.h	/^        kDrawPoints_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kDrawRect_Verb	utils/SkDumpCanvas.h	/^        kDrawRect_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kDrawText_Verb	utils/SkDumpCanvas.h	/^        kDrawText_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kDrawVertices_Verb	utils/SkDumpCanvas.h	/^        kDrawVertices_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kDstATop_Mode	core/SkXfermode.h	/^        kDstATop_Mode,  \/\/!< [Sa, Sa * Dc + Sc * (1 - Da)]$/;"	e	enum:SkXfermode::Mode
kDstATop_Mode	effects/SkPorterDuff.h	/^        kDstATop_Mode,  \/\/!< [Sa, Sa * Dc + Sc * (1 - Da)]$/;"	e	enum:SkPorterDuff::Mode
kDstIn_Mode	core/SkXfermode.h	/^        kDstIn_Mode,    \/\/!< [Sa * Da, Sa * Dc]$/;"	e	enum:SkXfermode::Mode
kDstIn_Mode	effects/SkPorterDuff.h	/^        kDstIn_Mode,    \/\/!< [Sa * Da, Sa * Dc]$/;"	e	enum:SkPorterDuff::Mode
kDstOut_Mode	core/SkXfermode.h	/^        kDstOut_Mode,   \/\/!< [Da * (1 - Sa), Dc * (1 - Sa)]$/;"	e	enum:SkXfermode::Mode
kDstOut_Mode	effects/SkPorterDuff.h	/^        kDstOut_Mode,   \/\/!< [Da * (1 - Sa), Dc * (1 - Sa)]$/;"	e	enum:SkPorterDuff::Mode
kDstOver_Mode	core/SkXfermode.h	/^        kDstOver_Mode,  \/\/!< [Sa + Da - Sa*Da, Rc = Dc + (1 - Da)*Sc]$/;"	e	enum:SkXfermode::Mode
kDstOver_Mode	effects/SkPorterDuff.h	/^        kDstOver_Mode,  \/\/!< [Sa + Da - Sa*Da, Rc = Dc + (1 - Da)*Sc]$/;"	e	enum:SkPorterDuff::Mode
kDst_Mode	core/SkXfermode.h	/^        kDst_Mode,      \/\/!< [Da, Dc]$/;"	e	enum:SkXfermode::Mode
kDst_Mode	effects/SkPorterDuff.h	/^        kDst_Mode,      \/\/!< [Da, Dc]$/;"	e	enum:SkPorterDuff::Mode
kDuplicateIDs	xml/SkXMLParser.h	/^        kDuplicateIDs,$/;"	e	enum:SkXMLParserError::ErrorCode
kDynamicUpdate_GrTextureFlagBit	gpu/GrTypes.h	/^    kDynamicUpdate_GrTextureFlagBit = 0x4,$/;"	e	enum:GrTextureFlags
kEOF_Status	pipe/SkGPipe.h	/^        kEOF_Status,    \/\/!< need more data from reader$/;"	e	enum:SkGPipeReader::Status
kES2_GrGLBinding	gpu/GrGLInterface.h	/^    kES2_GrGLBinding = 0x02$/;"	e	enum:GrGLBinding
kElementDummyType	animator/SkAnimator.h	/^    kElementDummyType$/;"	e	enum:SkElementType
kElement_Type	xml/SkDOM.h	/^        kElement_Type,$/;"	e	enum:SkDOM::Type
kEmbeddedBitmapText_Flag	core/SkPaint.h	/^        kEmbeddedBitmapText_Flag = 0x400, \/\/!< mask to enable embedded bitmap strikes$/;"	e	enum:SkPaint::Flags
kEmbeddedBitmapText_Flag	core/SkScalerContext.h	/^        kEmbeddedBitmapText_Flag  = 0x0004,$/;"	e	enum:SkScalerContext::Flags
kEmbolden_Flag	core/SkScalerContext.h	/^        kEmbolden_Flag            = 0x0008,$/;"	e	enum:SkScalerContext::Flags
kEmptyFile	xml/SkXMLParser.h	/^        kEmptyFile,$/;"	e	enum:SkXMLParserError::ErrorCode
kEmpty_ClipType	core/SkCanvas.h	/^        kEmpty_ClipType = 0,$/;"	e	enum:SkCanvas::ClipType
kEmpty_State	views/SkTouchGesture.h	/^        kEmpty_State,$/;"	e	enum:SkTouchGesture::State
kEnableBackground	svg/SkSVGPaintState.h	/^        kEnableBackground,$/;"	e	enum:SkSVGPaint::Field
kEnabled_Mask	views/SkView.h	/^        kEnabled_Mask   = 1 << kEnabled_Shift,      \/\/!< set if the view is enabled$/;"	e	enum:SkView::Flag_Mask
kEnabled_Shift	views/SkView.h	/^        kEnabled_Shift,$/;"	e	enum:SkView::Flag_Shift
kEnd_Align	views/SkStackViewLayout.h	/^        kEnd_Align,$/;"	e	enum:SkStackViewLayout::Align
kEnd_Pack	views/SkStackViewLayout.h	/^        kEnd_Pack,$/;"	e	enum:SkStackViewLayout::Pack
kEnd_PathCmd	gpu/GrTypes.h	/^    kEnd_PathCmd        \/\/!< Indicates the end of the last subpath$/;"	e	enum:GrPathCmd
kEnd_ScaleToFit	core/SkMatrix.h	/^        kEnd_ScaleToFit$/;"	e	enum:SkMatrix::ScaleToFit
kEnd_SkKey	views/SkKey.h	/^    kEnd_SkKey,     \/\/!< the red key$/;"	e	enum:SkKey
kEnd_SpacingAlign	utils/SkTextBox.h	/^        kEnd_SpacingAlign,$/;"	e	enum:SkTextBox::SpacingAlign
kEnd_SpacingAlign	views/SkTextBox.h	/^        kEnd_SpacingAlign,$/;"	e	enum:SkTextBox::SpacingAlign
kEntirePaint_Bits	effects/SkLayerDrawLooper.h	/^        kEntirePaint_Bits = -1$/;"	e	enum:SkLayerDrawLooper::Bits
kErode_Filter	gpu/GrSamplerState.h	/^        kErode_Filter,$/;"	e	enum:GrSamplerState::Filter
kErrorInAttributeValue	xml/SkXMLParser.h	/^        kErrorInAttributeValue,$/;"	e	enum:SkXMLParserError::ErrorCode
kError_Status	pipe/SkGPipe.h	/^        kError_Status,  \/\/!< encountered error$/;"	e	enum:SkGPipeReader::Status
kEthiopic_FallbackScript	ports/SkTypeface_android.h	/^    kEthiopic_FallbackScript,$/;"	e	enum:FallbackScripts
kEvenOdd_FillType	core/SkPath.h	/^        kEvenOdd_FillType,$/;"	e	enum:SkPath::FillType
kEvenOdd_PathFill	gpu/GrTypes.h	/^    kEvenOdd_PathFill,$/;"	e	enum:GrPathFill
kExact_ScratchTexMatch	gpu/GrContext.h	/^        kExact_ScratchTexMatch,$/;"	e	enum:GrContext::ScratchTexMatch
kExclusion_Mode	core/SkXfermode.h	/^        kExclusion_Mode,$/;"	e	enum:SkXfermode::Mode
kFakeBoldText_Flag	core/SkPaint.h	/^        kFakeBoldText_Flag    = 0x20,   \/\/!< mask to enable fake-bold text$/;"	e	enum:SkPaint::Flags
kFallbackScriptNumber	ports/SkTypeface_android.h	/^    kFallbackScriptNumber$/;"	e	enum:FallbackScripts
kFieldDummyType	animator/SkAnimator.h	/^    kFieldDummyType$/;"	e	enum:SkFieldType
kFill	svg/SkSVGPaintState.h	/^        kFill,$/;"	e	enum:SkSVGPaint::Field
kFillRule	svg/SkSVGPaintState.h	/^        kFillRule,$/;"	e	enum:SkSVGPaint::Field
kFill_RectType	core/SkDraw.h	/^        kFill_RectType,$/;"	e	enum:SkDraw::RectType
kFill_ScaleToFit	core/SkMatrix.h	/^        kFill_ScaleToFit,$/;"	e	enum:SkMatrix::ScaleToFit
kFill_Style	core/SkPaint.h	/^        kFill_Style,            \/\/!< fill the geometry$/;"	e	enum:SkPaint::Style
kFilter	svg/SkSVGPaintState.h	/^        kFilter,$/;"	e	enum:SkSVGPaint::Field
kFilterBitmap_Flag	core/SkPaint.h	/^        kFilterBitmap_Flag    = 0x02,   \/\/!< mask to enable bitmap filtering$/;"	e	enum:SkPaint::Flags
kFirstMaskStage	gpu/GrPaint.h	/^        kFirstMaskStage = kMaxTextures,$/;"	e	enum:GrPaint::__anon32
kFirstTextureStage	gpu/GrPaint.h	/^        kFirstTextureStage = 0,$/;"	e	enum:GrPaint::__anon32
kFitCenter_ScaleType	views/SkImageView.h	/^        kFitCenter_ScaleType,$/;"	e	enum:SkImageView::ScaleType
kFitEnd_ScaleType	views/SkImageView.h	/^        kFitEnd_ScaleType$/;"	e	enum:SkImageView::ScaleType
kFitStart_ScaleType	views/SkImageView.h	/^        kFitStart_ScaleType,$/;"	e	enum:SkImageView::ScaleType
kFitXY_ScaleType	views/SkImageView.h	/^        kFitXY_ScaleType,$/;"	e	enum:SkImageView::ScaleType
kFixedPitch_Style	core/SkAdvancedTypefaceMetrics.h	/^        kFixedPitch_Style  = 0x00001,$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kFixedSize_Mode	views/SkWidget.h	/^        kFixedSize_Mode,$/;"	e	enum:SkStaticTextView::Mode
kFixedSize_Mode	views/SkWidgetViews.h	/^        kFixedSize_Mode,$/;"	e	enum:SkStaticTextView::Mode
kFixedStepInX_MatrixClass	core/SkShader.h	/^        kFixedStepInX_MatrixClass,      \/\/ fast perspective, need to call fixedStepInX() each scanline$/;"	e	enum:SkShader::MatrixClass
kFlagShiftCount	views/SkView.h	/^        kFlagShiftCount$/;"	e	enum:SkView::Flag_Shift
kFlags16_Mask	core/SkBlitRow.h	/^        kFlags16_Mask = 7,$/;"	e	enum:SkBlitRow::__anon1
kFlags32_Mask	core/SkBlitRow.h	/^        kFlags32_Mask = 3$/;"	e	enum:SkBlitRow::__anon1
kFlexH_Mask	views/SkView.h	/^        kFlexH_Mask     = 1 << kFlexH_Shift,        \/\/!< set if the view's width is stretchable$/;"	e	enum:SkView::Flag_Mask
kFlexH_Shift	views/SkView.h	/^        kFlexH_Shift,$/;"	e	enum:SkView::Flag_Shift
kFlexV_Mask	views/SkView.h	/^        kFlexV_Mask     = 1 << kFlexV_Shift,        \/\/!< set if the view's height is stretchable$/;"	e	enum:SkView::Flag_Mask
kFlexV_Shift	views/SkView.h	/^        kFlexV_Shift,$/;"	e	enum:SkView::Flag_Shift
kFloat	utils/SkJSON.h	/^        kFloat,$/;"	e	enum:SkJSON::Type
kFocusDirectionCount	views/SkView.h	/^        kFocusDirectionCount$/;"	e	enum:SkView::FocusDirection
kFocusable_Mask	views/SkView.h	/^        kFocusable_Mask = 1 << kFocusable_Shift,    \/\/!< set if the view can receive focus$/;"	e	enum:SkView::Flag_Mask
kFocusable_Shift	views/SkView.h	/^        kFocusable_Shift,$/;"	e	enum:SkView::Flag_Shift
kFontFamily	svg/SkSVGPaintState.h	/^        kFontFamily,$/;"	e	enum:SkSVGPaint::Field
kFontSize	svg/SkSVGPaintState.h	/^        kFontSize,$/;"	e	enum:SkSVGPaint::Field
kForceBold_Style	core/SkAdvancedTypefaceMetrics.h	/^        kForceBold_Style   = 0x40000$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kForceCurrentRenderTarget_FlushBit	gpu/GrContext.h	/^        kForceCurrentRenderTarget_FlushBit   = 0x1,$/;"	e	enum:GrContext::FlushBits
kForward_AnimDir	views/SkWidget.h	/^        kForward_AnimDir,$/;"	e	enum:SkTextView::AnimaDir
kForward_TextBufferDirection	core/SkPaint.h	/^        kForward_TextBufferDirection,$/;"	e	enum:SkPaint::TextBufferDirection
kFrameAndFill_Flag	core/SkScalerContext.h	/^        kFrameAndFill_Flag        = 0x0001,$/;"	e	enum:SkScalerContext::Flags
kFreezeEnd_Result	utils/SkInterpolator.h	/^        kFreezeEnd_Result$/;"	e	enum:SkInterpolatorBase::Result
kFreezeStart_Result	utils/SkInterpolator.h	/^        kFreezeStart_Result,$/;"	e	enum:SkInterpolatorBase::Result
kFullColorLayer_SaveFlag	core/SkCanvas.h	/^        kFullColorLayer_SaveFlag    = 0x08,$/;"	e	enum:SkCanvas::SaveFlags
kFull_FontHintLevel	core/SkDeviceProfile.h	/^        kFull_FontHintLevel,$/;"	e	enum:SkDeviceProfile::FontHintLevel
kFull_Hinting	core/SkPaint.h	/^        kFull_Hinting          = 3$/;"	e	enum:SkPaint::Hinting
kGIF_Format	images/SkImageDecoder.h	/^        kGIF_Format,$/;"	e	enum:SkImageDecoder::Format
kGL_Capability	core/SkDevice.h	/^        kGL_Capability     = 0x1,  \/\/!< mask indicating GL support$/;"	e	enum:SkDevice::Capabilities
kG_Axis	effects/SkColorMatrix.h	/^        kG_Axis = 1,$/;"	e	enum:SkColorMatrix::Axis
kGenA8FromLCD_Flag	core/SkPaint.h	/^        kGenA8FromLCD_Flag    = 0x2000, \/\/ hack for GDI -- do not use if you can help it$/;"	e	enum:SkPaint::Flags
kGenA8FromLCD_Flag	core/SkScalerContext.h	/^        kGenA8FromLCD_Flag        = 0x0800,$/;"	e	enum:SkScalerContext::Flags
kGeneral_Usage	core/SkDevice.h	/^       kGeneral_Usage,$/;"	e	enum:SkDevice::Usage
kGeorgian_FallbackScript	ports/SkTypeface_android.h	/^    kGeorgian_FallbackScript,$/;"	e	enum:FallbackScripts
kGetPosAndTan_MatrixFlag	core/SkPathMeasure.h	/^        kGetPosAndTan_MatrixFlag    = kGetPosition_MatrixFlag | kGetTangent_MatrixFlag$/;"	e	enum:SkPathMeasure::MatrixFlags
kGetPosition_MatrixFlag	core/SkPathMeasure.h	/^        kGetPosition_MatrixFlag     = 0x01,$/;"	e	enum:SkPathMeasure::MatrixFlags
kGetTangent_MatrixFlag	core/SkPathMeasure.h	/^        kGetTangent_MatrixFlag      = 0x02,$/;"	e	enum:SkPathMeasure::MatrixFlags
kGlobalAlpha_Flag	core/SkBlitRow.h	/^        kGlobalAlpha_Flag   = 0x01,$/;"	e	enum:SkBlitRow::Flags16
kGlobalAlpha_Flag32	core/SkBlitRow.h	/^        kGlobalAlpha_Flag32     = 1 << 0,$/;"	e	enum:SkBlitRow::Flags32
kGlyphID_TextEncoding	core/SkPaint.h	/^        kGlyphID_TextEncoding   \/\/!< the text parameters are glyph indices$/;"	e	enum:SkPaint::TextEncoding
kGlyphNames_PerGlyphInfo	core/SkAdvancedTypefaceMetrics.h	/^      kGlyphNames_PerGlyphInfo = 0x4, \/\/ Populate glyph names (Type 1 only).$/;"	e	enum:SkAdvancedTypefaceMetrics::PerGlyphInfo
kGrColorTableSize	gpu/GrTypes.h	/^    kGrColorTableSize = 256 * 4 \/\/sizeof(GrColor)$/;"	e	enum:__anon35
kGrPixelConfigCount	gpu/GrTypes.h	/^    kGrPixelConfigCount$/;"	e	enum:GrPixelConfig
kHAdvance_PerGlyphInfo	core/SkAdvancedTypefaceMetrics.h	/^      kHAdvance_PerGlyphInfo   = 0x1, \/\/ Populate horizontal advance data.$/;"	e	enum:SkAdvancedTypefaceMetrics::PerGlyphInfo
kHairLine_PathFill	gpu/GrTypes.h	/^    kHairLine_PathFill,$/;"	e	enum:GrPathFill
kHair_RectType	core/SkDraw.h	/^        kHair_RectType,$/;"	e	enum:SkDraw::RectType
kHandled_EventResult	views/SkEventSink.h	/^        kHandled_EventResult,       \/\/!< the eventsink returned true from its doEvent method$/;"	e	enum:SkEventSink::EventResult
kHardLight_Mode	core/SkXfermode.h	/^        kHardLight_Mode,$/;"	e	enum:SkXfermode::Mode
kHasAlphaLayer_SaveFlag	core/SkCanvas.h	/^        kHasAlphaLayer_SaveFlag     = 0x04,$/;"	e	enum:SkCanvas::SaveFlags
kHasBlend	utils/SkInterpolator.h	/^        kHasBlend = 4$/;"	e	enum:SkInterpolatorBase::Flags
kHasFilter16_Flag	core/SkColorFilter.h	/^        kHasFilter16_Flag    = 0x02$/;"	e	enum:SkColorFilter::Flags
kHasSpan16_Flag	core/SkShader.h	/^        kHasSpan16_Flag = 0x02,$/;"	e	enum:SkShader::Flags
kHash_SkKey	views/SkKey.h	/^    kHash_SkKey,    \/\/!< the # key$/;"	e	enum:SkKey
kHebrewBold_FallbackScript	ports/SkTypeface_android.h	/^    kHebrewBold_FallbackScript,$/;"	e	enum:FallbackScripts
kHebrewRegular_FallbackScript	ports/SkTypeface_android.h	/^    kHebrewRegular_FallbackScript,$/;"	e	enum:FallbackScripts
kHighQuality_BlurFlag	effects/SkBlurDrawLooper.h	/^        kHighQuality_BlurFlag       = 0x04,$/;"	e	enum:SkBlurDrawLooper::BlurFlags
kHighQuality_BlurFlag	effects/SkBlurMaskFilter.h	/^        kHighQuality_BlurFlag       = 0x02,$/;"	e	enum:SkBlurMaskFilter::BlurFlags
kHiliteCell_Attr	views/SkWidget.h	/^        kHiliteCell_Attr,$/;"	e	enum:SkGridView::Attr
kHiliteCell_Attr	views/SkWidget.h	/^        kHiliteCell_Attr,$/;"	e	enum:SkListView::Attr
kHiliteText_Attr	views/SkWidget.h	/^        kHiliteText_Attr,$/;"	e	enum:SkListView::Attr
kHintingBit1_Flag	core/SkScalerContext.h	/^        kHintingBit1_Flag         = 0x0080,$/;"	e	enum:SkScalerContext::Flags
kHintingBit2_Flag	core/SkScalerContext.h	/^        kHintingBit2_Flag         = 0x0100,$/;"	e	enum:SkScalerContext::Flags
kHinting_Mask	core/SkScalerContext.h	/^        kHinting_Mask   = kHintingBit1_Flag | kHintingBit2_Flag$/;"	e	enum:SkScalerContext::__anon18
kHinting_Shift	core/SkScalerContext.h	/^        kHinting_Shift            = 7, \/\/ to shift into the other flags above$/;"	e	enum:SkScalerContext::Flags
kHome_SkKey	views/SkKey.h	/^    kHome_SkKey,    \/\/!< the home key - added to match android$/;"	e	enum:SkKey
kHorizontal_LCDOrientation	SkFontHost.h	/^        kHorizontal_LCDOrientation = 0,    \/\/!< this is the default$/;"	e	enum:SkFontHost::LCDOrientation
kHorizontal_LCDOrientation	core/SkFontHost.h	/^        kHorizontal_LCDOrientation = 0,    \/\/!< this is the default$/;"	e	enum:SkFontHost::LCDOrientation
kHorizontal_Orient	views/SkStackViewLayout.h	/^        kHorizontal_Orient,$/;"	e	enum:SkStackViewLayout::Orient
kICO_Format	images/SkImageDecoder.h	/^        kICO_Format,$/;"	e	enum:SkImageDecoder::Format
kIConstA_BlendCoeff	gpu/GrTypes.h	/^    kIConstA_BlendCoeff, \/\/<! one minus constant color alpha$/;"	e	enum:GrBlendCoeff
kIConstC_BlendCoeff	gpu/GrTypes.h	/^    kIConstC_BlendCoeff, \/\/<! one minus constant color$/;"	e	enum:GrBlendCoeff
kIDA_BlendCoeff	gpu/GrTypes.h	/^    kIDA_BlendCoeff,     \/\/<! one minus dst alpha$/;"	e	enum:GrBlendCoeff
kIDA_Coeff	core/SkXfermode.h	/^        kIDA_Coeff,     \/** inverse dst alpha (i.e. 1 - da) *\/$/;"	e	enum:SkXfermode::Coeff
kIDC_BlendCoeff	gpu/GrTypes.h	/^    kIDC_BlendCoeff,     \/\/<! one minus dst color$/;"	e	enum:GrBlendCoeff
kIDC_Coeff	core/SkXfermode.h	/^        kIDC_Coeff,     \/** inverse dst color (i.e. 1 - dc) *\/$/;"	e	enum:SkXfermode::Coeff
kISA_BlendCoeff	gpu/GrTypes.h	/^    kISA_BlendCoeff,     \/\/<! one minus src alpha$/;"	e	enum:GrBlendCoeff
kISA_Coeff	core/SkXfermode.h	/^        kISA_Coeff,     \/** inverse src alpha (i.e. 1 - sa) *\/$/;"	e	enum:SkXfermode::Coeff
kISC_BlendCoeff	gpu/GrTypes.h	/^    kISC_BlendCoeff,     \/\/<! one minus src color$/;"	e	enum:GrBlendCoeff
kISC_Coeff	core/SkXfermode.h	/^        kISC_Coeff,     \/** inverse src color (i.e. 1 - sc) *\/$/;"	e	enum:SkXfermode::Coeff
kIdentity_Mask	core/SkMatrix.h	/^        kIdentity_Mask      = 0,$/;"	e	enum:SkMatrix::TypeMask
kIgnoreTransform_BlurFlag	effects/SkBlurDrawLooper.h	/^        kIgnoreTransform_BlurFlag   = 0x01,$/;"	e	enum:SkBlurDrawLooper::BlurFlags
kIgnoreTransform_BlurFlag	effects/SkBlurMaskFilter.h	/^        kIgnoreTransform_BlurFlag   = 0x01,$/;"	e	enum:SkBlurMaskFilter::BlurFlags
kIllegalStageClassID	gpu/GrProgramStageFactory.h	/^        kIllegalStageClassID = 0,$/;"	e	enum:GrProgramStageFactory::__anon34
kImageIsImmutable_Flag	SkBitmap.h	/^        kImageIsImmutable_Flag  = 0x04$/;"	e	enum:SkBitmap::Flags
kImageIsImmutable_Flag	core/SkBitmap.h	/^        kImageIsImmutable_Flag  = 0x04$/;"	e	enum:SkBitmap::Flags
kImageIsOpaque_Flag	SkBitmap.h	/^        kImageIsOpaque_Flag     = 0x01,$/;"	e	enum:SkBitmap::Flags
kImageIsOpaque_Flag	core/SkBitmap.h	/^        kImageIsOpaque_Flag     = 0x01,$/;"	e	enum:SkBitmap::Flags
kImageIsVolatile_Flag	SkBitmap.h	/^        kImageIsVolatile_Flag   = 0x02,$/;"	e	enum:SkBitmap::Flags
kImageIsVolatile_Flag	core/SkBitmap.h	/^        kImageIsVolatile_Flag   = 0x02,$/;"	e	enum:SkBitmap::Flags
kImage_WidgetEnum	views/SkWidgetViews.h	/^    kImage_WidgetEnum,          \/\/!< <sk-image>$/;"	e	enum:SkWidgetEnum
kIndex8_Config	SkBitmap.h	/^        kIndex8_Config,     \/\/!< 8-bits per pixel, using SkColorTable to specify the colors$/;"	e	enum:SkBitmap::Config
kIndex8_Config	core/SkBitmap.h	/^        kIndex8_Config,     \/\/!< 8-bits per pixel, using SkColorTable to specify the colors$/;"	e	enum:SkBitmap::Config
kIndex_8_GrPixelConfig	gpu/GrTypes.h	/^    kIndex_8_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kIndex_SrcDepth	images/SkImageDecoder.h	/^        kIndex_SrcDepth,$/;"	e	enum:SkImageDecoder::SrcDepth
kInheritFromRootTransform_Flag	utils/SkLayer.h	/^        kInheritFromRootTransform_Flag = 0x01$/;"	e	enum:SkLayer::Flags
kInitial	svg/SkSVGPaintState.h	/^        kInitial = -1,$/;"	e	enum:SkSVGPaint::Field
kInlineFactoryNames_Flag	core/SkFlattenable.h	/^        kInlineFactoryNames_Flag = 0x02$/;"	e	enum:SkFlattenableWriteBuffer::Flags
kInner_BlurStyle	effects/SkBlurMaskFilter.h	/^        kInner_BlurStyle,   \/\/!< fuzzy inside, nothing outside$/;"	e	enum:SkBlurMaskFilter::BlurStyle
kInner_BlurType	core/SkMaskFilter.h	/^        kInner_BlurType    \/\/!< fuzzy inside, nothing outside$/;"	e	enum:SkMaskFilter::BlurType
kInt	utils/SkJSON.h	/^        kInt,$/;"	e	enum:SkJSON::Type
kIntersect_Op	core/SkRegion.h	/^        kIntersect_Op,  \/\/!< intersect the two regions$/;"	e	enum:SkRegion::Op
kIntrinsicly16_Flag	core/SkShader.h	/^        kIntrinsicly16_Flag = 0x04,$/;"	e	enum:SkShader::Flags
kInvalid_BlendCoeff	gpu/GrTypes.h	/^    kInvalid_BlendCoeff = -1,$/;"	e	enum:GrBlendCoeff
kInverseEvenOdd_FillType	core/SkPath.h	/^        kInverseEvenOdd_FillType$/;"	e	enum:SkPath::FillType
kInverseEvenOdd_PathFill	gpu/GrTypes.h	/^    kInverseEvenOdd_PathFill,$/;"	e	enum:GrPathFill
kInverseWinding_FillType	core/SkPath.h	/^        kInverseWinding_FillType,$/;"	e	enum:SkPath::FillType
kInverseWinding_PathFill	gpu/GrTypes.h	/^    kInverseWinding_PathFill,$/;"	e	enum:GrPathFill
kItalic	core/SkTypeface.h	/^        kItalic = 0x02,$/;"	e	enum:SkTypeface::Style
kItalic_Style	core/SkAdvancedTypefaceMetrics.h	/^        kItalic_Style      = 0x00040,$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kJPEG_Format	images/SkImageDecoder.h	/^        kJPEG_Format,$/;"	e	enum:SkImageDecoder::Format
kJPEG_Type	images/SkImageEncoder.h	/^        kJPEG_Type,$/;"	e	enum:SkImageEncoder::Type
kJoinCount	core/SkPaint.h	/^        kJoinCount,$/;"	e	enum:SkPaint::Join
kJustComputeBounds_CreateMode	core/SkMask.h	/^        kJustComputeBounds_CreateMode,      \/\/!< compute bounds and return$/;"	e	enum:SkMask::CreateMode
kJustRenderImage_CreateMode	core/SkMask.h	/^        kJustRenderImage_CreateMode,        \/\/!< render into preallocate mask$/;"	e	enum:SkMask::CreateMode
kLCD16_Format	core/SkMask.h	/^        kLCD16_Format,          \/\/!< 565 alpha for r\/g\/b$/;"	e	enum:SkMask::Format
kLCD32_Format	core/SkMask.h	/^        kLCD32_Format           \/\/!< 888 alpha for r\/g\/b$/;"	e	enum:SkMask::Format
kLCDRenderText_Flag	core/SkPaint.h	/^        kLCDRenderText_Flag   = 0x200,  \/\/!< mask to enable subpixel glyph renderering$/;"	e	enum:SkPaint::Flags
kLCD_BGROrder_Flag	core/SkScalerContext.h	/^        kLCD_BGROrder_Flag        = 0x0400,    \/\/ else RGB order$/;"	e	enum:SkScalerContext::Flags
kLCD_Vertical_Flag	core/SkScalerContext.h	/^        kLCD_Vertical_Flag        = 0x0200,    \/\/ else Horizontal$/;"	e	enum:SkScalerContext::Flags
kLastKnownFormat	images/SkImageDecoder.h	/^        kLastKnownFormat = kWBMP_Format$/;"	e	enum:SkImageDecoder::Format
kLastMode	core/SkXfermode.h	/^        kLastMode = kExclusion_Mode$/;"	e	enum:SkXfermode::Mode
kLast_BitmapType	core/SkShader.h	/^       kLast_BitmapType = kTwoPointRadial_BitmapType$/;"	e	enum:SkShader::BitmapType
kLast_GradientType	core/SkShader.h	/^        kLast_GradientType = kSweep_GradientType$/;"	e	enum:SkShader::GradientType
kLeft	utils/SkBoundaryPatch.h	/^        kLeft   = 3$/;"	e	enum:SkBoundary::Edge
kLeftSoftKey_SkKey	views/SkKey.h	/^    kLeftSoftKey_SkKey,$/;"	e	enum:SkKey
kLeft_Align	core/SkPaint.h	/^        kLeft_Align,$/;"	e	enum:SkPaint::Align
kLeft_Side	core/SkPoint.h	/^        kLeft_Side  = -1,$/;"	e	enum:SkPoint::Side
kLeft_SkKey	views/SkKey.h	/^    kLeft_SkKey,$/;"	e	enum:SkKey
kLetterSpacing	svg/SkSVGPaintState.h	/^        kLetterSpacing,$/;"	e	enum:SkSVGPaint::Field
kLighten_Mode	core/SkXfermode.h	/^        kLighten_Mode,$/;"	e	enum:SkXfermode::Mode
kLighten_Mode	effects/SkPorterDuff.h	/^        kLighten_Mode,  \/\/!< [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]$/;"	e	enum:SkPorterDuff::Mode
kLineBreak_Mode	utils/SkTextBox.h	/^        kLineBreak_Mode,$/;"	e	enum:SkTextBox::Mode
kLineBreak_Mode	views/SkTextBox.h	/^        kLineBreak_Mode,$/;"	e	enum:SkTextBox::Mode
kLineStrip_PrimitiveType	gpu/GrTypes.h	/^    kLineStrip_PrimitiveType  \/\/ 1 pix wide only$/;"	e	enum:GrPrimitiveType
kLineTo_Result	utils/SkCullPoints.h	/^        kLineTo_Result,         \/\/!< path.lineTo(pts[1]);$/;"	e	enum:SkCullPoints::LineToResult
kLine_PathCmd	gpu/GrTypes.h	/^    kLine_PathCmd,      \/\/!< Adds a line segment$/;"	e	enum:GrPathCmd
kLine_SegmentMask	core/SkPath.h	/^        kLine_SegmentMask   = 1 << 0,$/;"	e	enum:SkPath::SegmentMask
kLine_Type	core/SkDrawFilter.h	/^        kLine_Type,$/;"	e	enum:SkDrawFilter::Type
kLine_Verb	core/SkPath.h	/^        kLine_Verb,     \/\/!< iter.next returns 2 points$/;"	e	enum:SkPath::Verb
kLinearText_Flag	core/SkPaint.h	/^        kLinearText_Flag      = 0x40,   \/\/!< mask to enable linear-text$/;"	e	enum:SkPaint::Flags
kLinear_GradientType	core/SkShader.h	/^        kLinear_GradientType,$/;"	e	enum:SkShader::GradientType
kLinear_MatrixClass	core/SkShader.h	/^        kLinear_MatrixClass,            \/\/ no perspective$/;"	e	enum:SkShader::MatrixClass
kLines_PointMode	core/SkCanvas.h	/^        kLines_PointMode,$/;"	e	enum:SkCanvas::PointMode
kLines_PrimitiveType	gpu/GrTypes.h	/^    kLines_PrimitiveType,     \/\/ 1 pix wide only$/;"	e	enum:GrPrimitiveType
kList_Type	views/SkOSMenu.h	/^        kList_Type,$/;"	e	enum:SkOSMenu::Type
kList_WidgetEnum	views/SkWidgetViews.h	/^    kList_WidgetEnum,           \/\/!< <sk-list>$/;"	e	enum:SkWidgetEnum
kLuminance_Bits	core/SkScalerContext.h	/^        kLuminance_Bits           = 3$/;"	e	enum:SkScalerContext::Flags
kMESA_GLContextType	gpu/GrContextFactory.h	/^      kMESA_GLContextType,$/;"	e	enum:GrContextFactory::GLContextType
kMPersp0	core/SkMatrix.h	/^        kMPersp0,$/;"	e	enum:SkMatrix::__anon6
kMPersp1	core/SkMatrix.h	/^        kMPersp1,$/;"	e	enum:SkMatrix::__anon6
kMPersp2	core/SkMatrix.h	/^        kMPersp2$/;"	e	enum:SkMatrix::__anon6
kMScaleX	core/SkMatrix.h	/^        kMScaleX,$/;"	e	enum:SkMatrix::__anon6
kMScaleY	core/SkMatrix.h	/^        kMScaleY,$/;"	e	enum:SkMatrix::__anon6
kMSkewX	core/SkMatrix.h	/^        kMSkewX,$/;"	e	enum:SkMatrix::__anon6
kMSkewY	core/SkMatrix.h	/^        kMSkewY,$/;"	e	enum:SkMatrix::__anon6
kMTransX	core/SkMatrix.h	/^        kMTransX,$/;"	e	enum:SkMatrix::__anon6
kMTransY	core/SkMatrix.h	/^        kMTransY,$/;"	e	enum:SkMatrix::__anon6
kMargin_DrawingArea	pdf/SkPDFDevice.h	/^        kMargin_DrawingArea,   \/\/ Drawing area for the margin content.$/;"	e	enum:SkPDFDevice::DrawingArea
kMask	svg/SkSVGPaintState.h	/^        kMask,$/;"	e	enum:SkSVGPaint::Field
kMaskFilter_Bit	effects/SkLayerDrawLooper.h	/^        kMaskFilter_Bit = 1 << 3,   \/\/!< use this layer's maskfilter$/;"	e	enum:SkLayerDrawLooper::Bits
kMaskFilter_SkDescriptorTag	core/SkScalerContext.h	/^#define kMaskFilter_SkDescriptorTag /;"	d
kMatrixClip_SaveFlag	core/SkCanvas.h	/^        kMatrixClip_SaveFlag        = 0x03,$/;"	e	enum:SkCanvas::SaveFlags
kMatrix_SaveFlag	core/SkCanvas.h	/^        kMatrix_SaveFlag            = 0x01,$/;"	e	enum:SkCanvas::SaveFlags
kMatrix_ScaleType	views/SkImageView.h	/^        kMatrix_ScaleType,$/;"	e	enum:SkImageView::ScaleType
kMatrix_Verb	utils/SkDumpCanvas.h	/^        kMatrix_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kMaxBytesInUTF8Sequence	core/SkUtils.h	/^#define kMaxBytesInUTF8Sequence /;"	d
kMaxFlattenSize	core/SkMatrix.h	/^        kMaxFlattenSize = 9 * sizeof(SkScalar) + sizeof(uint32_t)$/;"	e	enum:SkMatrix::__anon8
kMaxGlyphWidth	core/SkScalerContext.h	/^#define kMaxGlyphWidth /;"	d
kMaxLen	pdf/SkPDFTypes.h	/^    static const int kMaxLen = 4095;$/;"	m	class:SkPDFDict
kMaxLen	pdf/SkPDFTypes.h	/^    static const int kMaxLen = 8191;$/;"	m	class:SkPDFArray
kMaxLen	pdf/SkPDFTypes.h	/^    static const size_t kMaxLen = 127;$/;"	m	class:SkPDFName
kMaxLen	pdf/SkPDFTypes.h	/^    static const size_t kMaxLen = 65535;$/;"	m	class:SkPDFString
kMaxMasks	gpu/GrPaint.h	/^        kMaxMasks    = 1,$/;"	e	enum:GrPaint::__anon31
kMaxPoints	core/SkEdgeClipper.h	/^        kMaxPoints = 32$/;"	e	enum:SkEdgeClipper::__anon3
kMaxPoints	core/SkLineClipper.h	/^        kMaxPoints = 4$/;"	e	enum:SkLineClipper::__anon4
kMaxTextures	gpu/GrPaint.h	/^        kMaxTextures = 1,$/;"	e	enum:GrPaint::__anon31
kMaxVerbs	core/SkEdgeClipper.h	/^        kMaxVerbs = 13,$/;"	e	enum:SkEdgeClipper::__anon3
kMaybe_State	views/SkWidget.h	/^        kMaybe_State$/;"	e	enum:SkCheckBoxView::State
kMinIDStrAlloc	views/SkViewInflate.h	/^        kMinIDStrAlloc = 64$/;"	e	enum:SkViewInflate::__anon45
kMirror	utils/SkInterpolator.h	/^        kMirror = 1,$/;"	e	enum:SkInterpolatorBase::Flags
kMirror_TileMode	core/SkShader.h	/^        kMirror_TileMode,$/;"	e	enum:SkShader::TileMode
kMirror_WrapMode	gpu/GrSamplerState.h	/^        kMirror_WrapMode,$/;"	e	enum:GrSamplerState::WrapMode
kMiter_Join	core/SkPaint.h	/^        kMiter_Join,    \/\/!< connect path segments with a sharp join$/;"	e	enum:SkPaint::Join
kMixedState	views/SkOSMenu.h	/^        kMixedState = -1,$/;"	e	enum:SkOSMenu::TriState
kModeCount	core/SkXfermode.h	/^        kModeCount = kLastMode + 1$/;"	e	enum:SkXfermode::__anon29
kModeCount	effects/SkPorterDuff.h	/^        kModeCount$/;"	e	enum:SkPorterDuff::Mode
kModeCount	utils/SkTextBox.h	/^        kModeCount$/;"	e	enum:SkTextBox::Mode
kModeCount	views/SkTextBox.h	/^        kModeCount$/;"	e	enum:SkTextBox::Mode
kModeCount	views/SkWidget.h	/^        kModeCount$/;"	e	enum:SkStaticTextView::Mode
kModeCount	views/SkWidgetViews.h	/^        kModeCount$/;"	e	enum:SkStaticTextView::Mode
kMorph_Style	effects/Sk1DPathEffect.h	/^        kMorph_Style,       \/\/ transform each point, and turn lines into curves$/;"	e	enum:SkPath1DPathEffect::Style
kMoveToLineTo_Result	utils/SkCullPoints.h	/^        kMoveToLineTo_Result    \/\/!< path.moveTo(pts[0]); path.lineTo(pts[1]);$/;"	e	enum:SkCullPoints::LineToResult
kMove_PathCmd	gpu/GrTypes.h	/^    kMove_PathCmd,      \/\/!< Starts a new subpath at$/;"	e	enum:GrPathCmd
kMove_Verb	core/SkPath.h	/^        kMove_Verb,     \/\/!< iter.next returns 1 point$/;"	e	enum:SkPath::Verb
kMoved_State	views/SkView.h	/^            kMoved_State,$/;"	e	enum:SkView::Click::State
kMul	core/SkRandom.h	/^        kMul = 1664525,$/;"	e	enum:SkRandom::__anon13
kMultiply_Mode	core/SkXfermode.h	/^        kMultiply_Mode, $/;"	e	enum:SkXfermode::Mode
kMultiply_Mode	effects/SkPorterDuff.h	/^        kMultiply_Mode, \/\/!< [Sa * Da, Sc * Dc]$/;"	e	enum:SkPorterDuff::Mode
kNONE_LCDOrder	SkFontHost.h	/^        kNONE_LCDOrder = 2$/;"	e	enum:SkFontHost::LCDOrder
kNONE_LCDOrder	core/SkFontHost.h	/^        kNONE_LCDOrder = 2$/;"	e	enum:SkFontHost::LCDOrder
kNONE_SkKey	views/SkKey.h	/^    kNONE_SkKey,    \/\/corresponds to android's UNKNOWN$/;"	e	enum:SkKey
kNULL_Verb	utils/SkDumpCanvas.h	/^        kNULL_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kNativeGL_BackEndType	views/SkOSWindow_Android.h	/^        kNativeGL_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNativeGL_BackEndType	views/SkOSWindow_Mac.h	/^        kNativeGL_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNativeGL_BackEndType	views/SkOSWindow_Unix.h	/^        kNativeGL_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNativeGL_BackEndType	views/SkOSWindow_Win.h	/^        kNativeGL_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNativeGL_BackEndType	views/SkOSWindow_iOS.h	/^        kNativeGL_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNative_GLContextType	gpu/GrContextFactory.h	/^      kNative_GLContextType,$/;"	e	enum:GrContextFactory::GLContextType
kNative_Premul_Config8888	core/SkCanvas.h	/^        kNative_Premul_Config8888,$/;"	e	enum:SkCanvas::Config8888
kNative_Unpremul_Config8888	core/SkCanvas.h	/^        kNative_Unpremul_Config8888,$/;"	e	enum:SkCanvas::Config8888
kNearest_Filter	gpu/GrSamplerState.h	/^        kNearest_Filter,$/;"	e	enum:GrSamplerState::Filter
kNeutral_AnimDir	views/SkWidget.h	/^        kNeutral_AnimDir,$/;"	e	enum:SkTextView::AnimaDir
kNext_FocusDirection	views/SkView.h	/^        kNext_FocusDirection,$/;"	e	enum:SkView::FocusDirection
kNoClip_Mask	views/SkView.h	/^        kNoClip_Mask    = 1 << kNoClip_Shift,        \/\/!< set if the view is not clipped to its bounds$/;"	e	enum:SkView::Flag_Mask
kNoClip_Shift	views/SkView.h	/^        kNoClip_Shift,$/;"	e	enum:SkView::Flag_Shift
kNoCompression_Flag	pdf/SkPDFDocument.h	/^        kNoCompression_Flag = 0x01,  \/\/!< mask disable stream compression.$/;"	e	enum:SkPDFDocument::Flags
kNoCompression_State	pdf/SkPDFStream.h	/^        kNoCompression_State,  \/\/!< The stream's been requested in an$/;"	e	enum:SkPDFStream::State
kNoEmbedding_Flag	pdf/SkPDFDocument.h	/^        kNoEmbedding_Flag   = 0x02,  \/\/!< mask do not embed fonts.$/;"	e	enum:SkPDFDocument::Flags
kNoError	xml/SkXMLParser.h	/^        kNoError,$/;"	e	enum:SkXMLParserError::ErrorCode
kNoStencil_GrTextureFlagBit	gpu/GrTypes.h	/^    kNoStencil_GrTextureFlagBit     = 0x2,$/;"	e	enum:GrTextureFlags
kNo_Config	SkBitmap.h	/^        kNo_Config,         \/\/!< bitmap has not been configured$/;"	e	enum:SkBitmap::Config
kNo_Config	core/SkBitmap.h	/^        kNo_Config,         \/\/!< bitmap has not been configured$/;"	e	enum:SkBitmap::Config
kNo_Hinting	core/SkPaint.h	/^        kNo_Hinting            = 0,$/;"	e	enum:SkPaint::Hinting
kNo_PerGlyphInfo	core/SkAdvancedTypefaceMetrics.h	/^      kNo_PerGlyphInfo         = 0x0, \/\/ Don't populate any per glyph info.$/;"	e	enum:SkAdvancedTypefaceMetrics::PerGlyphInfo
kNo_Result	utils/SkCullPoints.h	/^        kNo_Result,             \/\/!< line segment was completely clipped out$/;"	e	enum:SkCullPoints::LineToResult
kNone_BackEndType	views/SkOSWindow_Android.h	/^        kNone_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNone_BackEndType	views/SkOSWindow_Mac.h	/^        kNone_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNone_BackEndType	views/SkOSWindow_Unix.h	/^        kNone_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNone_BackEndType	views/SkOSWindow_Win.h	/^        kNone_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNone_BackEndType	views/SkOSWindow_iOS.h	/^        kNone_BackEndType,$/;"	e	enum:SkOSWindow::SkBackEndTypes
kNone_BitmapType	core/SkShader.h	/^        kNone_BitmapType,   \/\/<! Shader is not represented as a bitmap$/;"	e	enum:SkShader::BitmapType
kNone_BlurFlag	effects/SkBlurDrawLooper.h	/^        kNone_BlurFlag = 0x00,$/;"	e	enum:SkBlurDrawLooper::BlurFlags
kNone_BlurFlag	effects/SkBlurMaskFilter.h	/^        kNone_BlurFlag = 0x00,$/;"	e	enum:SkBlurMaskFilter::BlurFlags
kNone_BlurType	core/SkMaskFilter.h	/^        kNone_BlurType,    \/\/!< this maskfilter is not a blur$/;"	e	enum:SkMaskFilter::BlurType
kNone_FontHintLevel	core/SkDeviceProfile.h	/^        kNone_FontHintLevel,$/;"	e	enum:SkDeviceProfile::FontHintLevel
kNone_GrPlatformTextureFlag	gpu/GrTypes.h	/^    kNone_GrPlatformTextureFlag              = 0x0,$/;"	e	enum:GrPlatformTextureFlags
kNone_GrTextureFlags	gpu/GrTypes.h	/^    kNone_GrTextureFlags            = 0x0,$/;"	e	enum:GrTextureFlags
kNone_GradientType	core/SkShader.h	/^        kNone_GradientType,$/;"	e	enum:SkShader::GradientType
kNone_LCDConfig	core/SkDeviceProfile.h	/^        kNone_LCDConfig,   \/\/ disables LCD text rendering, uses A8 instead$/;"	e	enum:SkDeviceProfile::LCDConfig
kNone_SkAxisAlignment	core/SkScalerContext.h	/^    kNone_SkAxisAlignment,$/;"	e	enum:SkAxisAlignment
kNonsymbolic_Style	core/SkAdvancedTypefaceMetrics.h	/^        kNonsymbolic_Style = 0x00020,$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kNormal	core/SkTypeface.h	/^        kNormal = 0,$/;"	e	enum:SkTypeface::Style
kNormalText_Attr	views/SkWidget.h	/^        kNormalText_Attr,$/;"	e	enum:SkListView::Attr
kNormal_BlurStyle	effects/SkBlurMaskFilter.h	/^        kNormal_BlurStyle,  \/\/!< fuzzy inside and outside$/;"	e	enum:SkBlurMaskFilter::BlurStyle
kNormal_BlurType	core/SkMaskFilter.h	/^        kNormal_BlurType,  \/\/!< fuzzy inside and outside$/;"	e	enum:SkMaskFilter::BlurType
kNormal_FontHintLevel	core/SkDeviceProfile.h	/^        kNormal_FontHintLevel,$/;"	e	enum:SkDeviceProfile::FontHintLevel
kNormal_Height	views/SkWidgetViews.h	/^        kNormal_Height,$/;"	e	enum:SkListView::Heights
kNormal_Hinting	core/SkPaint.h	/^        kNormal_Hinting        = 2,     \/\/!< this is the default$/;"	e	enum:SkPaint::Hinting
kNormal_Result	utils/SkInterpolator.h	/^        kNormal_Result,$/;"	e	enum:SkInterpolatorBase::Result
kNormal_SampleMode	gpu/GrSamplerState.h	/^        kNormal_SampleMode,     \/\/!< sample color directly$/;"	e	enum:GrSamplerState::SampleMode
kNotDifferent	animator/SkAnimator.h	/^        kNotDifferent,$/;"	e	enum:SkAnimator::DifferenceType
kNotEmbeddable_Font	core/SkAdvancedTypefaceMetrics.h	/^        kNotEmbeddable_Font$/;"	e	enum:SkAdvancedTypefaceMetrics::FontType
kNotHandled_EventResult	views/SkEventSink.h	/^        kNotHandled_EventResult,    \/\/!< the eventsink returned false from its doEvent method$/;"	e	enum:SkEventSink::EventResult
kNull_GLContextType	gpu/GrContextFactory.h	/^      kNull_GLContextType,$/;"	e	enum:GrContextFactory::GLContextType
kOK_SkKey	views/SkKey.h	/^    kOK_SkKey,      \/\/!< the center key$/;"	e	enum:SkKey
kORableMasks	core/SkMatrix.h	/^        kORableMasks =  kTranslate_Mask |$/;"	e	enum:SkMatrix::__anon9
kObject	utils/SkJSON.h	/^        kObject,$/;"	e	enum:SkJSON::Type
kOffState	views/SkOSMenu.h	/^        kOffState = 0,$/;"	e	enum:SkOSMenu::TriState
kOff_CheckState	views/SkWidgetViews.h	/^        kOff_CheckState,        \/\/!< inflate: check-state="off"$/;"	e	enum:SkCheckButtonView::CheckState
kOff_State	views/SkWidget.h	/^        kOff_State,     \/\/!< XML: buttonState="off"$/;"	e	enum:SkButtonWidget::State
kOff_State	views/SkWidget.h	/^        kOff_State,$/;"	e	enum:SkCheckBoxView::State
kOnState	views/SkOSMenu.h	/^        kOnState = 1$/;"	e	enum:SkOSMenu::TriState
kOn_CheckState	views/SkWidgetViews.h	/^        kOn_CheckState,         \/\/!< inflate: check-state="on"$/;"	e	enum:SkCheckButtonView::CheckState
kOn_Side	core/SkPoint.h	/^        kOn_Side    =  0,$/;"	e	enum:SkPoint::Side
kOn_State	views/SkWidget.h	/^        kOn_State,      \/\/!< XML: buttonState="on"$/;"	e	enum:SkButtonWidget::State
kOn_State	views/SkWidget.h	/^        kOn_State,$/;"	e	enum:SkCheckBoxView::State
kOneLine_Mode	utils/SkTextBox.h	/^        kOneLine_Mode,$/;"	e	enum:SkTextBox::Mode
kOneLine_Mode	views/SkTextBox.h	/^        kOneLine_Mode,$/;"	e	enum:SkTextBox::Mode
kOne_BlendCoeff	gpu/GrTypes.h	/^    kOne_BlendCoeff,     \/\/<! 1$/;"	e	enum:GrBlendCoeff
kOne_Coeff	core/SkXfermode.h	/^        kOne_Coeff,     \/** 1 *\/$/;"	e	enum:SkXfermode::Coeff
kOnlyPerspectiveValid_Mask	core/SkMatrix.h	/^        kOnlyPerspectiveValid_Mask = 0x40,$/;"	e	enum:SkMatrix::__anon9
kOpCount	core/SkRegion.h	/^        kOpCount = kReplace_Op + 1$/;"	e	enum:SkRegion::__anon15
kOpacity	svg/SkSVGPaintState.h	/^        kOpacity,$/;"	e	enum:SkSVGPaint::Field
kOpaqueAlpha_Flag	core/SkShader.h	/^        kOpaqueAlpha_Flag  = 0x01,$/;"	e	enum:SkShader::Flags
kOpenGL_Fixed_GrEngine	gpu/GrTypes.h	/^    kOpenGL_Fixed_GrEngine,$/;"	e	enum:GrEngine
kOpenGL_Shaders_GrEngine	gpu/GrTypes.h	/^    kOpenGL_Shaders_GrEngine,$/;"	e	enum:GrEngine
kOrientCount	views/SkStackViewLayout.h	/^        kOrientCount$/;"	e	enum:SkStackViewLayout::Orient
kOther_Font	core/SkAdvancedTypefaceMetrics.h	/^        kOther_Font,$/;"	e	enum:SkAdvancedTypefaceMetrics::FontType
kOuter_BlurStyle	effects/SkBlurMaskFilter.h	/^        kOuter_BlurStyle,   \/\/!< nothing inside, fuzzy outside$/;"	e	enum:SkBlurMaskFilter::BlurStyle
kOuter_BlurType	core/SkMaskFilter.h	/^        kOuter_BlurType,   \/\/!< nothing inside, fuzzy outside$/;"	e	enum:SkMaskFilter::BlurType
kOverlay_Mode	core/SkXfermode.h	/^        kOverlay_Mode,$/;"	e	enum:SkXfermode::Mode
kOverlay_Mode	effects/SkPorterDuff.h	/^        kOverlay_Mode,$/;"	e	enum:SkPorterDuff::Mode
kOverrideColor_BlurFlag	effects/SkBlurDrawLooper.h	/^        kOverrideColor_BlurFlag     = 0x02,$/;"	e	enum:SkBlurDrawLooper::BlurFlags
kPMColorAlias	core/SkDevice.h	/^    static const SkCanvas::Config8888 kPMColorAlias;$/;"	m	class:SkDevice
kPNG_Format	images/SkImageDecoder.h	/^        kPNG_Format,$/;"	e	enum:SkImageDecoder::Format
kPNG_Type	images/SkImageEncoder.h	/^        kPNG_Type$/;"	e	enum:SkImageEncoder::Type
kPackCount	views/SkStackViewLayout.h	/^        kPackCount$/;"	e	enum:SkStackViewLayout::Pack
kPaint_Type	core/SkDrawFilter.h	/^        kPaint_Type,$/;"	e	enum:SkDrawFilter::Type
kPartiallyDifferent	animator/SkAnimator.h	/^        kPartiallyDifferent$/;"	e	enum:SkAnimator::DifferenceType
kPathEffect_Bit	effects/SkLayerDrawLooper.h	/^        kPathEffect_Bit = 1 << 2,   \/\/!< use this layer's patheffect$/;"	e	enum:SkLayerDrawLooper::Bits
kPathEffect_SkDescriptorTag	core/SkScalerContext.h	/^#define kPathEffect_SkDescriptorTag /;"	d
kPathFillCount	gpu/GrTypes.h	/^    kPathFillCount$/;"	e	enum:GrPathFill
kPath_ClipType	gpu/GrTypes.h	/^    kPath_ClipType$/;"	e	enum:GrClipType
kPath_RectType	core/SkDraw.h	/^        kPath_RectType$/;"	e	enum:SkDraw::RectType
kPath_Type	core/SkDrawFilter.h	/^        kPath_Type,$/;"	e	enum:SkDrawFilter::Type
kPerspective_Mask	core/SkMatrix.h	/^        kPerspective_Mask   = 0x08   \/\/!< set if the matrix is in perspective$/;"	e	enum:SkMatrix::TypeMask
kPerspective_MatrixClass	core/SkShader.h	/^        kPerspective_MatrixClass        \/\/ slow perspective, need to mappoints each pixel$/;"	e	enum:SkShader::MatrixClass
kPlus_Mode	core/SkXfermode.h	/^        kPlus_Mode,$/;"	e	enum:SkXfermode::Mode
kPoint_Type	core/SkDrawFilter.h	/^        kPoint_Type,$/;"	e	enum:SkDrawFilter::Type
kPoints_PointMode	core/SkCanvas.h	/^        kPoints_PointMode,$/;"	e	enum:SkCanvas::PointMode
kPoints_PrimitiveType	gpu/GrTypes.h	/^    kPoints_PrimitiveType,$/;"	e	enum:GrPrimitiveType
kPolygon_PointMode	core/SkCanvas.h	/^        kPolygon_PointMode$/;"	e	enum:SkCanvas::PointMode
kPower_SkKey	views/SkKey.h	/^    kPower_SkKey,   \/\/!< power button - same$/;"	e	enum:SkKey
kPreAllocElements	gpu/GrClip.h	/^        kPreAllocElements = 4,$/;"	e	enum:GrClip::__anon30
kPrev_FocusDirection	views/SkView.h	/^        kPrev_FocusDirection,$/;"	e	enum:SkView::FocusDirection
kProbe_GrGLCapability	gpu/GrGLInterface.h	/^    kProbe_GrGLCapability = -1$/;"	e	enum:GrGLCapability
kProgramStageKeyBits	gpu/GrProgramStageFactory.h	/^        kProgramStageKeyBits = 10,$/;"	e	enum:GrProgramStageFactory::__anon33
kProgress_SkinEnum	views/SkWidgetViews.h	/^    kProgress_SkinEnum,$/;"	e	enum:SkinEnum
kProgress_WidgetEnum	views/SkWidgetViews.h	/^    kProgress_WidgetEnum,       \/\/!< <sk-progress>$/;"	e	enum:SkWidgetEnum
kPtr_Type	core/SkMetaData.h	/^        kPtr_Type,$/;"	e	enum:SkMetaData::Type
kPublicBlendCoeffCount	gpu/GrTypes.h	/^    kPublicBlendCoeffCount$/;"	e	enum:GrBlendCoeff
kQuad_SegmentMask	core/SkPath.h	/^        kQuad_SegmentMask   = 1 << 1,$/;"	e	enum:SkPath::SegmentMask
kQuad_Verb	core/SkPath.h	/^        kQuad_Verb,     \/\/!< iter.next returns 3 points$/;"	e	enum:SkPath::Verb
kQuadratic_PathCmd	gpu/GrTypes.h	/^    kQuadratic_PathCmd, \/\/!< Adds a quadratic segment$/;"	e	enum:GrPathCmd
kRGBA_4444_GrPixelConfig	gpu/GrTypes.h	/^    kRGBA_4444_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kRGBA_8888_PM_GrPixelConfig	gpu/GrTypes.h	/^    kRGBA_8888_PM_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kRGBA_8888_UPM_GrPixelConfig	gpu/GrTypes.h	/^    kRGBA_8888_UPM_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kRGBA_Premul_Config8888	core/SkCanvas.h	/^        kRGBA_Premul_Config8888,$/;"	e	enum:SkCanvas::Config8888
kRGBA_Unpremul_Config8888	core/SkCanvas.h	/^        kRGBA_Unpremul_Config8888$/;"	e	enum:SkCanvas::Config8888
kRGB_565_Config	SkBitmap.h	/^        kRGB_565_Config,    \/\/!< 16-bits per pixel, (see SkColorPriv.h for packing)$/;"	e	enum:SkBitmap::Config
kRGB_565_Config	core/SkBitmap.h	/^        kRGB_565_Config,    \/\/!< 16-bits per pixel, (see SkColorPriv.h for packing)$/;"	e	enum:SkBitmap::Config
kRGB_565_GrPixelConfig	gpu/GrTypes.h	/^    kRGB_565_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kRGB_Horizontal_LCDConfig	core/SkDeviceProfile.h	/^        kRGB_Horizontal_LCDConfig,$/;"	e	enum:SkDeviceProfile::LCDConfig
kRGB_LCDOrder	SkFontHost.h	/^        kRGB_LCDOrder = 0,    \/\/!< this is the default$/;"	e	enum:SkFontHost::LCDOrder
kRGB_LCDOrder	core/SkFontHost.h	/^        kRGB_LCDOrder = 0,    \/\/!< this is the default$/;"	e	enum:SkFontHost::LCDOrder
kRGB_Vertical_LCDConfig	core/SkDeviceProfile.h	/^        kRGB_Vertical_LCDConfig,$/;"	e	enum:SkDeviceProfile::LCDConfig
kRLE_Index8_Config	SkBitmap.h	/^        kRLE_Index8_Config,$/;"	e	enum:SkBitmap::Config
kRLE_Index8_Config	core/SkBitmap.h	/^        kRLE_Index8_Config,$/;"	e	enum:SkBitmap::Config
kR_Axis	effects/SkColorMatrix.h	/^        kR_Axis = 0,$/;"	e	enum:SkColorMatrix::Axis
kRadial2_GradientType	core/SkShader.h	/^        kRadial2_GradientType,$/;"	e	enum:SkShader::GradientType
kRadial2_SampleMode	gpu/GrSamplerState.h	/^        kRadial2_SampleMode,    \/\/!< treat as 2-point radial gradient$/;"	e	enum:GrSamplerState::SampleMode
kRadial_BitmapType	core/SkShader.h	/^        kRadial_BitmapType, \/\/<! Access bitmap by transforming local coordinates$/;"	e	enum:SkShader::BitmapType
kRadial_GradientType	core/SkShader.h	/^        kRadial_GradientType,$/;"	e	enum:SkShader::GradientType
kRadial_SampleMode	gpu/GrSamplerState.h	/^        kRadial_SampleMode,     \/\/!< treat as radial gradient$/;"	e	enum:GrSamplerState::SampleMode
kRange	core/SkAdvancedTypefaceMetrics.h	/^            kRange,    \/\/ Advances for a range: fAdvance.count = fEndID-fStartID$/;"	e	enum:SkAdvancedTypefaceMetrics::AdvanceMetric::MetricType
kRasterizer_SkDescriptorTag	core/SkScalerContext.h	/^#define kRasterizer_SkDescriptorTag /;"	d
kReadAtom_Status	pipe/SkGPipe.h	/^        kReadAtom_Status\/\/!< finished reading an atom$/;"	e	enum:SkGPipeReader::Status
kRead_SkFILE_Flag	core/SkOSFile.h	/^    kRead_SkFILE_Flag   = 0x01,$/;"	e	enum:SkFILE_Flags
kRec_SkDescriptorTag	core/SkScalerContext.h	/^#define kRec_SkDescriptorTag /;"	d
kRectRegionRuns	core/SkRegion.h	/^        kRectRegionRuns = 7$/;"	e	enum:SkRegion::__anon16
kRectStaysRect_Mask	core/SkMatrix.h	/^        kRectStaysRect_Mask = 0x10,$/;"	e	enum:SkMatrix::__anon9
kRect_ClipType	core/SkCanvas.h	/^        kRect_ClipType,$/;"	e	enum:SkCanvas::ClipType
kRect_ClipType	gpu/GrTypes.h	/^    kRect_ClipType,$/;"	e	enum:GrClipType
kRect_Type	core/SkDrawFilter.h	/^        kRect_Type,$/;"	e	enum:SkDrawFilter::Type
kRenderTarget_GrPlatformTextureFlag	gpu/GrTypes.h	/^    kRenderTarget_GrPlatformTextureFlag      = 0x1,$/;"	e	enum:GrPlatformTextureFlags
kRenderTarget_GrTextureFlagBit	gpu/GrTypes.h	/^    kRenderTarget_GrTextureFlagBit  = 0x1,  $/;"	e	enum:GrTextureFlags
kRepeat_TileMode	core/SkShader.h	/^        kRepeat_TileMode,$/;"	e	enum:SkShader::TileMode
kRepeat_WrapMode	gpu/GrSamplerState.h	/^        kRepeat_WrapMode,$/;"	e	enum:GrSamplerState::WrapMode
kReplace_Op	core/SkRegion.h	/^        kReplace_Op     \/\/!< replace the dst region with the op region$/;"	e	enum:SkRegion::Op
kReset	utils/SkInterpolator.h	/^        kReset = 2,$/;"	e	enum:SkInterpolatorBase::Flags
kRestore_Verb	utils/SkDumpCanvas.h	/^        kRestore_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kReturnNil_AllocFailType	core/SkChunkAlloc.h	/^        kReturnNil_AllocFailType,$/;"	e	enum:SkChunkAlloc::AllocFailType
kReuse_OnShrink	SkTypes.h	/^        kReuse_OnShrink$/;"	e	enum:SkAutoMalloc::OnShrink
kReuse_OnShrink	core/SkTypes.h	/^        kReuse_OnShrink$/;"	e	enum:SkAutoMalloc::OnShrink
kReverseDifference_Op	core/SkRegion.h	/^        kReverseDifference_Op,$/;"	e	enum:SkRegion::Op
kRight	utils/SkBoundaryPatch.h	/^        kRight  = 1,$/;"	e	enum:SkBoundary::Edge
kRightSoftKey_SkKey	views/SkKey.h	/^    kRightSoftKey_SkKey,$/;"	e	enum:SkKey
kRight_Align	core/SkPaint.h	/^        kRight_Align,$/;"	e	enum:SkPaint::Align
kRight_Side	core/SkPoint.h	/^        kRight_Side =  1$/;"	e	enum:SkPoint::Side
kRight_SkKey	views/SkKey.h	/^    kRight_SkKey,$/;"	e	enum:SkKey
kRotate_Style	effects/Sk1DPathEffect.h	/^        kRotate_Style,      \/\/ rotate the shape about its center$/;"	e	enum:SkPath1DPathEffect::Style
kRound_Cap	core/SkPaint.h	/^        kRound_Cap,     \/\/!< begin\/end contours with a semi-circle extension$/;"	e	enum:SkPaint::Cap
kRound_DivOption	core/Sk64.h	/^        kRound_DivOption    \/\/!< round the result when calling div()$/;"	e	enum:Sk64::DivOptions
kRound_Join	core/SkPaint.h	/^        kRound_Join,    \/\/!< connect path segments with a round join$/;"	e	enum:SkPaint::Join
kRun	core/SkAdvancedTypefaceMetrics.h	/^            kRun       \/\/ fStartID-fEndID have same advance: fAdvance.count = 1$/;"	e	enum:SkAdvancedTypefaceMetrics::AdvanceMetric::MetricType
kRunTypeSentinel	core/SkRegion.h	/^        kRunTypeSentinel = 0x7FFFFFFF$/;"	e	enum:SkRegion::__anon14
kS32_Type	core/SkMetaData.h	/^        kS32_Type,$/;"	e	enum:SkMetaData::Type
kSA_BlendCoeff	gpu/GrTypes.h	/^    kSA_BlendCoeff,      \/\/<! src alpha$/;"	e	enum:GrBlendCoeff
kSA_Coeff	core/SkXfermode.h	/^        kSA_Coeff,      \/** src alpha *\/$/;"	e	enum:SkXfermode::Coeff
kSC_BlendCoeff	gpu/GrTypes.h	/^    kSC_BlendCoeff,      \/\/<! src color$/;"	e	enum:GrBlendCoeff
kSC_Coeff	core/SkXfermode.h	/^        kSC_Coeff,      \/** src color *\/$/;"	e	enum:SkXfermode::Coeff
kSaveLayer_Usage	core/SkDevice.h	/^       kSaveLayer_Usage  \/\/ <! internal use only$/;"	e	enum:SkDevice::Usage
kSave_Verb	utils/SkDumpCanvas.h	/^        kSave_Verb,$/;"	e	enum:SkDumpCanvas::Verb
kScalar_Type	core/SkMetaData.h	/^        kScalar_Type,$/;"	e	enum:SkMetaData::Type
kScale_Mask	core/SkMatrix.h	/^        kScale_Mask         = 0x02,  \/\/!< set if the matrix has X or Y scale$/;"	e	enum:SkMatrix::TypeMask
kScreen_Mode	core/SkXfermode.h	/^        kScreen_Mode = kCoeffModesCnt,$/;"	e	enum:SkXfermode::Mode
kScreen_Mode	effects/SkPorterDuff.h	/^        kScreen_Mode,   \/\/!< [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]$/;"	e	enum:SkPorterDuff::Mode
kScript_Style	core/SkAdvancedTypefaceMetrics.h	/^        kScript_Style      = 0x00008,$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kScroll_SkinEnum	views/SkWidgetViews.h	/^    kScroll_SkinEnum,$/;"	e	enum:SkinEnum
kScroll_WidgetEnum	views/SkWidgetViews.h	/^    kScroll_WidgetEnum,         \/\/!< <sk-scroll>$/;"	e	enum:SkWidgetEnum
kSelected_Height	views/SkWidgetViews.h	/^        kSelected_Height$/;"	e	enum:SkListView::Heights
kSend_SkKey	views/SkKey.h	/^    kSend_SkKey,    \/\/!< the green (talk) key$/;"	e	enum:SkKey
kSerif_Style	core/SkAdvancedTypefaceMetrics.h	/^        kSerif_Style       = 0x00002,$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kShader_Bit	effects/SkLayerDrawLooper.h	/^        kShader_Bit     = 1 << 4,   \/\/!< use this layer's shader$/;"	e	enum:SkLayerDrawLooper::Bits
kShift	core/SkPerspIter.h	/^        kShift  = 4,$/;"	e	enum:SkPerspIter::__anon11
kSinkNotFound_EventResult	views/SkEventSink.h	/^        kSinkNotFound_EventResult   \/\/!< no matching eventsink was found for the event's getSink().$/;"	e	enum:SkEventSink::EventResult
kSkBuildQuadArcStorage	core/SkGeometry.h	/^#define kSkBuildQuadArcStorage /;"	d
kSkKeyCount	views/SkKey.h	/^    kSkKeyCount$/;"	e	enum:SkKey
kSkia8888_PM_GrPixelConfig	gpu/GrTypes.h	/^    static const GrPixelConfig kSkia8888_PM_GrPixelConfig = kBGRA_8888_PM_GrPixelConfig;$/;"	v
kSkia8888_PM_GrPixelConfig	gpu/GrTypes.h	/^    static const GrPixelConfig kSkia8888_PM_GrPixelConfig = kRGBA_8888_PM_GrPixelConfig;$/;"	v
kSkia8888_UPM_GrPixelConfig	gpu/GrTypes.h	/^    static const GrPixelConfig kSkia8888_UPM_GrPixelConfig = kBGRA_8888_UPM_GrPixelConfig;$/;"	v
kSkia8888_UPM_GrPixelConfig	gpu/GrTypes.h	/^    static const GrPixelConfig kSkia8888_UPM_GrPixelConfig = kRGBA_8888_UPM_GrPixelConfig;$/;"	v
kSkinEnumCount	views/SkWidgetViews.h	/^    kSkinEnumCount$/;"	e	enum:SkinEnum
kSlider_Type	views/SkOSMenu.h	/^        kSlider_Type,$/;"	e	enum:SkOSMenu::Type
kSlight_FontHintLevel	core/SkDeviceProfile.h	/^        kSlight_FontHintLevel,$/;"	e	enum:SkDeviceProfile::FontHintLevel
kSlight_Hinting	core/SkPaint.h	/^        kSlight_Hinting        = 1,$/;"	e	enum:SkPaint::Hinting
kSlotCount	core/SkTDStack.h	/^        kSlotCount  = 8$/;"	e	enum:SkTDStack::__anon22
kSmallCaps_Style	core/SkAdvancedTypefaceMetrics.h	/^        kSmallCaps_Style   = 0x20000,$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kSoftLight_Mode	core/SkXfermode.h	/^        kSoftLight_Mode,$/;"	e	enum:SkXfermode::Mode
kSolid_BlurStyle	effects/SkBlurMaskFilter.h	/^        kSolid_BlurStyle,   \/\/!< solid inside, fuzzy outside$/;"	e	enum:SkBlurMaskFilter::BlurStyle
kSolid_BlurType	core/SkMaskFilter.h	/^        kSolid_BlurType,   \/\/!< solid inside, fuzzy outside$/;"	e	enum:SkMaskFilter::BlurType
kSpacingAlignCount	utils/SkTextBox.h	/^        kSpacingAlignCount$/;"	e	enum:SkTextBox::SpacingAlign
kSpacingAlignCount	views/SkTextBox.h	/^        kSpacingAlignCount$/;"	e	enum:SkTextBox::SpacingAlign
kSquare_Cap	core/SkPaint.h	/^        kSquare_Cap,    \/\/!< begin\/end contours with a half square extension$/;"	e	enum:SkPaint::Cap
kSrcATop_Mode	core/SkXfermode.h	/^        kSrcATop_Mode,  \/\/!< [Da, Sc * Da + (1 - Sa) * Dc]$/;"	e	enum:SkXfermode::Mode
kSrcATop_Mode	effects/SkPorterDuff.h	/^        kSrcATop_Mode,  \/\/!< [Da, Sc * Da + (1 - Sa) * Dc]$/;"	e	enum:SkPorterDuff::Mode
kSrcIn_Mode	core/SkXfermode.h	/^        kSrcIn_Mode,    \/\/!< [Sa * Da, Sc * Da]$/;"	e	enum:SkXfermode::Mode
kSrcIn_Mode	effects/SkPorterDuff.h	/^        kSrcIn_Mode,    \/\/!< [Sa * Da, Sc * Da]$/;"	e	enum:SkPorterDuff::Mode
kSrcOut_Mode	core/SkXfermode.h	/^        kSrcOut_Mode,   \/\/!< [Sa * (1 - Da), Sc * (1 - Da)]$/;"	e	enum:SkXfermode::Mode
kSrcOut_Mode	effects/SkPorterDuff.h	/^        kSrcOut_Mode,   \/\/!< [Sa * (1 - Da), Sc * (1 - Da)]$/;"	e	enum:SkPorterDuff::Mode
kSrcOver_Mode	core/SkXfermode.h	/^        kSrcOver_Mode,  \/\/!< [Sa + Da - Sa*Da, Rc = Sc + (1 - Sa)*Dc]$/;"	e	enum:SkXfermode::Mode
kSrcOver_Mode	effects/SkPorterDuff.h	/^        kSrcOver_Mode,  \/\/!< [Sa + Da - Sa*Da, Rc = Sc + (1 - Sa)*Dc]$/;"	e	enum:SkPorterDuff::Mode
kSrcPixelAlpha_Flag	core/SkBlitRow.h	/^        kSrcPixelAlpha_Flag = 0x02,$/;"	e	enum:SkBlitRow::Flags16
kSrcPixelAlpha_Flag32	core/SkBlitRow.h	/^        kSrcPixelAlpha_Flag32   = 1 << 1$/;"	e	enum:SkBlitRow::Flags32
kSrc_Mode	core/SkXfermode.h	/^        kSrc_Mode,      \/\/!< [Sa, Sc]$/;"	e	enum:SkXfermode::Mode
kSrc_Mode	effects/SkPorterDuff.h	/^        kSrc_Mode,      \/\/!< [Sa, Sc]$/;"	e	enum:SkPorterDuff::Mode
kStar_SkKey	views/SkKey.h	/^    kStar_SkKey,    \/\/!< the * key$/;"	e	enum:SkKey
kStart_Align	views/SkStackViewLayout.h	/^        kStart_Align,$/;"	e	enum:SkStackViewLayout::Align
kStart_Pack	views/SkStackViewLayout.h	/^        kStart_Pack,$/;"	e	enum:SkStackViewLayout::Pack
kStart_ScaleToFit	core/SkMatrix.h	/^        kStart_ScaleToFit,$/;"	e	enum:SkMatrix::ScaleToFit
kStart_SpacingAlign	utils/SkTextBox.h	/^        kStart_SpacingAlign,$/;"	e	enum:SkTextBox::SpacingAlign
kStart_SpacingAlign	views/SkTextBox.h	/^        kStart_SpacingAlign,$/;"	e	enum:SkTextBox::SpacingAlign
kStaticText_SkinEnum	views/SkWidgetViews.h	/^    kStaticText_SkinEnum,$/;"	e	enum:SkinEnum
kStopColor	svg/SkSVGPaintState.h	/^        kStopColor,$/;"	e	enum:SkSVGPaint::Field
kStopOpacity	svg/SkSVGPaintState.h	/^        kStopOpacity,$/;"	e	enum:SkSVGPaint::Field
kStorageIntCount	core/SkThread_platform.h	/^        kStorageIntCount = 64$/;"	e	enum:SkMutex::__anon25
kStorageSize	core/SkDescriptor.h	/^        kStorageSize =  sizeof(SkDescriptor)$/;"	e	enum:SkAutoDescriptor::__anon2
kStretch_Align	views/SkStackViewLayout.h	/^        kStretch_Align,$/;"	e	enum:SkStackViewLayout::Align
kStrikeThruText_Flag	core/SkPaint.h	/^        kStrikeThruText_Flag  = 0x10,   \/\/!< mask to enable strike-thru text$/;"	e	enum:SkPaint::Flags
kString	utils/SkJSON.h	/^        kString,$/;"	e	enum:SkJSON::Type
kString_Type	core/SkMetaData.h	/^        kString_Type,$/;"	e	enum:SkMetaData::Type
kStroke	svg/SkSVGPaintState.h	/^        kStroke,$/;"	e	enum:SkSVGPaint::Field
kStrokeAndFill_Style	core/SkPaint.h	/^        kStrokeAndFill_Style,   \/\/!< fill and stroke the geometry$/;"	e	enum:SkPaint::Style
kStroke_Dasharray	svg/SkSVGPaintState.h	/^        kStroke_Dasharray,$/;"	e	enum:SkSVGPaint::Field
kStroke_Linecap	svg/SkSVGPaintState.h	/^        kStroke_Linecap,$/;"	e	enum:SkSVGPaint::Field
kStroke_Linejoin	svg/SkSVGPaintState.h	/^        kStroke_Linejoin,$/;"	e	enum:SkSVGPaint::Field
kStroke_Miterlimit	svg/SkSVGPaintState.h	/^        kStroke_Miterlimit,$/;"	e	enum:SkSVGPaint::Field
kStroke_RectType	core/SkDraw.h	/^        kStroke_RectType,$/;"	e	enum:SkDraw::RectType
kStroke_Style	core/SkPaint.h	/^        kStroke_Style,          \/\/!< stroke the geometry$/;"	e	enum:SkPaint::Style
kStroke_Width	svg/SkSVGPaintState.h	/^        kStroke_Width,$/;"	e	enum:SkSVGPaint::Field
kStyle	svg/SkSVGPaintState.h	/^        kStyle,$/;"	e	enum:SkSVGPaint::Field
kStyleCount	core/SkPaint.h	/^        kStyleCount$/;"	e	enum:SkPaint::Style
kStyleCount	effects/Sk1DPathEffect.h	/^        kStyleCount$/;"	e	enum:SkPath1DPathEffect::Style
kStyle_Bit	effects/SkLayerDrawLooper.h	/^        kStyle_Bit      = 1 << 0,   \/\/!< use this layer's Style\/stroke settings$/;"	e	enum:SkLayerDrawLooper::Bits
kSubBits	core/SkScalerContext.h	/^        kSubBits = 2,$/;"	e	enum:SkGlyph::__anon17
kSubMask	core/SkScalerContext.h	/^        kSubMask = ((1 << kSubBits) - 1),$/;"	e	enum:SkGlyph::__anon17
kSubShift	core/SkScalerContext.h	/^        kSubShift = 24, \/\/ must be large enough for glyphs and unichars$/;"	e	enum:SkGlyph::__anon17
kSubShiftX	core/SkScalerContext.h	/^        kSubShiftX = kSubBits,$/;"	e	enum:SkGlyph::__anon17
kSubShiftY	core/SkScalerContext.h	/^        kSubShiftY = 0$/;"	e	enum:SkGlyph::__anon17
kSubpixelPositioning_Flag	core/SkScalerContext.h	/^        kSubpixelPositioning_Flag = 0x0010,$/;"	e	enum:SkScalerContext::Flags
kSubpixelText_Flag	core/SkPaint.h	/^        kSubpixelText_Flag    = 0x80,   \/\/!< mask to enable subpixel text positioning$/;"	e	enum:SkPaint::Flags
kSweep_BitmapType	core/SkShader.h	/^        kSweep_BitmapType,  \/\/<! Access bitmap by transforming local coordinates$/;"	e	enum:SkShader::BitmapType
kSweep_GradientType	core/SkShader.h	/^        kSweep_GradientType,$/;"	e	enum:SkShader::GradientType
kSweep_SampleMode	gpu/GrSamplerState.h	/^        kSweep_SampleMode,      \/\/!< treat as sweep gradient$/;"	e	enum:GrSamplerState::SampleMode
kSwitch_Type	views/SkOSMenu.h	/^        kSwitch_Type,$/;"	e	enum:SkOSMenu::Type
kSymbolic_Style	core/SkAdvancedTypefaceMetrics.h	/^        kSymbolic_Style    = 0x00004,$/;"	e	enum:SkAdvancedTypefaceMetrics::StyleFlags
kTamil_FallbackScript	ports/SkTypeface_android.h	/^    kTamil_FallbackScript,$/;"	e	enum:FallbackScripts
kTargetColor_Mode	effects/SkAvoidXfermode.h	/^        kTargetColor_Mode   \/\/!< draw only on top of the opColor$/;"	e	enum:SkAvoidXfermode::Mode
kTerminal	svg/SkSVGPaintState.h	/^        kTerminal$/;"	e	enum:SkSVGPaint::Field
kTextField_Type	views/SkOSMenu.h	/^        kTextField_Type,$/;"	e	enum:SkOSMenu::Type
kTextSkewX_Bit	effects/SkLayerDrawLooper.h	/^        kTextSkewX_Bit  = 1 << 1,   \/\/!< use this layer's textskewx$/;"	e	enum:SkLayerDrawLooper::Bits
kText_Type	core/SkDrawFilter.h	/^        kText_Type$/;"	e	enum:SkDrawFilter::Type
kText_Type	xml/SkDOM.h	/^        kText_Type$/;"	e	enum:SkDOM::Type
kText_WidgetEnum	views/SkWidgetViews.h	/^    kText_WidgetEnum,           \/\/!< <sk-text>$/;"	e	enum:SkWidgetEnum
kThai_FallbackScript	ports/SkTypeface_android.h	/^    kThai_FallbackScript,$/;"	e	enum:FallbackScripts
kThrow_AllocFailType	core/SkChunkAlloc.h	/^        kThrow_AllocFailType$/;"	e	enum:SkChunkAlloc::AllocFailType
kTileModeCount	core/SkShader.h	/^        kTileModeCount$/;"	e	enum:SkShader::TileMode
kToUnicode_PerGlyphInfo	core/SkAdvancedTypefaceMetrics.h	/^      kToUnicode_PerGlyphInfo  = 0x8  \/\/ Populate ToUnicode table, ignored$/;"	e	enum:SkAdvancedTypefaceMetrics::PerGlyphInfo
kTop	utils/SkBoundaryPatch.h	/^        kTop    = 0,$/;"	e	enum:SkBoundary::Edge
kTotalStages	gpu/GrPaint.h	/^        kTotalStages = kMaxTextures + kMaxMasks,$/;"	e	enum:GrPaint::__anon32
kTransform	svg/SkSVGPaintState.h	/^        kTransform,$/;"	e	enum:SkSVGPaint::Field
kTranslate_Mask	core/SkMatrix.h	/^        kTranslate_Mask     = 0x01,  \/\/!< set if the matrix has translation$/;"	e	enum:SkMatrix::TypeMask
kTranslate_State	views/SkTouchGesture.h	/^        kTranslate_State,$/;"	e	enum:SkTouchGesture::State
kTranslate_Style	effects/Sk1DPathEffect.h	/^        kTranslate_Style,   \/\/ translate the shape to each position$/;"	e	enum:SkPath1DPathEffect::Style
kTriState_Type	views/SkOSMenu.h	/^        kTriState_Type,$/;"	e	enum:SkOSMenu::Type
kTriangleFan_PrimitiveType	gpu/GrTypes.h	/^    kTriangleFan_PrimitiveType,$/;"	e	enum:GrPrimitiveType
kTriangleFan_VertexMode	core/SkCanvas.h	/^        kTriangleFan_VertexMode$/;"	e	enum:SkCanvas::VertexMode
kTriangleStrip_PrimitiveType	gpu/GrTypes.h	/^    kTriangleStrip_PrimitiveType,$/;"	e	enum:GrPrimitiveType
kTriangleStrip_VertexMode	core/SkCanvas.h	/^        kTriangleStrip_VertexMode,$/;"	e	enum:SkCanvas::VertexMode
kTriangles_PrimitiveType	gpu/GrTypes.h	/^    kTriangles_PrimitiveType,$/;"	e	enum:GrPrimitiveType
kTriangles_VertexMode	core/SkCanvas.h	/^        kTriangles_VertexMode,$/;"	e	enum:SkCanvas::VertexMode
kTrueType_Font	core/SkAdvancedTypefaceMetrics.h	/^        kTrueType_Font,$/;"	e	enum:SkAdvancedTypefaceMetrics::FontType
kTrunc_DivOption	core/Sk64.h	/^        kTrunc_DivOption,   \/\/!< truncate the result when calling div()$/;"	e	enum:Sk64::DivOptions
kTwoPointRadial_BitmapType	core/SkShader.h	/^        kTwoPointRadial_BitmapType,$/;"	e	enum:SkShader::BitmapType
kType1CID_Font	core/SkAdvancedTypefaceMetrics.h	/^        kType1CID_Font,$/;"	e	enum:SkAdvancedTypefaceMetrics::FontType
kType1_Font	core/SkAdvancedTypefaceMetrics.h	/^        kType1_Font,$/;"	e	enum:SkAdvancedTypefaceMetrics::FontType
kTypeCount	core/SkMetaData.h	/^        kTypeCount$/;"	e	enum:SkMetaData::Type
kUTF16_TextEncoding	core/SkPaint.h	/^        kUTF16_TextEncoding,    \/\/!< the text parameters are UTF16$/;"	e	enum:SkPaint::TextEncoding
kUTF32_TextEncoding	core/SkPaint.h	/^        kUTF32_TextEncoding,    \/\/!< the text parameters are UTF32$/;"	e	enum:SkPaint::TextEncoding
kUTF8_TextEncoding	core/SkPaint.h	/^        kUTF8_TextEncoding,     \/\/!< the text parameters are UTF8$/;"	e	enum:SkPaint::TextEncoding
kUnbuffered_DrawCategory	gpu/GrContext.h	/^        kUnbuffered_DrawCategory,    \/\/ last draw was not inserted in the draw buffer$/;"	e	enum:GrContext::DrawCategory
kUnderlineText_Flag	core/SkPaint.h	/^        kUnderlineText_Flag   = 0x08,   \/\/!< mask to enable underline text$/;"	e	enum:SkPaint::Flags
kUnion_Op	core/SkRegion.h	/^        kUnion_Op,      \/\/!< union (inclusive-or) the two regions$/;"	e	enum:SkRegion::Op
kUnknownAttributeName	xml/SkXMLParser.h	/^        kUnknownAttributeName,$/;"	e	enum:SkXMLParserError::ErrorCode
kUnknownElement	xml/SkXMLParser.h	/^        kUnknownElement,$/;"	e	enum:SkXMLParserError::ErrorCode
kUnknownError	xml/SkXMLParser.h	/^        kUnknownError$/;"	e	enum:SkXMLParserError::ErrorCode
kUnknown_CheckState	views/SkWidgetViews.h	/^        kUnknown_CheckState     \/\/!< inflate: check-state="unknown"$/;"	e	enum:SkCheckButtonView::CheckState
kUnknown_Convexity	core/SkPath.h	/^        kUnknown_Convexity,$/;"	e	enum:SkPath::Convexity
kUnknown_Format	images/SkImageDecoder.h	/^        kUnknown_Format,$/;"	e	enum:SkImageDecoder::Format
kUnknown_GrPixelConfig	gpu/GrTypes.h	/^    kUnknown_GrPixelConfig,$/;"	e	enum:GrPixelConfig
kUnknown_Mask	core/SkMatrix.h	/^        kUnknown_Mask = 0x80,$/;"	e	enum:SkMatrix::__anon9
kUnknown_State	views/SkWidget.h	/^        kUnknown_State  \/\/!< XML: buttonState="unknown"$/;"	e	enum:SkButtonWidget::State
kUnused_State	pdf/SkPDFStream.h	/^        kUnused_State,         \/\/!< The stream hasn't been requested yet.$/;"	e	enum:SkPDFStream::State
kUp_SkKey	views/SkKey.h	/^    kUp_SkKey,$/;"	e	enum:SkKey
kUp_State	views/SkView.h	/^            kUp_State$/;"	e	enum:SkView::Click::State
kUsePathBoundsForClip_RecordingFlag	core/SkPicture.h	/^        kUsePathBoundsForClip_RecordingFlag = 0x01$/;"	e	enum:SkPicture::RecordingFlags
kVAdvance_PerGlyphInfo	core/SkAdvancedTypefaceMetrics.h	/^      kVAdvance_PerGlyphInfo   = 0x2, \/\/ Populate vertical advance data.$/;"	e	enum:SkAdvancedTypefaceMetrics::PerGlyphInfo
kVector_Capability	core/SkDevice.h	/^        kVector_Capability = 0x2,  \/\/!< mask indicating a vector representation$/;"	e	enum:SkDevice::Capabilities
kVerticalText_Flag	core/SkPaint.h	/^        kVerticalText_Flag    = 0x1000,$/;"	e	enum:SkPaint::Flags
kVertical_Flag	core/SkScalerContext.h	/^        kVertical_Flag            = 0x0040,$/;"	e	enum:SkScalerContext::Flags
kVertical_LCDOrientation	SkFontHost.h	/^        kVertical_LCDOrientation   = 1$/;"	e	enum:SkFontHost::LCDOrientation
kVertical_LCDOrientation	core/SkFontHost.h	/^        kVertical_LCDOrientation   = 1$/;"	e	enum:SkFontHost::LCDOrientation
kVertical_Orient	views/SkStackViewLayout.h	/^        kVertical_Orient,$/;"	e	enum:SkStackViewLayout::Orient
kVisible_Mask	views/SkView.h	/^        kVisible_Mask   = 1 << kVisible_Shift,      \/\/!< set if the view is visible$/;"	e	enum:SkView::Flag_Mask
kVisible_Shift	views/SkView.h	/^        kVisible_Shift,$/;"	e	enum:SkView::Flag_Shift
kVolDown_SkKey	views/SkKey.h	/^    kVolDown_SkKey, \/\/!< volume down - same$/;"	e	enum:SkKey
kVolUp_SkKey	views/SkKey.h	/^    kVolUp_SkKey,   \/\/!< volume up - match android$/;"	e	enum:SkKey
kWBMP_Format	images/SkImageDecoder.h	/^        kWBMP_Format,$/;"	e	enum:SkImageDecoder::Format
kWidgetEnumCount	views/SkWidgetViews.h	/^    kWidgetEnumCount$/;"	e	enum:SkWidgetEnum
kWinding_FillType	core/SkPath.h	/^        kWinding_FillType,$/;"	e	enum:SkPath::FillType
kWinding_PathFill	gpu/GrTypes.h	/^    kWinding_PathFill,$/;"	e	enum:GrPathFill
kWrite_SkFILE_Flag	core/SkOSFile.h	/^    kWrite_SkFILE_Flag  = 0x02$/;"	e	enum:SkFILE_Flags
kXOR_Op	core/SkRegion.h	/^        kXOR_Op,        \/\/!< exclusive-or the two regions$/;"	e	enum:SkRegion::Op
kX_FilterDirection	gpu/GrSamplerState.h	/^        kX_FilterDirection,$/;"	e	enum:GrSamplerState::FilterDirection
kX_SkAxisAlignment	core/SkScalerContext.h	/^    kX_SkAxisAlignment,$/;"	e	enum:SkAxisAlignment
kXfermode_Bit	effects/SkLayerDrawLooper.h	/^        kXfermode_Bit   = 1 << 6,   \/\/!< use this layer's xfermode$/;"	e	enum:SkLayerDrawLooper::Bits
kXor_Mode	core/SkXfermode.h	/^        kXor_Mode,      \/\/!< [Sa + Da - 2 * Sa * Da, Sc * (1 - Da) + (1 - Sa) * Dc]$/;"	e	enum:SkXfermode::Mode
kXor_Mode	effects/SkPorterDuff.h	/^        kXor_Mode,      \/\/!< [Sa + Da - 2 * Sa * Da, Sc * (1 - Da) + (1 - Sa) * Dc]$/;"	e	enum:SkPorterDuff::Mode
kY_FilterDirection	gpu/GrSamplerState.h	/^        kY_FilterDirection,$/;"	e	enum:GrSamplerState::FilterDirection
kY_SkAxisAlignment	core/SkScalerContext.h	/^    kY_SkAxisAlignment$/;"	e	enum:SkAxisAlignment
kZero_BlendCoeff	gpu/GrTypes.h	/^    kZero_BlendCoeff,    \/\/<! 0$/;"	e	enum:GrBlendCoeff
kZero_Coeff	core/SkXfermode.h	/^        kZero_Coeff,    \/** 0 *\/$/;"	e	enum:SkXfermode::Coeff
kZoom_State	views/SkTouchGesture.h	/^        kZoom_State,$/;"	e	enum:SkTouchGesture::State
key	pdf/SkPDFTypes.h	/^      SkPDFName* key;$/;"	m	struct:SkPDFDict::Rec
lc	core/SkTSearch.h	/^    const char* lc() const { return fLC; }$/;"	f	class:SkAutoAsciiToLC
left	SkRect.h	/^    SkScalar    left() const { return fLeft; }$/;"	f	struct:SkRect
left	SkRect.h	/^    int left() const { return fLeft; }$/;"	f	struct:SkIRect
left	core/SkRect.h	/^    SkScalar    left() const { return fLeft; }$/;"	f	struct:SkRect
left	core/SkRect.h	/^    int left() const { return fLeft; }$/;"	f	struct:SkIRect
length	core/SkPoint.h	/^    SkScalar length() const { return SkPoint::Length(fX, fY); }$/;"	f	struct:SkPoint
length	core/SkTSearch.h	/^    size_t      length() const { return fLength; }$/;"	f	class:SkAutoAsciiToLC
lengthSqd	core/SkPoint.h	/^    SkScalar lengthSqd() const {$/;"	f	struct:SkPoint
levels	SkBitmap.cpp	/^    MipLevel* levels() { return (MipLevel*)(this + 1); }$/;"	f	struct:SkBitmap::MipMap
levels	SkBitmap.cpp	/^    const MipLevel* levels() const { return (const MipLevel*)(this + 1); }$/;"	f	struct:SkBitmap::MipMap
lineTo	core/SkPath.h	/^    void lineTo(const SkPoint& p) {$/;"	f	class:SkPath
locX	views/SkView.h	/^    SkScalar    locX() const { return fLoc.fX; }$/;"	f	class:SkView
locY	views/SkView.h	/^    SkScalar    locY() const { return fLoc.fY; }$/;"	f	class:SkView
lockColors	SkBitmap.h	/^    SkPMColor* lockColors() {$/;"	f	class:SkColorTable
lockColors	SkBitmap.h	/^    const SkPMColor* lockColors(SkColorTable* ctable) {$/;"	f	class:SkAutoLockColors
lockColors	SkBitmap.h	/^    const SkPMColor* lockColors(const SkBitmap& bm) {$/;"	f	class:SkAutoLockColors
lockColors	core/SkBitmap.h	/^    SkPMColor* lockColors() {$/;"	f	class:SkColorTable
lockColors	core/SkBitmap.h	/^    const SkPMColor* lockColors(SkColorTable* ctable) {$/;"	f	class:SkAutoLockColors
lockColors	core/SkBitmap.h	/^    const SkPMColor* lockColors(const SkBitmap& bm) {$/;"	f	class:SkAutoLockColors
lockPixels	SkBitmap.cpp	/^void SkBitmap::lockPixels() const {$/;"	f	class:SkBitmap
lockPixels	SkPixelRef.cpp	/^void SkPixelRef::lockPixels() {$/;"	f	class:SkPixelRef
lockPixelsAreWritable	SkBitmap.cpp	/^bool SkBitmap::lockPixelsAreWritable() const {$/;"	f	class:SkBitmap
lockPixelsAreWritable	SkPixelRef.cpp	/^bool SkPixelRef::lockPixelsAreWritable() const {$/;"	f	class:SkPixelRef
logicalToVisualIndex	views/SkWidget.h	/^    int     logicalToVisualIndex(int index) const { return index - fScrollIndex; }$/;"	f	class:SkListView
logicalToVisualIndex	views/SkWidget.h	/^    int     logicalToVisualIndex(int index) const { return index; }$/;"	f	class:SkGridView
logicalToVisualIndex	views/SkWidgetViews.h	/^    int     logicalToVisualIndex(int index) const { return index - fScrollIndex; }$/;"	f	class:SkListView
m_anchorPoint	utils/SkLayer.h	/^    SkPoint     m_anchorPoint;$/;"	m	class:SkLayer
m_children	utils/SkLayer.h	/^    SkTDArray<SkLayer*> m_children;$/;"	m	class:SkLayer
m_opacity	utils/SkLayer.h	/^    SkScalar    m_opacity;$/;"	m	class:SkLayer
m_position	utils/SkLayer.h	/^    SkPoint     m_position;$/;"	m	class:SkLayer
m_size	utils/SkLayer.h	/^    SkSize      m_size;$/;"	m	class:SkLayer
map	utils/SkMatrix44.h	/^    void map(SkScalar vec[4]) const {$/;"	f	class:SkMatrix44
mapPoint	utils/SkCamera.h	/^    void mapPoint(SkPoint3D* v) const$/;"	f	struct:SkMatrix3D
mapPoints	core/SkMatrix.h	/^    void mapPoints(SkPoint pts[], int count) const {$/;"	f	class:SkMatrix
mapPointsWithStride	core/SkMatrix.h	/^    void mapPointsWithStride(SkPoint dst[], SkPoint src[],$/;"	f	class:SkMatrix
mapPointsWithStride	core/SkMatrix.h	/^    void mapPointsWithStride(SkPoint pts[], size_t stride, int count) const {$/;"	f	class:SkMatrix
mapRect	core/SkMatrix.h	/^    bool mapRect(SkRect* rect) const {$/;"	f	class:SkMatrix
mapVector	utils/SkCamera.h	/^    void mapVector(SkVector3D* v) const$/;"	f	struct:SkMatrix3D
mapVectors	core/SkMatrix.h	/^    void mapVectors(SkVector vecs[], int count) const {$/;"	f	class:SkMatrix
mapXY	core/SkMatrix.h	/^    void mapXY(SkScalar x, SkScalar y, SkPoint* result) const {$/;"	f	class:SkMatrix
maskSampler	gpu/GrPaint.h	/^    GrSamplerState* maskSampler(int i) {$/;"	f	class:GrPaint
matrix	gpu/GrSamplerState.h	/^    GrMatrix* matrix() { return &fMatrix; }$/;"	f	class:GrSamplerState
measureText	core/SkPaint.h	/^    SkScalar measureText(const void* text, size_t length) const {$/;"	f	class:SkPaint
moveTo	core/SkPath.h	/^    void moveTo(const SkPoint& p) {$/;"	f	class:SkPath
mutex	core/SkPixelRef.h	/^    SkBaseMutex* mutex() const { return fMutex; }$/;"	f	class:SkPixelRef
name	core/SkMetaData.h	/^        char*       name() { return (char*)this->data() + fDataLen * fDataCount; }$/;"	f	struct:SkMetaData::Rec
name	core/SkMetaData.h	/^        const char* name() const { return (const char*)this->data() + fDataLen * fDataCount; }$/;"	f	struct:SkMetaData::Rec
name	gpu/GrCustomStage.h	/^    const char* name() const { return this->getFactory().name(); }$/;"	f	class:GrCustomStage
needsResolve	gpu/GrRenderTarget.h	/^    bool needsResolve() const { return !fResolveRect.isEmpty(); }$/;"	f	class:GrRenderTarget
negate	core/SkPoint.h	/^    void negate() { fX = -fX; fY = -fY; }$/;"	f	struct:SkIPoint
negate	core/SkPoint.h	/^    void negate() {$/;"	f	struct:SkPoint
new	core/SkPostConfig.h	/^    #define new /;"	d
newDecoder	images/SkImageDecoder.h	/^    virtual SkImageDecoder* newDecoder(SkStream* stream) {$/;"	f	class:SkDefaultImageDecoderFactory
next	core/SkPath.h	/^        Verb next(SkPoint pts[4], bool doConsumeDegerates = true) {$/;"	f	class:SkPath::Iter
next	core/SkTDict.h	/^        const char* next(T* value)$/;"	f	class:SkTDict::Iter
next	core/SkTRegistry.h	/^    const SkTRegistry* next() const { return fChain; }$/;"	f	class:SkTRegistry
next64	core/SkRandom.h	/^    void next64(Sk64* a) {$/;"	f	class:SkRandom
nextBits	core/SkRandom.h	/^    uint32_t nextBits(unsigned bitCount) {$/;"	f	class:SkRandom
nextRangeU	core/SkRandom.h	/^    uint32_t nextRangeU(uint32_t min, uint32_t max) {$/;"	f	class:SkRandom
nextS	core/SkRandom.h	/^    int32_t nextS() { return (int32_t)this->nextU(); }$/;"	f	class:SkRandom
nextS16	core/SkRandom.h	/^    S16CPU nextS16() { return this->nextS() >> 16; }$/;"	f	class:SkRandom
nextSFixed1	core/SkRandom.h	/^    SkFixed nextSFixed1() { return this->nextS() >> 15; }$/;"	f	class:SkRandom
nextSScalar1	core/SkRandom.h	/^    SkScalar nextSScalar1() { return SkFixedToScalar(this->nextSFixed1()); }$/;"	f	class:SkRandom
nextU	core/SkRandom.h	/^    uint32_t nextU() { uint32_t r = fSeed * kMul + kAdd; fSeed = r; return r; }$/;"	f	class:SkRandom
nextU16	core/SkRandom.h	/^    U16CPU nextU16() { return this->nextU() >> 16; }$/;"	f	class:SkRandom
nextUFixed1	core/SkRandom.h	/^    SkFixed nextUFixed1() { return this->nextU() >> 16; }$/;"	f	class:SkRandom
nextUScalar1	core/SkRandom.h	/^    SkScalar nextUScalar1() { return SkFixedToScalar(this->nextUFixed1()); }$/;"	f	class:SkRandom
nonZero	core/Sk64.h	/^    SkBool  nonZero() const { return fHi | fLo; }$/;"	f	struct:Sk64
normalizeFixedX	gpu/GrTexture.h	/^    GrFixed normalizeFixedX(GrFixed x) const { GrAssert(GrIsPow2(fWidth));$/;"	f	class:GrTexture
normalizeFixedY	gpu/GrTexture.h	/^    GrFixed normalizeFixedY(GrFixed y) const { GrAssert(GrIsPow2(fHeight));$/;"	f	class:GrTexture
notifyPixelsChanged	SkBitmap.cpp	/^void SkBitmap::notifyPixelsChanged() const {$/;"	f	class:SkBitmap
notifyPixelsChanged	SkPixelRef.cpp	/^void SkPixelRef::notifyPixelsChanged() {$/;"	f	class:SkPixelRef
numSamples	gpu/GrRenderTarget.h	/^    int numSamples() const { return fSampleCnt; }$/;"	f	class:GrRenderTarget
objects	utils/SkJSON.h	/^        Object* const* objects() const {$/;"	f	class:SkJSON::Array
offset	SkRect.h	/^    void offset(SkScalar dx, SkScalar dy) {$/;"	f	struct:SkRect
offset	SkRect.h	/^    void offset(const SkIPoint& delta) {$/;"	f	struct:SkIRect
offset	SkRect.h	/^    void offset(const SkPoint& delta) {$/;"	f	struct:SkRect
offset	SkRect.h	/^    void offset(int32_t dx, int32_t dy) {$/;"	f	struct:SkIRect
offset	core/SkOrderedReadBuffer.h	/^    uint32_t offset() { return fReader.offset(); }$/;"	f	class:SkOrderedReadBuffer
offset	core/SkPath.h	/^    void offset(SkScalar dx, SkScalar dy) {$/;"	f	class:SkPath
offset	core/SkPoint.h	/^    void offset(SkScalar dx, SkScalar dy) {$/;"	f	struct:SkPoint
offset	core/SkReader32.h	/^    uint32_t offset() const { return fCurr - fBase; }$/;"	f	class:SkReader32
offset	core/SkRect.h	/^    void offset(SkScalar dx, SkScalar dy) {$/;"	f	struct:SkRect
offset	core/SkRect.h	/^    void offset(const SkIPoint& delta) {$/;"	f	struct:SkIRect
offset	core/SkRect.h	/^    void offset(const SkPoint& delta) {$/;"	f	struct:SkRect
offset	core/SkRect.h	/^    void offset(int32_t dx, int32_t dy) {$/;"	f	struct:SkIRect
onAddMenu	views/SkWindow.h	/^    virtual void onAddMenu(const SkOSMenu*) {};$/;"	f	class:SkWindow
onGetFocusView	views/SkView.h	/^    virtual bool    onGetFocusView(SkView**) const { return false; }$/;"	f	class:SkView
onIRect	core/SkBounder.h	/^    virtual bool onIRect(const SkIRect&) {$/;"	f	class:SkBounder
onIRectGlyph	core/SkBounder.h	/^    virtual bool onIRectGlyph(const SkIRect& r, const GlyphRec&) {$/;"	f	class:SkBounder
onLockPixelsAreWritable	SkPixelRef.cpp	/^bool SkPixelRef::onLockPixelsAreWritable() const {$/;"	f	class:SkPixelRef
onPDFSaved	views/SkWindow.h	/^    virtual void onPDFSaved(const char title[], const char desc[],$/;"	f	class:SkWindow
onReadPixels	SkPixelRef.cpp	/^bool SkPixelRef::onReadPixels(SkBitmap* dst, const SkIRect* subset) {$/;"	f	class:SkPixelRef
onRelease	gpu/GrTexture.h	/^    virtual void onRelease() {$/;"	f	class:GrTexture
onSetFocusView	views/SkView.h	/^    virtual bool    onSetFocusView(SkView*) { return false; }$/;"	f	class:SkView
onSetTitle	views/SkWindow.h	/^    virtual void onSetTitle(const char title[]) {}$/;"	f	class:SkWindow
onTextureReleaseRenderTarget	gpu/GrRenderTarget.h	/^    void onTextureReleaseRenderTarget() {$/;"	f	class:GrRenderTarget
onUpdateMenu	views/SkWindow.h	/^    virtual void onUpdateMenu(const SkOSMenu*) {};$/;"	f	class:SkWindow
op	core/SkRegion.h	/^    bool op(const SkIRect& rect, Op op) { return this->op(*this, rect, op); }$/;"	f	class:SkRegion
op	core/SkRegion.h	/^    bool op(const SkRegion& rgn, Op op) { return this->op(*this, rgn, op); }$/;"	f	class:SkRegion
op	core/SkRegion.h	/^    bool op(int left, int top, int right, int bottom, Op op) {$/;"	f	class:SkRegion
operator !=	SkRect.h	/^    friend bool operator!=(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
operator !=	SkRect.h	/^    friend bool operator!=(const SkRect& a, const SkRect& b) {$/;"	f	struct:SkRect
operator !=	core/Sk64.h	/^    friend bool operator!=(const Sk64& a, const Sk64& b) {$/;"	f	struct:Sk64
operator !=	core/SkClipStack.h	/^    bool operator!=(const SkClipStack& b) const { return !(*this == b); }$/;"	f	class:SkClipStack
operator !=	core/SkMatrix.h	/^    friend bool operator!=(const SkMatrix& a, const SkMatrix& b) {$/;"	f	class:SkMatrix
operator !=	core/SkPaint.h	/^    friend bool operator!=(const SkPaint& a, const SkPaint& b) {$/;"	f	class:SkPaint
operator !=	core/SkPath.h	/^    friend bool operator!=(const SkPath& a, const SkPath& b) {$/;"	f	class:SkPath
operator !=	core/SkPoint.h	/^    friend bool operator!=(const SkIPoint& a, const SkIPoint& b) {$/;"	f	struct:SkIPoint
operator !=	core/SkPoint.h	/^    friend bool operator!=(const SkPoint& a, const SkPoint& b) {$/;"	f	struct:SkPoint
operator !=	core/SkRect.h	/^    friend bool operator!=(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
operator !=	core/SkRect.h	/^    friend bool operator!=(const SkRect& a, const SkRect& b) {$/;"	f	struct:SkRect
operator !=	core/SkRegion.h	/^    bool operator!=(const SkRegion& other) const {$/;"	f	class:SkRegion
operator !=	core/SkSize.h	/^static inline bool operator!=(const SkTSize<T>& a, const SkTSize<T>& b) {$/;"	f
operator !=	core/SkString.h	/^    friend bool operator!=(const SkString& a, const SkString& b) {$/;"	f	class:SkString
operator !=	core/SkTDict.h	/^        friend int operator!=(const Pair& a, const Pair& b)$/;"	f	struct:SkTDict::Pair
operator !=	core/SkTScopedPtr.h	/^    bool operator!=(T* o) const { return fObj != o; }$/;"	f	class:SkTScopedPtr
operator !=	gpu/GrClip.h	/^        bool operator !=(const Element& e) const { return !(*this == e); }$/;"	f	struct:GrClip::Element
operator !=	gpu/GrClip.h	/^    friend bool operator!=(const GrClip& a, const GrClip& b) {$/;"	f	class:GrClip
operator !=	gpu/GrProgramStageFactory.h	/^    bool operator !=(const GrProgramStageFactory& b) const {$/;"	f	class:GrProgramStageFactory
operator !=	gpu/GrSamplerState.h	/^    bool operator !=(const GrSamplerState& s) const { return !(*this == s); }$/;"	f	class:GrSamplerState
operator !=	utils/SkMatrix44.h	/^    bool operator!=(const SkMatrix44& other) const {$/;"	f	class:SkMatrix44
operator !=	utils/SkMatrix44.h	/^    bool operator!=(const SkVector4& v) {$/;"	f	struct:SkVector4
operator &	utils/win/SkTScopedComPtr.h	/^    T **operator&() { SkASSERT(fPtr == NULL); return &fPtr; }$/;"	f	class:SkTScopedComPtr
operator *	core/SkRefCnt.h	/^    T& operator*() const { return *fObj; }$/;"	f	class:SkRefPtr
operator *	core/SkTScopedPtr.h	/^    T& operator*() const {$/;"	f	class:SkTScopedPtr
operator *	utils/SkMatrix44.h	/^    friend SkMatrix44 operator*(const SkMatrix44& a, const SkMatrix44& b) {$/;"	f	class:SkMatrix44
operator *	utils/SkMatrix44.h	/^    friend SkVector4 operator*(const SkMatrix44& m, const SkVector4& src) {$/;"	f	class:SkMatrix44
operator *	utils/win/SkTScopedComPtr.h	/^    T &operator*() const { return *fPtr; }$/;"	f	class:SkTScopedComPtr
operator +	core/SkPoint.h	/^    friend SkIPoint operator+(const SkIPoint& a, const SkIPoint& b) {$/;"	f	struct:SkIPoint
operator +	core/SkPoint.h	/^    friend SkPoint operator+(const SkPoint& a, const SkPoint& b) {$/;"	f	struct:SkPoint
operator +=	core/SkPoint.h	/^    void operator+=(const SkIPoint& v) {$/;"	f	struct:SkIPoint
operator +=	core/SkPoint.h	/^    void operator+=(const SkPoint& v) {$/;"	f	struct:SkPoint
operator +=	core/SkString.h	/^    SkString& operator+=(const SkString& s) { this->append(s); return *this; }$/;"	f	class:SkString
operator +=	core/SkString.h	/^    SkString& operator+=(const char c) { this->append(&c, 1); return *this; }$/;"	f	class:SkString
operator +=	core/SkString.h	/^    SkString& operator+=(const char text[]) { this->append(text); return *this; }$/;"	f	class:SkString
operator -	core/SkPoint.h	/^    SkIPoint operator-() const {$/;"	f	struct:SkIPoint
operator -	core/SkPoint.h	/^    SkPoint operator-() const {$/;"	f	struct:SkPoint
operator -	core/SkPoint.h	/^    friend SkIPoint operator-(const SkIPoint& a, const SkIPoint& b) {$/;"	f	struct:SkIPoint
operator -	core/SkPoint.h	/^    friend SkPoint operator-(const SkPoint& a, const SkPoint& b) {$/;"	f	struct:SkPoint
operator -=	core/SkPoint.h	/^    void operator-=(const SkIPoint& v) {$/;"	f	struct:SkIPoint
operator -=	core/SkPoint.h	/^    void operator-=(const SkPoint& v) {$/;"	f	struct:SkPoint
operator ->	core/SkRefCnt.h	/^    T* operator->() const { return fObj; }$/;"	f	class:SkRefPtr
operator ->	core/SkRefCnt.h	/^    T* operator->() { return fObj; }$/;"	f	class:SkAutoTUnref
operator ->	core/SkTScopedPtr.h	/^    T* operator->() const  {$/;"	f	class:SkTScopedPtr
operator ->	utils/win/SkTScopedComPtr.h	/^    SkBlockComRef<T> *operator->() const {$/;"	f	class:SkTScopedComPtr
operator <	core/Sk64.h	/^    friend bool operator<(const Sk64& a, const Sk64& b) {$/;"	f	struct:Sk64
operator <	core/SkTDict.h	/^        friend int operator<(const Pair& a, const Pair& b)$/;"	f	struct:SkTDict::Pair
operator <	gpu/GrKey.h	/^    bool operator<(const GrKey& rh) const {$/;"	f	class:GrKey
operator <=	core/Sk64.h	/^    friend bool operator<=(const Sk64& a, const Sk64& b) {$/;"	f	struct:Sk64
operator =	SkBitmap.cpp	/^SkBitmap& SkBitmap::operator=(const SkBitmap& src) {$/;"	f	class:SkBitmap
operator =	core/SkRefCnt.h	/^    SkRefPtr& operator=(T* obj) {$/;"	f	class:SkRefPtr
operator =	core/SkRefCnt.h	/^    SkRefPtr& operator=(const SkRefPtr& rp) {$/;"	f	class:SkRefPtr
operator =	core/SkSize.h	/^    SkSize& operator=(const SkISize& src) {$/;"	f	struct:SkSize
operator =	core/SkTArray.h	/^    SkSTArray& operator= (const INHERITED& array) {$/;"	f	class:SkSTArray
operator =	core/SkTArray.h	/^    SkSTArray& operator= (const SkSTArray& array) {$/;"	f	class:SkSTArray
operator =	core/SkTArray.h	/^    SkTArray& operator =(const SkTArray& array) {$/;"	f	class:SkTArray
operator =	core/SkTDArray.h	/^    SkTDArray<T>& operator=(const SkTDArray<T>& src) {$/;"	f	class:SkTDArray
operator =	effects/SkGroupShape.h	/^    SkMatrix& operator=(const SkMatrix& matrix) {$/;"	f	class:SkMatrixRef
operator =	gpu/GrContext.h	/^        TextureCacheEntry& operator= (const TextureCacheEntry& e) {$/;"	f	class:GrContext::TextureCacheEntry
operator =	gpu/GrPaint.h	/^    GrPaint& operator=(const GrPaint& paint) {$/;"	f	class:GrPaint
operator =	gpu/GrSamplerState.h	/^    GrSamplerState& operator =(const GrSamplerState s) {$/;"	f	class:GrSamplerState
operator =	utils/SkMatrix44.h	/^    SkMatrix44& operator=(const SkMatrix44& src) {$/;"	f	class:SkMatrix44
operator =	utils/SkMatrix44.h	/^    SkVector4& operator=(const SkVector4& src) {$/;"	f	struct:SkVector4
operator ==	SkRect.h	/^    friend bool operator==(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
operator ==	SkRect.h	/^    friend bool operator==(const SkRect& a, const SkRect& b) {$/;"	f	struct:SkRect
operator ==	core/Sk64.h	/^    friend bool operator==(const Sk64& a, const Sk64& b) {$/;"	f	struct:Sk64
operator ==	core/SkMatrix.h	/^    friend bool operator==(const SkMatrix& a, const SkMatrix& b) {$/;"	f	class:SkMatrix
operator ==	core/SkPoint.h	/^    friend bool operator==(const SkIPoint& a, const SkIPoint& b) {$/;"	f	struct:SkIPoint
operator ==	core/SkPoint.h	/^    friend bool operator==(const SkPoint& a, const SkPoint& b) {$/;"	f	struct:SkPoint
operator ==	core/SkRect.h	/^    friend bool operator==(const SkIRect& a, const SkIRect& b) {$/;"	f	struct:SkIRect
operator ==	core/SkRect.h	/^    friend bool operator==(const SkRect& a, const SkRect& b) {$/;"	f	struct:SkRect
operator ==	core/SkSize.h	/^static inline bool operator==(const SkTSize<T>& a, const SkTSize<T>& b) {$/;"	f
operator ==	core/SkString.h	/^    friend bool operator==(const SkString& a, const SkString& b) {$/;"	f	class:SkString
operator ==	core/SkTDArray.h	/^    friend bool operator==(const SkTDArray<T>& a, const SkTDArray<T>& b) {$/;"	f	class:SkTDArray
operator ==	core/SkTScopedPtr.h	/^    bool operator==(T* o) const { return fObj == o; }$/;"	f	class:SkTScopedPtr
operator ==	gpu/GrClip.h	/^        bool operator ==(const Element& e) const {$/;"	f	struct:GrClip::Element
operator ==	gpu/GrClip.h	/^    friend bool operator==(const GrClip& a, const GrClip& b) {$/;"	f	class:GrClip
operator ==	gpu/GrKey.h	/^    bool operator==(const GrKey& rh) const {$/;"	f	class:GrKey
operator ==	gpu/GrProgramStageFactory.h	/^    bool operator ==(const GrProgramStageFactory& b) const {$/;"	f	class:GrProgramStageFactory
operator ==	gpu/GrSamplerState.h	/^    bool operator ==(const GrSamplerState& s) const {$/;"	f	class:GrSamplerState
operator ==	utils/SkMatrix44.h	/^    bool operator==(const SkMatrix44& other) const {$/;"	f	class:SkMatrix44
operator ==	utils/SkMatrix44.h	/^    bool operator==(const SkVector4& v) {$/;"	f	struct:SkVector4
operator >	core/Sk64.h	/^    friend bool operator>(const Sk64& a, const Sk64& b) {$/;"	f	struct:Sk64
operator >=	core/Sk64.h	/^    friend bool operator>=(const Sk64& a, const Sk64& b) {$/;"	f	struct:Sk64
operator T*	core/SkRefCnt.h	/^    operator T*() { return fObj; }$/;"	f	class:SkAutoTUnref
operator T*	core/SkTemplates.h	/^    operator T*() {$/;"	f	class:SkAutoSTMalloc
operator T*	core/SkTemplates.h	/^    operator T*() {$/;"	f	class:SkAutoTMalloc
operator []	SkBitmap.h	/^    SkPMColor operator[](int index) const {$/;"	f	class:SkColorTable
operator []	core/SkBitmap.h	/^    SkPMColor operator[](int index) const {$/;"	f	class:SkColorTable
operator []	core/SkMatrix.h	/^    SkScalar operator[](int index) const {$/;"	f	class:SkMatrix
operator []	core/SkMatrix.h	/^    SkScalar& operator[](int index) {$/;"	f	class:SkMatrix
operator []	core/SkString.h	/^    char operator[](size_t n) const { return this->c_str()[n]; }$/;"	f	class:SkString
operator []	core/SkString.h	/^    char& operator[](size_t n) { return this->writable_str()[n]; }$/;"	f	class:SkString
operator []	core/SkTArray.h	/^    T& operator[] (int i) {$/;"	f	class:SkTArray
operator []	core/SkTArray.h	/^    const T& operator[] (int i) const {$/;"	f	class:SkTArray
operator []	core/SkTDArray.h	/^    T&  operator[](int index) const {$/;"	f	class:SkTDArray
operator []	core/SkTemplates.h	/^    T&  operator[](int index) const {$/;"	f	class:SkAutoSTArray
operator []	core/SkTemplates.h	/^    T&  operator[](int index) const {$/;"	f	class:SkAutoTArray
operator []	core/SkTemplates.h	/^    T& operator[](int index) {$/;"	f	class:SkAutoSTMalloc
operator []	core/SkTemplates.h	/^    T& operator[](int index) {$/;"	f	class:SkAutoTMalloc
operator []	core/SkTemplates.h	/^    const T& operator[](int index) const {$/;"	f	class:SkAutoSTMalloc
operator []	core/SkTemplates.h	/^    const T& operator[](int index) const {$/;"	f	class:SkAutoTMalloc
operator const T*	core/SkTemplates.h	/^    operator const T*() const {$/;"	f	class:SkAutoSTMalloc
operator const T*	core/SkTemplates.h	/^    operator const T*() const {$/;"	f	class:SkAutoTMalloc
operator delete	SkTypes.h	/^inline void operator delete(void* p) {$/;"	f
operator delete	core/SkTypes.h	/^inline void operator delete(void* p) {$/;"	f
operator new	SkTypes.h	/^inline void* operator new(size_t size) {$/;"	f
operator new	core/SkTypes.h	/^inline void* operator new(size_t size) {$/;"	f
operator unspecified_bool_type	core/SkRefCnt.h	/^    operator unspecified_bool_type() const {$/;"	f	class:SkRefPtr
orTypeMask	core/SkMatrix.h	/^    void orTypeMask(int mask) {$/;"	f	class:SkMatrix
outset	SkRect.h	/^    void outset(SkScalar dx, SkScalar dy)  { this->inset(-dx, -dy); }$/;"	f	struct:SkRect
outset	SkRect.h	/^    void outset(int32_t dx, int32_t dy)  { this->inset(-dx, -dy); }$/;"	f	struct:SkIRect
outset	core/SkRect.h	/^    void outset(SkScalar dx, SkScalar dy)  { this->inset(-dx, -dy); }$/;"	f	struct:SkRect
outset	core/SkRect.h	/^    void outset(int32_t dx, int32_t dy)  { this->inset(-dx, -dy); }$/;"	f	struct:SkIRect
pack16	SkBitmap.cpp	/^static inline U16CPU pack16(uint32_t c) {$/;"	f	file:
packedAtY	SkBitmap.h	/^        uint8_t* packedAtY(int y) const {$/;"	f	class:SkBitmap::RLEPixels
packedAtY	core/SkBitmap.h	/^        uint8_t* packedAtY(int y) const {$/;"	f	class:SkBitmap::RLEPixels
paint	effects/SkRectShape.h	/^    SkPaint& paint() { return fPaint; }$/;"	f	class:SkPaintShape
paint	effects/SkRectShape.h	/^    const SkPaint& paint() const { return fPaint; }$/;"	f	class:SkPaintShape
paint	text/SkTextLayout.h	/^    SkPaint& paint() { return fPaint; }$/;"	f	class:SkTextStyle
paint	text/SkTextLayout.h	/^    const SkPaint& paint() const { return fPaint; }$/;"	f	class:SkTextStyle
paint	views/SkBGViewArtist.h	/^    SkPaint&        paint() { return fPaint; }$/;"	f	class:SkBGViewArtist
paint	views/SkBGViewArtist.h	/^    const SkPaint&  paint() const { return fPaint; }$/;"	f	class:SkBGViewArtist
paint	views/SkWidget.h	/^    SkPaint&    paint() { return fPaint; }$/;"	f	class:SkTextView
peek	core/SkReader32.h	/^    const void* peek() const { return fCurr; }$/;"	f	class:SkReader32
peek	core/SkStream.h	/^    size_t peek() const { return fOffset; }$/;"	f	class:SkMemoryStream
persistBitmapPixels	core/SkFlattenable.h	/^    bool persistBitmapPixels() const {$/;"	f	class:SkFlattenableWriteBuffer
persistTypeface	core/SkFlattenable.h	/^    bool persistTypeface() const { return (fFlags & kCrossProcess_Flag) != 0; }$/;"	f	class:SkFlattenableWriteBuffer
pixelRef	SkBitmap.h	/^    SkPixelRef* pixelRef() const { return fPixelRef; }$/;"	f	class:SkBitmap
pixelRef	core/SkBitmap.h	/^    SkPixelRef* pixelRef() const { return fPixelRef; }$/;"	f	class:SkBitmap
pixelRefOffset	SkBitmap.h	/^    size_t pixelRefOffset() const { return fPixelRefOffset; }$/;"	f	class:SkBitmap
pixelRefOffset	core/SkBitmap.h	/^    size_t pixelRefOffset() const { return fPixelRefOffset; }$/;"	f	class:SkBitmap
pixels	SkBitmap.cpp	/^    const void* pixels() const { return levels() + fLevelCount; }$/;"	f	struct:SkBitmap::MipMap
pixels	SkBitmap.cpp	/^    void* pixels() { return levels() + fLevelCount; }$/;"	f	struct:SkBitmap::MipMap
pixels	core/SkPixelRef.h	/^    void* pixels() const { return fPixels; }$/;"	f	class:SkPixelRef
pop	core/SkTDArray.h	/^    void        pop() { --fCount; }$/;"	f	class:SkTDArray
pop	core/SkTDArray.h	/^    void        pop(T* elem) { if (elem) *elem = (*this)[fCount - 1]; --fCount; }$/;"	f	class:SkTDArray
pop	core/SkTDStack.h	/^    void pop() {$/;"	f	class:SkTDStack
pop	core/SkTDStack.h	/^    void pop(T* elem) {$/;"	f	class:SkTDStack
pop_back	core/SkTArray.h	/^    void pop_back() {$/;"	f	class:SkTArray
pop_back_n	core/SkTArray.h	/^    void pop_back_n(int n) {$/;"	f	class:SkTArray
pos	core/SkBuffer.h	/^    size_t  pos() const { return fPos - fData; }$/;"	f	class:SkRBuffer
pos	core/SkBuffer.h	/^    size_t  pos() const { return fPos - fData; }$/;"	f	class:SkWBuffer
post	views/SkEvent.h	/^    void post() {$/;"	f	class:SkEvent
postConcat	effects/SkColorMatrix.h	/^    void postConcat(const SkColorMatrix& mat) { this->setConcat(mat, *this); }$/;"	f	class:SkColorMatrix
postConcat	utils/SkMatrix44.h	/^    void postConcat(const SkMatrix44& m) {$/;"	f	class:SkMatrix44
postEvent	views/SkOSMenu.h	/^        void postEvent() const { (new SkEvent(*(fEvent)))->post(); }$/;"	f	class:SkOSMenu::Item
postSave	core/SkDevice.h	/^    virtual void postSave() {};$/;"	f	class:SkDevice
postScale	utils/SkMatrix44.h	/^    void postScale(SkMScalar scale) {$/;"	f	class:SkMatrix44
preConcat	effects/SkColorMatrix.h	/^    void preConcat(const SkColorMatrix& mat) { this->setConcat(*this, mat); }$/;"	f	class:SkColorMatrix
preConcat	utils/SkMatrix44.h	/^    void preConcat(const SkMatrix44& m) {$/;"	f	class:SkMatrix44
preConcatActiveSamplerMatrices	gpu/GrPaint.h	/^    void preConcatActiveSamplerMatrices(const GrMatrix& matrix) {$/;"	f	class:GrPaint
preConcatMatrix	gpu/GrSamplerState.h	/^    void preConcatMatrix(const GrMatrix& matrix) { fMatrix.preConcat(matrix); }$/;"	f	class:GrSamplerState
preRestore	core/SkDevice.h	/^    virtual void preRestore() {};$/;"	f	class:SkDevice
preScale	utils/SkMatrix44.h	/^    void preScale(SkMScalar scale) {$/;"	f	class:SkMatrix44
prepareForDraw	utils/SkDeferredCanvas.h	/^        virtual void prepareForDraw() {}$/;"	f	class:SkDeferredCanvas::DeviceContext
prepend	core/SkString.h	/^    void prepend(const SkString& str) { this->insert(0, str); }$/;"	f	class:SkString
prepend	core/SkString.h	/^    void prepend(const char text[]) { this->insert(0, text); }$/;"	f	class:SkString
prepend	core/SkString.h	/^    void prepend(const char text[], size_t len) { this->insert(0, text, len); }$/;"	f	class:SkString
prepend	core/SkTDArray.h	/^    T* prepend() {$/;"	f	class:SkTDArray
prependHex	core/SkString.h	/^    void prependHex(uint32_t value, int minDigits = 0) { this->insertHex(0, value, minDigits); }$/;"	f	class:SkString
prependS32	core/SkString.h	/^    void prependS32(int32_t value) { this->insertS32(0, value); }$/;"	f	class:SkString
prependS64	core/SkString.h	/^    void prependS64(int32_t value, int minDigits = 0) { this->insertS64(0, value, minDigits); }$/;"	f	class:SkString
prependScalar	core/SkString.h	/^    void prependScalar(SkScalar value) { this->insertScalar((size_t)-1, value); }$/;"	f	class:SkString
prependUnichar	core/SkString.h	/^    void prependUnichar(SkUnichar uni) { this->insertUnichar(0, uni); }$/;"	f	class:SkString
present	views/SkOSWindow_Android.h	/^    void present() {}$/;"	f	class:SkOSWindow
preservesAxisAlignment	core/SkMatrix.h	/^    bool preservesAxisAlignment() const { return this->rectStaysRect(); }$/;"	f	class:SkMatrix
ptr_align_4	core/SkReader32.h	/^    static bool ptr_align_4(const void* ptr) {$/;"	f	class:SkReader32
push	core/SkTDArray.h	/^    T*          push() { return this->append(); }$/;"	f	class:SkTDArray
push	core/SkTDArray.h	/^    void        push(const T& elem) { *this->append() = elem; }$/;"	f	class:SkTDArray
push	core/SkTDStack.h	/^    T* push() {$/;"	f	class:SkTDStack
push	core/SkTDStack.h	/^    void push(const T& elem) { *this->push() = elem; }$/;"	f	class:SkTDStack
push_back	core/SkTArray.h	/^    T& push_back() {$/;"	f	class:SkTArray
push_back	core/SkTArray.h	/^    T& push_back(const T& t) {$/;"	f	class:SkTArray
push_back_n	core/SkTArray.h	/^    T* push_back_n(int n) {$/;"	f	class:SkTArray
push_back_n	core/SkTArray.h	/^    T* push_back_n(int n, const T t[]) {$/;"	f	class:SkTArray
push_back_n	core/SkTArray.h	/^    T* push_back_n(int n, const T& t) {$/;"	f	class:SkTArray
quadTo	core/SkPath.h	/^    void quadTo(const SkPoint& p1, const SkPoint& p2) {$/;"	f	class:SkPath
quickContains	core/SkRegion.h	/^    bool quickContains(const SkIRect& r) const {$/;"	f	class:SkRegion
quickContains	core/SkRegion.h	/^    bool quickContains(int32_t left, int32_t top, int32_t right,$/;"	f	class:SkRegion
quickReject	SkRect.h	/^    bool quickReject(int l, int t, int r, int b) const {$/;"	f	struct:SkIRect
quickReject	core/SkRect.h	/^    bool quickReject(int l, int t, int r, int b) const {$/;"	f	struct:SkIRect
quickReject	core/SkRegion.h	/^    bool quickReject(const SkIRect& rect) const {$/;"	f	class:SkRegion
quickReject	core/SkRegion.h	/^    bool quickReject(const SkRegion& rgn) const {$/;"	f	class:SkRegion
quickRejectY	core/SkCanvas.h	/^    bool quickRejectY(SkScalar top, SkScalar bottom, EdgeType et) const {$/;"	f	class:SkCanvas
quitOnDeactivate	views/SkOSWindow_Win.h	/^    virtual bool quitOnDeactivate() { return true; }$/;"	f	class:SkOSWindow
radial2IsDegenerate	gpu/GrSamplerState.h	/^    bool radial2IsDegenerate() const { return GR_Scalar1 == fRadial2CenterX1; }$/;"	f	class:GrSamplerState
radius	effects/SkMorphologyImageFilter.h	/^    SkISize    radius() const { return fRadius; }$/;"	f	class:SkMorphologyImageFilter
read	core/SkBuffer.h	/^    void read(void* buffer, size_t size) {$/;"	f	class:SkRBuffer
read	core/SkOrderedReadBuffer.h	/^    virtual void read(void* dst, size_t size) { return fReader.read(dst, size); }$/;"	f	class:SkOrderedReadBuffer
read	core/SkReader32.h	/^    void read(void* dst, size_t size) {$/;"	f	class:SkReader32
readBool	core/SkBuffer.h	/^    bool        readBool() { return this->readU8() != 0; }$/;"	f	class:SkRBuffer
readBool	core/SkOrderedReadBuffer.h	/^    virtual bool readBool() { return fReader.readBool(); }$/;"	f	class:SkOrderedReadBuffer
readBool	core/SkReader32.h	/^    bool readBool() { return this->readInt() != 0; }$/;"	f	class:SkReader32
readBool	core/SkStream.h	/^    bool     readBool() { return this->readU8() != 0; }$/;"	f	class:SkStream
readFromStream	core/SkOrderedWriteBuffer.h	/^    virtual size_t readFromStream(SkStream* s, size_t length) { return fWriter.readFromStream(s, length); }$/;"	f	class:SkOrderedWriteBuffer
readInt	core/SkOrderedReadBuffer.h	/^    virtual int32_t readInt() { return fReader.readInt(); }$/;"	f	class:SkOrderedReadBuffer
readInt	core/SkReader32.h	/^    int32_t readInt() {$/;"	f	class:SkReader32
readMatrix	core/SkOrderedReadBuffer.h	/^    virtual void readMatrix(SkMatrix* m) { fReader.readMatrix(m); }$/;"	f	class:SkOrderedReadBuffer
readMatrix	core/SkReader32.h	/^    void readMatrix(SkMatrix* matrix) {$/;"	f	class:SkReader32
readPath	core/SkOrderedReadBuffer.h	/^    virtual void readPath(SkPath* p) { p->unflatten(fReader); }$/;"	f	class:SkOrderedReadBuffer
readPixels	SkPixelRef.cpp	/^bool SkPixelRef::readPixels(SkBitmap* dst, const SkIRect* subset) {$/;"	f	class:SkPixelRef
readPoint	core/SkFlattenable.h	/^    SkPoint readPoint() {$/;"	f	class:SkFlattenableReadBuffer
readPoint	core/SkOrderedReadBuffer.h	/^    virtual void readPoint(SkPoint* p) {$/;"	f	class:SkOrderedReadBuffer
readPtr	core/SkBuffer.h	/^    void*       readPtr() { void* ptr; read(&ptr, sizeof(ptr)); return ptr; }$/;"	f	class:SkRBuffer
readRegion	core/SkReader32.h	/^    void readRegion(SkRegion* rgn) {$/;"	f	class:SkReader32
readRenderTargetPixels	gpu/GrContext.h	/^    bool readRenderTargetPixels(GrRenderTarget* target,$/;"	f	class:GrContext
readS16	core/SkBuffer.h	/^    int16_t     readS16() { int16_t x; read(&x, 2); return x; }$/;"	f	class:SkRBuffer
readS32	core/SkBuffer.h	/^    int32_t     readS32() { int32_t x; read(&x, 4); return x; }$/;"	f	class:SkRBuffer
readS32	core/SkFlattenable.h	/^    virtual int32_t readS32() { return readInt(); }$/;"	f	class:SkFlattenableReadBuffer
readS32	core/SkReader32.h	/^    int32_t readS32() { return this->readInt(); }$/;"	f	class:SkReader32
readScalar	core/SkBuffer.h	/^    SkScalar    readScalar() { SkScalar x; read(&x, 4); return x; }$/;"	f	class:SkRBuffer
readScalar	core/SkOrderedReadBuffer.h	/^    virtual SkScalar readScalar() { return fReader.readScalar(); }$/;"	f	class:SkOrderedReadBuffer
readScalar	core/SkReader32.h	/^    SkScalar readScalar() {$/;"	f	class:SkReader32
readTexturePixels	gpu/GrContext.h	/^    bool readTexturePixels(GrTexture* texture,$/;"	f	class:GrContext
readU16	core/SkBuffer.h	/^    uint16_t    readU16() { uint16_t x; read(&x, 2); return x; }$/;"	f	class:SkRBuffer
readU16	core/SkOrderedReadBuffer.h	/^    virtual uint16_t readU16() { return fReader.readU16(); }$/;"	f	class:SkOrderedReadBuffer
readU16	core/SkReader32.h	/^    uint16_t readU16() { return (uint16_t)this->readInt(); }$/;"	f	class:SkReader32
readU16	core/SkStream.h	/^    uint16_t readU16() { return (uint16_t)this->readS16(); }$/;"	f	class:SkStream
readU32	core/SkBuffer.h	/^    uint32_t    readU32() { uint32_t x; read(&x, 4); return x; }$/;"	f	class:SkRBuffer
readU32	core/SkOrderedReadBuffer.h	/^    virtual uint32_t readU32() { return fReader.readU32(); }$/;"	f	class:SkOrderedReadBuffer
readU32	core/SkReader32.h	/^    uint32_t readU32() { return this->readInt(); }$/;"	f	class:SkReader32
readU32	core/SkStream.h	/^    uint32_t readU32() { return (uint32_t)this->readS32(); }$/;"	f	class:SkStream
readU8	core/SkBuffer.h	/^    uint8_t     readU8() { uint8_t x; read(&x, 1); return x; }$/;"	f	class:SkRBuffer
readU8	core/SkOrderedReadBuffer.h	/^    virtual uint8_t readU8() { return fReader.readU8(); }$/;"	f	class:SkOrderedReadBuffer
readU8	core/SkReader32.h	/^    uint8_t readU8() { return (uint8_t)this->readInt(); }$/;"	f	class:SkReader32
readU8	core/SkStream.h	/^    uint8_t  readU8() { return (uint8_t)this->readS8(); }$/;"	f	class:SkStream
readyToDraw	SkBitmap.h	/^    bool readyToDraw() const {$/;"	f	class:SkBitmap
readyToDraw	core/SkBitmap.h	/^    bool readyToDraw() const {$/;"	f	class:SkBitmap
recordingCanvas	utils/SkDeferredCanvas.h	/^        SkCanvas* recordingCanvas() const {return fRecordingCanvas;}$/;"	f	class:SkDeferredCanvas::DeferredDevice
rect	core/SkRegion.h	/^        const SkIRect& rect() const { return fRect; }$/;"	f	class:SkRegion::Cliperator
rect	core/SkRegion.h	/^        const SkIRect& rect() const { return fRect; }$/;"	f	class:SkRegion::Iterator
rectStaysRect	core/SkMatrix.h	/^    bool rectStaysRect() const {$/;"	f	class:SkMatrix
ref	SkBitmap.cpp	/^    void ref() {$/;"	f	struct:SkBitmap::MipMap
ref	core/SkRefCnt.h	/^    void ref() const {$/;"	f	class:SkRefCnt
ref	effects/SkGroupShape.h	/^    void ref() const {$/;"	f	class:SkTRefCnt
release	core/SkData.h	/^    void release() {$/;"	f	class:SkAutoDataUnref
release	core/SkTScopedPtr.h	/^    T* release() {$/;"	f	class:SkTScopedPtr
release	core/SkThread.h	/^    void release() {$/;"	f	class:SkAutoMutexAcquire
release	core/SkThread_platform.h	/^    void    release() { pthread_mutex_unlock(&fMutex); }$/;"	f	struct:SkBaseMutex
release	utils/win/SkTScopedComPtr.h	/^    T* release() {$/;"	f	class:SkTScopedComPtr
remove	core/SkRefDict.h	/^    void remove(const char name[]) { this->set(name, NULL); }$/;"	f	class:SkRefDict
remove	core/SkTDArray.h	/^    void remove(size_t index, size_t count = 1) {$/;"	f	class:SkTDArray
removeRefCnt	core/SkMetaData.h	/^    bool removeRefCnt(const char name[]) {$/;"	f	class:SkMetaData
removeShuffle	core/SkTDArray.h	/^    void removeShuffle(size_t index) {$/;"	f	class:SkTDArray
requiresAA	gpu/GrClip.h	/^    bool requiresAA() const { return fRequiresAA; }$/;"	f	class:GrClip
reserve	core/SkOrderedWriteBuffer.h	/^    virtual uint32_t* reserve(size_t size) { return fWriter.reserve(size); }$/;"	f	class:SkOrderedWriteBuffer
reset	SkBitmap.cpp	/^void SkBitmap::reset() {$/;"	f	class:SkBitmap
reset	SkTypes.h	/^    void* reset(size_t size, OnShrink shrink = kAlloc_OnShrink) {$/;"	f	class:SkAutoMalloc
reset	SkTypes.h	/^    void* reset(size_t size,$/;"	f	class:SkAutoSMalloc
reset	core/SkBuffer.h	/^    void reset(void* data) {$/;"	f	class:SkWBuffer
reset	core/SkBuffer.h	/^    void reset(void* data, size_t size) {$/;"	f	class:SkWBuffer
reset	core/SkRefCnt.h	/^    void reset(T* obj) {$/;"	f	class:SkAutoTUnref
reset	core/SkTArray.h	/^    void reset() { this->pop_back_n(fCount); }$/;"	f	class:SkTArray
reset	core/SkTDArray.h	/^    void reset() {$/;"	f	class:SkTDArray
reset	core/SkTDict.h	/^    void reset()$/;"	f	class:SkTDict
reset	core/SkTScopedPtr.h	/^    void reset(T* o = NULL) {$/;"	f	class:SkTScopedPtr
reset	core/SkTemplates.h	/^    void reset (size_t count) {$/;"	f	class:SkAutoTMalloc
reset	core/SkTemplates.h	/^    void reset(size_t count) {$/;"	f	class:SkAutoSTMalloc
reset	core/SkTypes.h	/^    void* reset(size_t size, OnShrink shrink = kAlloc_OnShrink) {$/;"	f	class:SkAutoMalloc
reset	core/SkTypes.h	/^    void* reset(size_t size,$/;"	f	class:SkAutoSMalloc
reset	gpu/GrContext.h	/^        void reset() { fEntry = NULL; }$/;"	f	class:GrContext::TextureCacheEntry
reset	gpu/GrPaint.h	/^    void reset() {$/;"	f	class:GrPaint
reset	gpu/GrSamplerState.h	/^    void reset() {$/;"	f	class:GrSamplerState
reset	gpu/GrSamplerState.h	/^    void reset(WrapMode wrapXAndY, Filter filter, const GrMatrix& matrix) {$/;"	f	class:GrSamplerState
reset	gpu/GrSamplerState.h	/^    void reset(WrapMode wrapXAndY,$/;"	f	class:GrSamplerState
reset	gpu/GrSamplerState.h	/^    void reset(const GrMatrix& matrix) {$/;"	f	class:GrSamplerState
reset	utils/SkMatrix44.h	/^    void reset() { this->setIdentity();}$/;"	f	class:SkMatrix44
reset	utils/win/SkTScopedComPtr.h	/^    void reset() {$/;"	f	class:SkTScopedComPtr
resetBlend	gpu/GrPaint.h	/^    void resetBlend() {$/;"	f	class:GrPaint
resetColor	gpu/GrPaint.h	/^    void resetColor() {$/;"	f	class:GrPaint
resetColorFilter	gpu/GrPaint.h	/^    void resetColorFilter() {$/;"	f	class:GrPaint
resetCoverage	gpu/GrPaint.h	/^    void resetCoverage() {$/;"	f	class:GrPaint
resetMasks	gpu/GrPaint.h	/^    void resetMasks() {$/;"	f	class:GrPaint
resetOptions	gpu/GrPaint.h	/^    void resetOptions() {$/;"	f	class:GrPaint
resetSampleSize	images/SkImageDecoder.h	/^    void resetSampleSize() { this->setSampleSize(1); }$/;"	f	class:SkImageDecoder
resetTextures	gpu/GrPaint.h	/^    void resetTextures() {$/;"	f	class:GrPaint
resize	core/SkString.h	/^    void resize(size_t len) { this->set(NULL, len); }$/;"	f	class:SkString
resize_back	core/SkTArray.h	/^    void resize_back(int newCount) {$/;"	f	class:SkTArray
rewind	core/SkOrderedReadBuffer.h	/^    void rewind() { fReader.rewind(); }$/;"	f	class:SkOrderedReadBuffer
rewind	core/SkReader32.h	/^    void rewind() { fCurr = fBase; }$/;"	f	class:SkReader32
rewind	core/SkTDArray.h	/^    void rewind() {$/;"	f	class:SkTDArray
rfind	core/SkTDArray.h	/^    int rfind(const T& elem) const {$/;"	f	class:SkTDArray
rgn	core/SkRegion.h	/^        const SkRegion* rgn() const { return fRgn; }$/;"	f	class:SkRegion::Iterator
right	SkRect.h	/^    SkScalar    right() const { return fRight; }$/;"	f	struct:SkRect
right	SkRect.h	/^    int right() const { return fRight; }$/;"	f	struct:SkIRect
right	core/SkRect.h	/^    SkScalar    right() const { return fRight; }$/;"	f	struct:SkRect
right	core/SkRect.h	/^    int right() const { return fRight; }$/;"	f	struct:SkIRect
rotate	utils/SkCamera.h	/^    void rotate(SkScalar x, SkScalar y, SkScalar z) {}$/;"	f	class:SkPatch3D
rotateCCW	core/SkPoint.h	/^    void rotateCCW() { this->rotateCCW(this); }$/;"	f	struct:SkIPoint
rotateCCW	core/SkPoint.h	/^    void rotateCCW() { this->rotateCCW(this); }$/;"	f	struct:SkPoint
rotateCW	core/SkPoint.h	/^    void rotateCW() { this->rotateCW(this); }$/;"	f	struct:SkIPoint
rotateCW	core/SkPoint.h	/^    void rotateCW() { this->rotateCW(this); }$/;"	f	struct:SkPoint
rotateDegrees	utils/SkCamera.h	/^    void rotateDegrees(SkScalar x, SkScalar y, SkScalar z) {}$/;"	f	class:SkPatch3D
round	SkRect.h	/^    void round(SkIRect* dst) const {$/;"	f	struct:SkRect
round	core/SkRect.h	/^    void round(SkIRect* dst) const {$/;"	f	struct:SkRect
roundOut	SkRect.h	/^    void roundOut() {$/;"	f	struct:SkRect
roundOut	SkRect.h	/^    void roundOut(SkIRect* dst) const {$/;"	f	struct:SkRect
roundOut	core/SkRect.h	/^    void roundOut() {$/;"	f	struct:SkRect
roundOut	core/SkRect.h	/^    void roundOut(SkIRect* dst) const {$/;"	f	struct:SkRect
rowBytes	SkBitmap.h	/^    int rowBytes() const { return fRowBytes; }$/;"	f	class:SkBitmap
rowBytes	core/SkBitmap.h	/^    int rowBytes() const { return fRowBytes; }$/;"	f	class:SkBitmap
rowBytes	core/SkScalerContext.h	/^    unsigned rowBytes() const {$/;"	f	struct:SkGlyph
rowBytesAsPixels	SkBitmap.h	/^    int rowBytesAsPixels() const { return fRowBytes >> (fBytesPerPixel >> 1); }$/;"	f	class:SkBitmap
rowBytesAsPixels	core/SkBitmap.h	/^    int rowBytesAsPixels() const { return fRowBytes >> (fBytesPerPixel >> 1); }$/;"	f	class:SkBitmap
safeUnrefAll	core/SkTDArray.h	/^    void safeUnrefAll() {$/;"	f	class:SkTDArray
save	gpu/GrTemplates.h	/^    void save(T* ptr) {$/;"	f	class:GrAutoTPtrValueRestore
scale	core/SkPoint.h	/^    void scale(SkScalar value) { this->scale(value, this); }$/;"	f	struct:SkPoint
set	SkRect.h	/^    void set(SkScalar left, SkScalar top, SkScalar right, SkScalar bottom) {$/;"	f	struct:SkRect
set	SkRect.h	/^    void set(const SkIRect& src) {$/;"	f	struct:SkRect
set	SkRect.h	/^    void set(const SkPoint& p0, const SkPoint& p1) {$/;"	f	struct:SkRect
set	SkRect.h	/^    void set(int32_t left, int32_t top, int32_t right, int32_t bottom) {$/;"	f	struct:SkIRect
set	SkTypes.h	/^    void* set(void* ptr) {$/;"	f	class:SkAutoFree
set	core/Sk64.h	/^    void    set(int32_t a) { fHi = a >> 31; fLo = a; }$/;"	f	struct:Sk64
set	core/Sk64.h	/^    void    set(int32_t hi, uint32_t lo) { fHi = hi; fLo = lo; }$/;"	f	struct:Sk64
set	core/SkMatrix.h	/^    void set(int index, SkScalar value) {$/;"	f	class:SkMatrix
set	core/SkPoint.h	/^    void set(SkScalar x, SkScalar y) { fX = x; fY = y; }$/;"	f	struct:SkPoint
set	core/SkPoint.h	/^    void set(int32_t x, int32_t y) { fX = x; fY = y; }$/;"	f	struct:SkIPoint
set	core/SkRect.h	/^    void set(SkScalar left, SkScalar top, SkScalar right, SkScalar bottom) {$/;"	f	struct:SkRect
set	core/SkRect.h	/^    void set(const SkIRect& src) {$/;"	f	struct:SkRect
set	core/SkRect.h	/^    void set(const SkPoint& p0, const SkPoint& p1) {$/;"	f	struct:SkRect
set	core/SkRect.h	/^    void set(int32_t left, int32_t top, int32_t right, int32_t bottom) {$/;"	f	struct:SkIRect
set	core/SkRegion.h	/^    bool set(const SkRegion& src) {$/;"	f	class:SkRegion
set	core/SkRelay.h	/^    void set(T* ptr) { fPtr = ptr; }$/;"	f	class:SkTRelay
set	core/SkSize.h	/^    void set(T w, T h) {$/;"	f	struct:SkTSize
set	core/SkString.h	/^    void set(const SkString& src) { *this = src; }$/;"	f	class:SkString
set	core/SkTDict.h	/^    bool set(const char name[], const T& value)$/;"	f	class:SkTDict
set	core/SkTDict.h	/^    bool set(const char name[], size_t len, const T& value)$/;"	f	class:SkTDict
set	core/SkTLazy.h	/^    T* set(const T& src) {$/;"	f	class:SkTLazy
set	core/SkTypes.h	/^    void* set(void* ptr) {$/;"	f	class:SkAutoFree
set	gpu/GrContext.h	/^        void set(GrResourceEntry* entry) { fEntry = entry; }$/;"	f	class:GrContext::TextureCacheEntry
set	gpu/GrContext.h	/^    GrTexture* set(GrContext* context,$/;"	f	class:GrAutoScratchTexture
set	gpu/GrContext.h	/^    void set(GrContext* ctx) {$/;"	f	class:GrAutoMatrix
set	gpu/GrContext.h	/^    void set(GrContext* ctx, const GrMatrix& matrix) {$/;"	f	class:GrAutoMatrix
set	gpu/GrPoint.h	/^    void set(intptr_t x, intptr_t y) {$/;"	f	struct:GrIPoint16
set	gpu/GrRect.h	/^    void set(const GrIRect& r) {$/;"	f	struct:GrIRect16
set	utils/SkCamera.h	/^    void set(SkScalar x, SkScalar y, SkScalar z)$/;"	f	struct:SkPoint3D
set	utils/SkCamera.h	/^    void set(SkUnitScalar x, SkUnitScalar y, SkUnitScalar z)$/;"	f	struct:SkUnit3D
set	utils/SkMatrix44.h	/^    void set(SkScalar x, SkScalar y, SkScalar z, SkScalar w = SK_Scalar1) {$/;"	f	struct:SkVector4
setAbs	core/SkPoint.h	/^    void setAbs(const SkPoint& pt) {$/;"	f	struct:SkPoint
setAll	core/SkMatrix.h	/^    void setAll(SkScalar scaleX, SkScalar skewX, SkScalar transX,$/;"	f	class:SkMatrix
setAnchorPoint	utils/SkLayer.h	/^    void setAnchorPoint(SkScalar x, SkScalar y) { m_anchorPoint.set(x, y); }$/;"	f	class:SkLayer
setBaseGlyphCount	core/SkScalerContext.h	/^    void setBaseGlyphCount(unsigned baseGlyphCount) {$/;"	f	class:SkScalerContext
setBool	views/SkEvent.h	/^    void setBool(const char name[], bool value) { fMeta.setBool(name, value); }$/;"	f	class:SkEvent
setBounds	SkRect.h	/^    void setBounds(const SkPoint pts[], int count) {$/;"	f	struct:SkRect
setBounds	core/SkRect.h	/^    void setBounds(const SkPoint pts[], int count) {$/;"	f	struct:SkRect
setClip	core/SkBounder.h	/^    void setClip(const SkRegion* clip) { fClip = clip; }$/;"	f	class:SkBounder
setClipRegion	core/SkCanvas.h	/^    bool setClipRegion(const SkRegion& deviceRgn) {$/;"	f	class:SkCanvas
setCode	xml/SkXMLParser.h	/^    void setCode(ErrorCode code) { fCode = code; }$/;"	f	class:SkXMLParserError
setConfig	SkBitmap.cpp	/^void SkBitmap::setConfig(Config c, int width, int height, int rowBytes) {$/;"	f	class:SkBitmap
setConvolutionParams	gpu/GrSamplerState.h	/^    void setConvolutionParams(int kernelWidth, const float* kernel) {$/;"	f	class:GrSamplerState
setCount	core/SkTDArray.h	/^    void setCount(size_t count) {$/;"	f	class:SkTDArray
setCustomStage	gpu/GrSamplerState.h	/^    void setCustomStage(GrCustomStage* stage) {$/;"	f	class:GrSamplerState
setData	views/SkEvent.h	/^    void setData(const char name[], const void* data, size_t byteCount) {$/;"	f	class:SkEvent
setDitherImage	images/SkImageDecoder.h	/^    void setDitherImage(bool dither) { fDitherImage = dither; }$/;"	f	class:SkImageDecoder
setDitherImage	images/SkImageRef.h	/^    void setDitherImage(bool dither) { fDoDither = dither; }$/;"	f	class:SkImageRef
setDoFill	core/SkStroke.h	/^    void    setDoFill(bool doFill) { fDoFill = SkToU8(doFill); }$/;"	f	class:SkStroke
setEmpty	SkRect.h	/^    void setEmpty() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:SkIRect
setEmpty	SkRect.h	/^    void setEmpty() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:SkRect
setEmpty	core/SkRect.h	/^    void setEmpty() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:SkIRect
setEmpty	core/SkRect.h	/^    void setEmpty() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:SkRect
setEmpty	core/SkSize.h	/^    void setEmpty() {$/;"	f	struct:SkTSize
setFactoryArray	core/SkFlattenable.h	/^    void setFactoryArray(SkTDArray<SkFlattenable::Factory>* array) {$/;"	f	class:SkFlattenableReadBuffer
setFactoryPlayback	core/SkFlattenable.h	/^    void setFactoryPlayback(SkFlattenable::Factory array[], int count) {$/;"	f	class:SkFlattenableReadBuffer
setFast32	views/SkEvent.h	/^    void setFast32(uint32_t x) { f32 = x; }$/;"	f	class:SkEvent
setFillType	core/SkPath.h	/^    void setFillType(FillType ft) {$/;"	f	class:SkPath
setFilter	gpu/GrSamplerState.h	/^    void setFilter(Filter filter) { fFilter = filter; }$/;"	f	class:GrSamplerState
setFilterDirection	gpu/GrSamplerState.h	/^    void setFilterDirection(FilterDirection mode) { fFilterDirection = mode; }$/;"	f	class:GrSamplerState
setFlags	core/SkFlattenable.h	/^    void setFlags(Flags flags) { fFlags = flags; }$/;"	f	class:SkFlattenableWriteBuffer
setHeight	views/SkView.h	/^    void        setHeight(SkScalar height) { this->setSize(fWidth, height); }$/;"	f	class:SkView
setHinting	core/SkScalerContext.h	/^        void setHinting(SkPaint::Hinting hinting) {$/;"	f	struct:SkScalerContext::Rec
setHostEventSink	animator/SkAnimator.h	/^    void setHostEventSink(SkEventSink* sink) {$/;"	f	class:SkAnimator
setHostHandler	animator/SkAnimator.h	/^    void setHostHandler(Handler handler) {$/;"	f	class:SkAnimator
setIRectFan	core/SkPoint.h	/^    void setIRectFan(int l, int t, int r, int b) {$/;"	f	struct:SkPoint
setIdentity	core/SkMatrix.h	/^    void setIdentity() { this->reset(); }$/;"	f	class:SkMatrix
setImmutable	SkBitmap.cpp	/^void SkBitmap::setImmutable() {$/;"	f	class:SkBitmap
setImmutable	SkPixelRef.cpp	/^void SkPixelRef::setImmutable() {$/;"	f	class:SkPixelRef
setIsConvex	core/SkPath.h	/^    void setIsConvex(bool isConvex) {$/;"	f	class:SkPath
setIsOpaque	SkBitmap.cpp	/^void SkBitmap::setIsOpaque(bool isOpaque) {$/;"	f	class:SkBitmap
setIsVolatile	SkBitmap.cpp	/^void SkBitmap::setIsVolatile(bool isVolatile) {$/;"	f	class:SkBitmap
setKeyEquivalent	views/SkOSMenu.h	/^        void        setKeyEquivalent(SkUnichar key) { fKey = key; }$/;"	f	class:SkOSMenu::Item
setLTRB	SkRect.h	/^    void setLTRB(SkScalar left, SkScalar top, SkScalar right, SkScalar bottom) {$/;"	f	struct:SkRect
setLTRB	SkRect.h	/^    void setLTRB(int32_t left, int32_t top, int32_t right, int32_t bottom) {$/;"	f	struct:SkIRect
setLTRB	core/SkRect.h	/^    void setLTRB(SkScalar left, SkScalar top, SkScalar right, SkScalar bottom) {$/;"	f	struct:SkRect
setLTRB	core/SkRect.h	/^    void setLTRB(int32_t left, int32_t top, int32_t right, int32_t bottom) {$/;"	f	struct:SkIRect
setLargest	SkRect.h	/^    void setLargest() {$/;"	f	struct:SkIRect
setLargest	SkRect.h	/^    void setLargest() {$/;"	f	struct:SkRect
setLargest	core/SkRect.h	/^    void setLargest() {$/;"	f	struct:SkIRect
setLargest	core/SkRect.h	/^    void setLargest() {$/;"	f	struct:SkRect
setLargestInverted	SkRect.h	/^    void setLargestInverted() {$/;"	f	struct:SkIRect
setLargestInverted	SkRect.h	/^    void setLargestInverted() {$/;"	f	struct:SkRect
setLargestInverted	core/SkRect.h	/^    void setLargestInverted() {$/;"	f	struct:SkIRect
setLargestInverted	core/SkRect.h	/^    void setLargestInverted() {$/;"	f	struct:SkRect
setLastPt	core/SkPath.h	/^    void setLastPt(const SkPoint& p) {$/;"	f	class:SkPath
setLoc	views/SkView.h	/^    void        setLoc(const SkPoint& loc) { this->setLoc(loc.fX, loc.fY); }$/;"	f	class:SkView
setLocX	views/SkView.h	/^    void        setLocX(SkScalar x) { this->setLoc(x, fLoc.fY); }$/;"	f	class:SkView
setLocY	views/SkView.h	/^    void        setLocY(SkScalar y) { this->setLoc(fLoc.fX, y); }$/;"	f	class:SkView
setLuminanceBits	core/SkScalerContext.h	/^        void setLuminanceBits(unsigned lum) {$/;"	f	struct:SkScalerContext::Rec
setLuminanceColor	core/SkScalerContext.h	/^        void setLuminanceColor(SkColor c) {$/;"	f	struct:SkScalerContext::Rec
setMask	gpu/GrPaint.h	/^    void setMask(int i, GrTexture* mask) {$/;"	f	class:GrPaint
setMemory	core/SkOrderedReadBuffer.h	/^    void setMemory(const void* data, size_t size) { fReader.setMemory(data, size); }$/;"	f	class:SkOrderedReadBuffer
setMemory	core/SkReader32.h	/^    void setMemory(const void* data, size_t size) {$/;"	f	class:SkReader32
setMirror	utils/SkInterpolator.h	/^    void setMirror(bool mirror) {$/;"	f	class:SkInterpolatorBase
setMorphologyRadius	gpu/GrSamplerState.h	/^    void setMorphologyRadius(int radius) {$/;"	f	class:GrSamplerState
setMutex	SkPixelRef.cpp	/^void SkPixelRef::setMutex(SkBaseMutex* mutex) {$/;"	f	class:SkPixelRef
setNoun	xml/SkXMLParser.h	/^    void setNoun(const SkString& str) { fNoun.set(str); }$/;"	f	class:SkXMLParserError
setNoun	xml/SkXMLParser.h	/^    void setNoun(const char* ch)  { fNoun.set(ch); }$/;"	f	class:SkXMLParserError
setNoun	xml/SkXMLParser.h	/^    void setNoun(const char* ch, size_t len) { fNoun.set(ch, len); }$/;"	f	class:SkXMLParserError
setOffset	core/SkOrderedReadBuffer.h	/^    void setOffset(size_t offset) { fReader.setOffset(offset); }$/;"	f	class:SkOrderedReadBuffer
setOffset	core/SkReader32.h	/^    void setOffset(size_t offset) {$/;"	f	class:SkReader32
setOpacity	utils/SkLayer.h	/^    void setOpacity(SkScalar opacity) { m_opacity = opacity; }$/;"	f	class:SkLayer
setOrigin	core/SkDevice.h	/^    void setOrigin(int x, int y) { fOrigin.set(x, y); }$/;"	f	class:SkDevice
setOrthog	core/SkPoint.h	/^    void setOrthog(const SkPoint& vec, Side side = kLeft_Side) {$/;"	f	struct:SkPoint
setPackedAtY	SkBitmap.h	/^        void setPackedAtY(int y, uint8_t* addr) {$/;"	f	class:SkBitmap::RLEPixels
setPackedAtY	core/SkBitmap.h	/^        void setPackedAtY(int y, uint8_t* addr) {$/;"	f	class:SkBitmap::RLEPixels
setPerspX	core/SkMatrix.h	/^    void setPerspX(SkPersp v) { this->set(kMPersp0, v); }$/;"	f	class:SkMatrix
setPerspY	core/SkMatrix.h	/^    void setPerspY(SkPersp v) { this->set(kMPersp1, v); }$/;"	f	class:SkMatrix
setPixelRef	SkBitmap.cpp	/^SkPixelRef* SkBitmap::setPixelRef(SkPixelRef* pr, size_t offset) {$/;"	f	class:SkBitmap
setPixelRef	core/SkDevice.h	/^    SkPixelRef* setPixelRef(SkPixelRef* pr, size_t offset) {$/;"	f	class:SkDevice
setPixels	SkBitmap.cpp	/^void SkBitmap::setPixels(void* p, SkColorTable* ctable) {$/;"	f	class:SkBitmap
setPosition	utils/SkLayer.h	/^    void setPosition(SkScalar x, SkScalar y) { m_position.set(x, y); }$/;"	f	class:SkLayer
setPreLocked	SkPixelRef.cpp	/^void SkPixelRef::setPreLocked(void* pixels, SkColorTable* ctable) {$/;"	f	class:SkPixelRef
setProc	core/SkXfermode.h	/^    void setProc(SkXfermodeProc proc) {$/;"	f	class:SkProcXfermode
setPtr	views/SkEvent.h	/^    void setPtr(const char name[], void* value) { fMeta.setPtr(name, value); }$/;"	f	class:SkEvent
setRAndBSwap	gpu/GrSamplerState.h	/^    void setRAndBSwap(bool swap) { fSwapRAndB = swap; }$/;"	f	class:GrSamplerState
setRadial2Params	gpu/GrSamplerState.h	/^    void setRadial2Params(GrScalar centerX1, GrScalar radius0, bool posRoot) {$/;"	f	class:GrSamplerState
setRectFan	core/SkPoint.h	/^    void setRectFan(SkScalar l, SkScalar t, SkScalar r, SkScalar b) {$/;"	f	struct:SkPoint
setRefCnt	core/SkMetaData.h	/^    void setRefCnt(const char name[], SkRefCnt* ptr) {$/;"	f	class:SkMetaData
setRefCntArray	core/SkFlattenable.h	/^    void setRefCntArray(SkRefCnt* array[], int count) {$/;"	f	class:SkFlattenableReadBuffer
setRepeatCount	utils/SkInterpolator.h	/^    void    setRepeatCount(SkScalar repeatCount) { fRepeat = repeatCount; }$/;"	f	class:SkInterpolatorBase
setReserve	core/SkTDArray.h	/^    void setReserve(size_t reserve) {$/;"	f	class:SkTDArray
setReset	utils/SkInterpolator.h	/^    void setReset(bool reset) {$/;"	f	class:SkInterpolatorBase
setRotateDegreesAbout	utils/SkMatrix44.h	/^    void setRotateDegreesAbout(SkMScalar x, SkMScalar y, SkMScalar z,$/;"	f	class:SkMatrix44
setRow	utils/SkCamera.h	/^    void setRow(int row, SkScalar a, SkScalar b, SkScalar c, SkScalar d = 0)$/;"	f	struct:SkMatrix3D
setS32	views/SkEvent.h	/^    void setS32(const char name[], int32_t value) { fMeta.setS32(name, value); }$/;"	f	class:SkEvent
setSampleMode	gpu/GrSamplerState.h	/^    void setSampleMode(SampleMode mode) { fSampleMode = mode; }$/;"	f	class:GrSamplerState
setScalar	views/SkEvent.h	/^    void setScalar(const char name[], SkScalar value) { fMeta.setScalar(name, value); }$/;"	f	class:SkEvent
setScalars	views/SkEvent.h	/^    SkScalar* setScalars(const char name[], int count, const SkScalar values[] = NULL) { return fMeta.setScalars(name, count, values); }$/;"	f	class:SkEvent
setScale	utils/SkMatrix44.h	/^    void setScale(SkMScalar scale) {$/;"	f	class:SkMatrix44
setScaleX	core/SkMatrix.h	/^    void setScaleX(SkScalar v) { this->set(kMScaleX, v); }$/;"	f	class:SkMatrix
setScaleY	core/SkMatrix.h	/^    void setScaleY(SkScalar v) { this->set(kMScaleY, v); }$/;"	f	class:SkMatrix
setSeed	core/SkRandom.h	/^    void setSeed(int32_t seed) { fSeed = (uint32_t)seed; }$/;"	f	class:SkRandom
setSize	utils/SkLayer.h	/^    void setSize(SkScalar w, SkScalar h) { m_size.set(w, h); }$/;"	f	class:SkLayer
setSize	views/SkView.h	/^    void        setSize(const SkPoint& size) { this->setSize(size.fX, size.fY); }$/;"	f	class:SkView
setSkewX	core/SkMatrix.h	/^    void setSkewX(SkScalar v) { this->set(kMSkewX, v); }$/;"	f	class:SkMatrix
setSkewY	core/SkMatrix.h	/^    void setSkewY(SkScalar v) { this->set(kMSkewY, v); }$/;"	f	class:SkMatrix
setString	views/SkEvent.h	/^    void setString(const char name[], const SkString& value) { fMeta.setString(name, value.c_str()); }$/;"	f	class:SkEvent
setString	views/SkEvent.h	/^    void setString(const char name[], const char value[]) { fMeta.setString(name, value); }$/;"	f	class:SkEvent
setTargetID	views/SkEvent.h	/^    SkEvent* setTargetID(SkEventSinkID targetID) {$/;"	f	class:SkEvent
setTargetProc	views/SkEvent.h	/^    SkEvent* setTargetProc(Proc proc) {$/;"	f	class:SkEvent
setTexture	gpu/GrPaint.h	/^    void setTexture(int i, GrTexture* texture) {$/;"	f	class:GrPaint
setTextureDomain	gpu/GrSamplerState.h	/^    void setTextureDomain(const GrRect& textureDomain) { fTextureDomain = textureDomain; }$/;"	f	class:GrSamplerState
setTitle	views/SkOSMenu.h	/^    void        setTitle (const char title[]) { fTitle.set(title); }$/;"	f	class:SkOSMenu
setTranslateX	core/SkMatrix.h	/^    void setTranslateX(SkScalar v) { this->set(kMTransX, v); }$/;"	f	class:SkMatrix
setTranslateY	core/SkMatrix.h	/^    void setTranslateY(SkScalar v) { this->set(kMTransY, v); }$/;"	f	class:SkMatrix
setTypeMask	core/SkMatrix.h	/^    void setTypeMask(int mask) {$/;"	f	class:SkMatrix
setTypefaceArray	core/SkFlattenable.h	/^    void setTypefaceArray(SkTypeface* array[], int count) {$/;"	f	class:SkFlattenableReadBuffer
setURI	core/SkPixelRef.h	/^    void setURI(const SkString& uri) { fURI = uri; }$/;"	f	class:SkPixelRef
setURI	core/SkPixelRef.h	/^    void setURI(const char uri[]) {$/;"	f	class:SkPixelRef
setURI	core/SkPixelRef.h	/^    void setURI(const char uri[], size_t len) {$/;"	f	class:SkPixelRef
setWidth	views/SkView.h	/^    void        setWidth(SkScalar width) { this->setSize(width, fHeight); }$/;"	f	class:SkView
setWrapX	gpu/GrSamplerState.h	/^    void setWrapX(WrapMode mode) { fWrapX = mode; }$/;"	f	class:GrSamplerState
setWrapY	gpu/GrSamplerState.h	/^    void setWrapY(WrapMode mode) { fWrapY = mode; }$/;"	f	class:GrSamplerState
setX	core/SkPoint.h	/^    void setX(int32_t x) { fX = x; }$/;"	f	struct:SkIPoint
setXYWH	SkRect.h	/^    void setXYWH(SkScalar x, SkScalar y, SkScalar width, SkScalar height) {$/;"	f	struct:SkRect
setXYWH	SkRect.h	/^    void setXYWH(int32_t x, int32_t y, int32_t width, int32_t height) {$/;"	f	struct:SkIRect
setXYWH	core/SkRect.h	/^    void setXYWH(SkScalar x, SkScalar y, SkScalar width, SkScalar height) {$/;"	f	struct:SkRect
setXYWH	core/SkRect.h	/^    void setXYWH(int32_t x, int32_t y, int32_t width, int32_t height) {$/;"	f	struct:SkIRect
setY	core/SkPoint.h	/^    void setY(int32_t y) { fY = y; }$/;"	f	struct:SkIPoint
setZero	core/Sk64.h	/^    void    setZero() { fHi = fLo = 0; }$/;"	f	struct:Sk64
setZero	core/SkPoint.h	/^    void setZero() { fX = fY = 0; }$/;"	f	struct:SkIPoint
shiftPerPixel	SkBitmap.h	/^    int shiftPerPixel() const { return fBytesPerPixel >> 1; }$/;"	f	class:SkBitmap
shiftPerPixel	core/SkBitmap.h	/^    int shiftPerPixel() const { return fBytesPerPixel >> 1; }$/;"	f	class:SkBitmap
shouldCancelDecode	images/SkImageDecoder.h	/^    bool shouldCancelDecode() const { return fShouldCancelDecode; }$/;"	f	class:SkImageDecoder
size	core/SkBuffer.h	/^    size_t  size() const { return fStop - fData; }$/;"	f	class:SkRBuffer
size	core/SkData.h	/^    size_t size() const { return fSize; }$/;"	f	class:SkAutoDataUnref
size	core/SkData.h	/^    size_t size() const { return fSize; }$/;"	f	class:SkData
size	core/SkOrderedReadBuffer.h	/^    uint32_t size() { return fReader.size(); }$/;"	f	class:SkOrderedReadBuffer
size	core/SkOrderedWriteBuffer.h	/^    virtual uint32_t size() { return fWriter.size(); }$/;"	f	class:SkOrderedWriteBuffer
size	core/SkReader32.h	/^    uint32_t size() const { return fStop - fBase; }$/;"	f	class:SkReader32
size	core/SkString.h	/^    size_t      size() const { return (size_t) fRec->fLength; }$/;"	f	class:SkString
size	core/SkWriter32.h	/^    uint32_t  size() const { return fSize; }$/;"	f	class:SkWriter32
size	pdf/SkPDFTypes.h	/^    int size() { return fValue.count(); }$/;"	f	class:SkPDFArray
size	pdf/SkPDFTypes.h	/^    int size() { return fValue.count(); }$/;"	f	class:SkPDFDict
sizeInBytes	gpu/GrTexture.h	/^    virtual size_t sizeInBytes() const {$/;"	f	class:GrTexture
sk_assert_monotonic_x	core/SkEdgeClipper.h	/^    #define sk_assert_monotonic_x(/;"	d
sk_assert_monotonic_y	core/SkEdgeClipper.h	/^    #define sk_assert_monotonic_y(/;"	d
sk_atomic_conditional_inc	core/SkThread_platform.h	/^int32_t sk_atomic_conditional_inc(int32_t* addr) {$/;"	f
sk_atomic_conditional_inc	core/SkThread_platform.h	/^static inline __attribute__((always_inline)) int32_t sk_atomic_conditional_inc(int32_t* addr) {$/;"	f
sk_atomic_dec	core/SkThread_platform.h	/^#define sk_atomic_dec(/;"	d
sk_atomic_dec	core/SkThread_platform.h	/^static inline __attribute__((always_inline)) int32_t sk_atomic_dec(int32_t *addr) {$/;"	f
sk_atomic_inc	core/SkThread_platform.h	/^#define sk_atomic_inc(/;"	d
sk_atomic_inc	core/SkThread_platform.h	/^static inline __attribute__((always_inline)) int32_t sk_atomic_inc(int32_t *addr) {$/;"	f
sk_blend_to_grblend	gpu/SkGr.h	/^#define sk_blend_to_grblend(/;"	d
sk_bzero	SkTypes.h	/^static inline void sk_bzero(void* buffer, size_t size) {$/;"	f
sk_bzero	core/SkTypes.h	/^static inline void sk_bzero(void* buffer, size_t size) {$/;"	f
sk_float_abs	core/SkFloatingPoint.h	/^    #define sk_float_abs(/;"	d
sk_float_acos	core/SkFloatingPoint.h	/^    #define sk_float_acos(/;"	d
sk_float_asin	core/SkFloatingPoint.h	/^    #define sk_float_asin(/;"	d
sk_float_atan2	core/SkFloatingPoint.h	/^    #define sk_float_atan2(/;"	d
sk_float_ceil	core/SkFloatingPoint.h	/^    #define sk_float_ceil(/;"	d
sk_float_ceil2int	core/SkFloatingPoint.h	/^    #define sk_float_ceil2int(/;"	d
sk_float_copysign	core/SkFloatingPoint.h	/^static inline float sk_float_copysign(float x, float y) {$/;"	f
sk_float_cos	core/SkFloatingPoint.h	/^    #define sk_float_cos(/;"	d
sk_float_exp	core/SkFloatingPoint.h	/^    #define sk_float_exp(/;"	d
sk_float_floor	core/SkFloatingPoint.h	/^    #define sk_float_floor(/;"	d
sk_float_floor2int	core/SkFloatingPoint.h	/^    #define sk_float_floor2int(/;"	d
sk_float_isfinite	core/SkFloatingPoint.h	/^    #define sk_float_isfinite(/;"	d
sk_float_isinf	core/SkFloatingPoint.h	/^    #define sk_float_isinf(/;"	d
sk_float_isinf	core/SkFloatingPoint.h	/^    static inline int sk_float_isinf(float x) {$/;"	f
sk_float_isnan	core/SkFloatingPoint.h	/^    #define sk_float_isnan(/;"	d
sk_float_log	core/SkFloatingPoint.h	/^    #define sk_float_log(/;"	d
sk_float_mod	core/SkFloatingPoint.h	/^    #define sk_float_mod(/;"	d
sk_float_pow	core/SkFloatingPoint.h	/^static inline float sk_float_pow(float base, float exp) {$/;"	f
sk_float_round2int	core/SkFloatingPoint.h	/^    #define sk_float_round2int(/;"	d
sk_float_sin	core/SkFloatingPoint.h	/^    #define sk_float_sin(/;"	d
sk_float_sqrt	core/SkFloatingPoint.h	/^    #define sk_float_sqrt(/;"	d
sk_float_tan	core/SkFloatingPoint.h	/^    #define sk_float_tan(/;"	d
sk_membar_aquire__after_atomic_conditional_inc	core/SkThread_platform.h	/^static inline __attribute__((always_inline)) void sk_membar_aquire__after_atomic_conditional_inc() { }$/;"	f
sk_membar_aquire__after_atomic_conditional_inc	core/SkThread_platform.h	/^void sk_membar_aquire__after_atomic_conditional_inc() {$/;"	f
sk_membar_aquire__after_atomic_dec	core/SkThread_platform.h	/^static inline __attribute__((always_inline)) void sk_membar_aquire__after_atomic_dec() { }$/;"	f
sk_membar_aquire__after_atomic_dec	core/SkThread_platform.h	/^void sk_membar_aquire__after_atomic_dec() {$/;"	f
sk_path_verb_to_gr_path_command	gpu/SkGr.h	/^#define sk_path_verb_to_gr_path_command(/;"	d
sk_stdint_DEFINED	config/sk_stdint.h	/^#define sk_stdint_DEFINED$/;"	d
sk_tile_mode_to_grwrap	gpu/SkGr.h	/^#define sk_tile_mode_to_grwrap(/;"	d
skia_advanced_typeface_metrics_utils	core/SkAdvancedTypefaceMetrics.h	/^namespace skia_advanced_typeface_metrics_utils {$/;"	n
skip	core/SkOrderedReadBuffer.h	/^    virtual const void* skip(size_t size) { return fReader.skip(size); }$/;"	f	class:SkOrderedReadBuffer
skip	core/SkReader32.h	/^    const void* skip(size_t size) {$/;"	f	class:SkReader32
skipT	core/SkFlattenable.h	/^    template <typename T> const T& skipT() {$/;"	f	class:SkFlattenableReadBuffer
skipT	core/SkReader32.h	/^    template <typename T> const T& skipT() {$/;"	f	class:SkReader32
skjpeg_destination_mgr	images/SkJpegUtility.h	/^struct skjpeg_destination_mgr : jpeg_destination_mgr {$/;"	s
skjpeg_error_mgr	images/SkJpegUtility.h	/^struct skjpeg_error_mgr : jpeg_error_mgr {$/;"	s
skjpeg_source_mgr	images/SkJpegUtility.h	/^struct skjpeg_source_mgr : jpeg_source_mgr {$/;"	s
startsWith	core/SkString.h	/^    bool startsWith(const char prefix[]) const {$/;"	f	class:SkString
stop	views/SkTouchGesture.h	/^    void stop() { fActive = false; }$/;"	f	struct:SkFlingState
stop	views/SkTouchGesture.h	/^    void stop() { fFlinger.stop(); }$/;"	f	class:SkTouchGesture
strings	utils/SkJSON.h	/^        const char* const* strings() const {$/;"	f	class:SkJSON::Array
style	core/SkTypeface.h	/^    Style style() const { return fStyle; }$/;"	f	class:SkTypeface
supportsDesktop	gpu/GrGLInterface.h	/^    bool supportsDesktop() const {$/;"	f	struct:GrGLInterface
supportsES2	gpu/GrGLInterface.h	/^    bool supportsES2() const {$/;"	f	struct:GrGLInterface
swap	SkBitmap.cpp	/^void SkBitmap::swap(SkBitmap& other) {$/;"	f	class:SkBitmap
swap	core/SkTDArray.h	/^    void swap(SkTDArray<T>& other) {$/;"	f	class:SkTDArray
swap	utils/win/SkTScopedComPtr.h	/^    void swap(SkTScopedComPtr<T>& that) {$/;"	f	class:SkTScopedComPtr
swapsRAndB	gpu/GrSamplerState.h	/^    bool swapsRAndB() const { return fSwapRAndB; }$/;"	f	class:GrSamplerState
tex	utils/SkMeshUtils.h	/^    const SkPoint*  tex() const { return fTex; }$/;"	f	class:SkMeshIndices
texCount	utils/SkMeshUtils.h	/^    size_t          texCount() const { return fTexCount; }$/;"	f	class:SkMeshIndices
texture	gpu/GrContext.h	/^    GrTexture* texture() { return fEntry.texture(); }$/;"	f	class:GrAutoScratchTexture
textureSampler	gpu/GrPaint.h	/^    GrSamplerState* textureSampler(int i) {$/;"	f	class:GrPaint
toCeil	core/SkSize.h	/^    SkISize toCeil() const {$/;"	f	struct:SkSize
toFloor	core/SkSize.h	/^    SkISize toFloor() const {$/;"	f	struct:SkSize
toRound	core/SkSize.h	/^    SkISize toRound() const {$/;"	f	struct:SkSize
toggleInverseFillType	core/SkPath.h	/^    void toggleInverseFillType() {$/;"	f	class:SkPath
top	SkRect.h	/^    SkScalar    top() const { return fTop; }$/;"	f	struct:SkRect
top	SkRect.h	/^    int top() const { return fTop; }$/;"	f	struct:SkIRect
top	core/SkRect.h	/^    SkScalar    top() const { return fTop; }$/;"	f	struct:SkRect
top	core/SkRect.h	/^    int top() const { return fTop; }$/;"	f	struct:SkIRect
top	core/SkTDArray.h	/^    T&          top() { return (*this)[fCount - 1]; }$/;"	f	class:SkTDArray
top	core/SkTDArray.h	/^    const T&    top() const { return (*this)[fCount - 1]; }$/;"	f	class:SkTDArray
top	core/SkTDStack.h	/^    T& top() {$/;"	f	class:SkTDStack
top	core/SkTDStack.h	/^    const T& top() const {$/;"	f	class:SkTDStack
totalCapacity	core/SkChunkAlloc.h	/^    size_t totalCapacity() const { return fTotalCapacity; }$/;"	f	class:SkChunkAlloc
transform	core/SkPath.h	/^    void transform(const SkMatrix& matrix) {$/;"	f	class:SkPath
translate	core/SkRegion.h	/^    void translate(int dx, int dy) { this->translate(dx, dy, this); }$/;"	f	class:SkRegion
try_ref	core/SkWeakRefCnt.h	/^    bool SK_WARN_UNUSED_RESULT try_ref() const {$/;"	f	class:SkWeakRefCnt
type	utils/SkJSON.h	/^        Type type() const { return fType; }$/;"	f	class:SkJSON::Array
uint16_t	config/sk_stdint.h	/^typedef unsigned short uint16_t;$/;"	t
uint16_t	gpu/GrConfig.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	config/sk_stdint.h	/^typedef unsigned uint32_t;$/;"	t
uint32_t	gpu/GrConfig.h	/^typedef unsigned uint32_t;$/;"	t
uint64_t	config/sk_stdint.h	/^typedef unsigned long long uint64_t;$/;"	t
uint64_t	gpu/GrConfig.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	config/sk_stdint.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	gpu/GrConfig.h	/^typedef unsigned char uint8_t;$/;"	t
uintmax_t	config/sk_stdint.h	/^typedef uint64_t uintmax_t;$/;"	t
unflatten	SkBitmap.cpp	/^void SkBitmap::unflatten(SkFlattenableReadBuffer& buffer) {$/;"	f	class:SkBitmap
uniqueID	core/SkTypeface.h	/^    SkFontID uniqueID() const { return fUniqueID; }$/;"	f	class:SkTypeface
unlock16BitCache	SkBitmap.h	/^    void unlock16BitCache() {$/;"	f	class:SkColorTable
unlock16BitCache	core/SkBitmap.h	/^    void unlock16BitCache() {$/;"	f	class:SkColorTable
unlockPixels	SkBitmap.cpp	/^void SkBitmap::unlockPixels() const {$/;"	f	class:SkBitmap
unlockPixels	SkPixelRef.cpp	/^void SkPixelRef::unlockPixels() {$/;"	f	class:SkPixelRef
unref	SkBitmap.cpp	/^    void unref() {$/;"	f	struct:SkBitmap::MipMap
unref	core/SkRefCnt.h	/^    void unref() const {$/;"	f	class:SkRefCnt
unref	effects/SkGroupShape.h	/^    void unref() const {$/;"	f	class:SkTRefCnt
unrefAll	core/SkTDArray.h	/^    void unrefAll() {$/;"	f	class:SkTDArray
unspecified_bool_type	core/SkRefCnt.h	/^    typedef T* SkRefPtr::*unspecified_bool_type;$/;"	t	class:SkRefPtr::SkRefPtr
updateBoundsCache	core/SkPath.h	/^    void updateBoundsCache() const {$/;"	f	class:SkPath
updatePixelsFromRef	SkBitmap.cpp	/^void SkBitmap::updatePixelsFromRef() const {$/;"	f	class:SkBitmap
useDefaultMutex	core/SkPixelRef.h	/^    void useDefaultMutex() { this->setMutex(NULL); }$/;"	f	class:SkPixelRef
validate	SkBitmap.cpp	/^void SkBitmap::validate() const {$/;"	f	class:SkBitmap
validate	core/SkDraw.h	/^    void validate() const {}$/;"	f	class:SkDraw
validate	core/SkRefCnt.h	/^    void validate() const {$/;"	f	class:SkRefCnt
validate	core/SkString.h	/^    void validate() const {}$/;"	f	class:SkString
validate	core/SkTDArray.h	/^    void validate() const {$/;"	f	class:SkTDArray
validate	core/SkWeakRefCnt.h	/^    void validate() const {$/;"	f	class:SkWeakRefCnt
validate	gpu/GrTexture.h	/^    void validate() const {$/;"	f	class:GrTexture
validate	gpu/GrTexture.h	/^    void validate() const {}$/;"	f	class:GrTexture
validateClip	core/SkCanvas.h	/^    void validateClip() const {}$/;"	f	class:SkCanvas
value	core/SkEndian.h	/^    static const uint16_t value = static_cast<uint16_t>((N >> 8) | ((N & 0xFF) << 8));$/;"	m	struct:SkTEndianSwap16
value	core/SkEndian.h	/^    static const uint32_t value = ((N & 0xFF) << 24) |$/;"	m	struct:SkTEndianSwap32
value	pdf/SkPDFTypes.h	/^      SkPDFObject* value;$/;"	m	struct:SkPDFDict::Rec
weak_dispose	core/SkWeakRefCnt.h	/^    virtual void weak_dispose() const {$/;"	f	class:SkWeakRefCnt
weak_expired	core/SkWeakRefCnt.h	/^    bool weak_expired() const {$/;"	f	class:SkWeakRefCnt
weak_ref	core/SkWeakRefCnt.h	/^    void weak_ref() const {$/;"	f	class:SkWeakRefCnt
weak_unref	core/SkWeakRefCnt.h	/^    void weak_unref() const {$/;"	f	class:SkWeakRefCnt
width	SkBitmap.h	/^    int width() const { return fWidth; }$/;"	f	class:SkBitmap
width	SkRect.h	/^    SkScalar    width() const { return fRight - fLeft; }$/;"	f	struct:SkRect
width	SkRect.h	/^    int width() const { return fRight - fLeft; }$/;"	f	struct:SkIRect
width	core/SkBitmap.h	/^    int width() const { return fWidth; }$/;"	f	class:SkBitmap
width	core/SkDevice.h	/^    virtual int width() const { return fBitmap.width(); }$/;"	f	class:SkDevice
width	core/SkPicture.h	/^    int width() const { return fWidth; }$/;"	f	class:SkPicture
width	core/SkRect.h	/^    SkScalar    width() const { return fRight - fLeft; }$/;"	f	struct:SkRect
width	core/SkRect.h	/^    int width() const { return fRight - fLeft; }$/;"	f	struct:SkIRect
width	core/SkSize.h	/^	T width() const { return fWidth; }$/;"	f	struct:SkTSize
width	gpu/GrGlyph.h	/^    int width() const { return fBounds.width(); }$/;"	f	struct:GrGlyph
width	gpu/GrRect.h	/^    int width() const { return fRight - fLeft; }$/;"	f	struct:GrIRect16
width	gpu/GrRenderTarget.h	/^    int width() const { return fWidth; }$/;"	f	class:GrRenderTarget
width	gpu/GrTexture.h	/^    int width() const { return fWidth; }$/;"	f	class:GrTexture
width	images/SkPageFlipper.h	/^    int width() const { return fWidth; }$/;"	f	class:SkPageFlipper
width	views/SkView.h	/^    SkScalar    width() const { return fWidth; }$/;"	f	class:SkView
write	core/SkBuffer.h	/^    void write(const void* buffer, size_t size) {$/;"	f	class:SkWBuffer
write	core/SkOrderedWriteBuffer.h	/^    virtual void write(const void* values, size_t size) { fWriter.write(values, size); }$/;"	f	class:SkOrderedWriteBuffer
write	core/SkWriter32.h	/^    void write(const void* values, size_t size) {$/;"	f	class:SkWriter32
write16	core/SkBuffer.h	/^    void    write16(int16_t x) { this->writeNoSizeCheck(&x, 2); }$/;"	f	class:SkWBuffer
write16	core/SkOrderedWriteBuffer.h	/^    virtual void write16(int32_t value) { fWriter.write16(value); }$/;"	f	class:SkOrderedWriteBuffer
write16	core/SkWriter32.h	/^    void write16(int32_t value) {$/;"	f	class:SkWriter32
write32	core/SkBuffer.h	/^    void    write32(int32_t x) { this->writeNoSizeCheck(&x, 4); }$/;"	f	class:SkWBuffer
write32	core/SkOrderedWriteBuffer.h	/^    virtual void write32(int32_t value) { fWriter.write32(value); }$/;"	f	class:SkOrderedWriteBuffer
write32	core/SkWriter32.h	/^    void write32(int32_t value) {$/;"	f	class:SkWriter32
write8	core/SkBuffer.h	/^    void    write8(int8_t x) { this->writeNoSizeCheck(&x, 1); }$/;"	f	class:SkWBuffer
write8	core/SkOrderedWriteBuffer.h	/^    virtual void write8(int32_t value) { fWriter.write8(value); }$/;"	f	class:SkOrderedWriteBuffer
write8	core/SkWriter32.h	/^    void write8(int32_t value) {$/;"	f	class:SkWriter32
writeBool	core/SkBuffer.h	/^    void    writeBool(bool x) { this->write8(x); }$/;"	f	class:SkWBuffer
writeBool	core/SkOrderedWriteBuffer.h	/^    virtual bool writeBool(bool value) { return fWriter.writeBool(value); }$/;"	f	class:SkOrderedWriteBuffer
writeBool	core/SkStream.h	/^    bool    writeBool(bool v) { return this->write8(v); }$/;"	f	class:SkWStream
writeBool	core/SkWriter32.h	/^    bool writeBool(bool value) {$/;"	f	class:SkWriter32
writeInt	core/SkOrderedWriteBuffer.h	/^    virtual void writeInt(int32_t value) { fWriter.writeInt(value); }$/;"	f	class:SkOrderedWriteBuffer
writeInt	core/SkWriter32.h	/^    void writeInt(int32_t value) {$/;"	f	class:SkWriter32
writeMatrix	core/SkOrderedWriteBuffer.h	/^    virtual void writeMatrix(const SkMatrix& matrix) { fWriter.writeMatrix(matrix); }$/;"	f	class:SkOrderedWriteBuffer
writeMatrix	core/SkWriter32.h	/^    void writeMatrix(const SkMatrix& matrix) {$/;"	f	class:SkWriter32
writeMul4	core/SkOrderedWriteBuffer.h	/^    virtual void writeMul4(const void* values, size_t size) { fWriter.writeMul4(values, size); }$/;"	f	class:SkOrderedWriteBuffer
writeMul4	core/SkWriter32.h	/^    void writeMul4(const void* values, size_t size) {$/;"	f	class:SkWriter32
writePad	core/SkOrderedWriteBuffer.h	/^    virtual void writePad(const void* src, size_t size) { fWriter.writePad(src, size); }$/;"	f	class:SkOrderedWriteBuffer
writePath	core/SkOrderedWriteBuffer.h	/^    virtual void writePath(const SkPath& path) { path.flatten(fWriter); };$/;"	f	class:SkOrderedWriteBuffer
writePoint	core/SkOrderedWriteBuffer.h	/^    virtual void writePoint(const SkPoint& point) {$/;"	f	class:SkOrderedWriteBuffer
writePoint	core/SkWriter32.h	/^    void writePoint(const SkPoint& pt) {$/;"	f	class:SkWriter32
writePtr	core/SkBuffer.h	/^    void    writePtr(const void* x) { this->writeNoSizeCheck(&x, sizeof(x)); }$/;"	f	class:SkWBuffer
writeRect	core/SkOrderedWriteBuffer.h	/^    virtual void writeRect(const SkRect& rect) { fWriter.writeRect(rect); }$/;"	f	class:SkOrderedWriteBuffer
writeRect	core/SkWriter32.h	/^    void writeRect(const SkRect& rect) {$/;"	f	class:SkWriter32
writeRegion	core/SkWriter32.h	/^    void writeRegion(const SkRegion& rgn) {$/;"	f	class:SkWriter32
writeRenderTargetPixels	gpu/GrContext.h	/^    void writeRenderTargetPixels(GrRenderTarget* target,$/;"	f	class:GrContext
writeScalar	core/SkBuffer.h	/^    void    writeScalar(SkScalar x) { this->writeNoSizeCheck(&x, 4); }$/;"	f	class:SkWBuffer
writeScalar	core/SkOrderedWriteBuffer.h	/^    virtual void writeScalar(SkScalar value) { fWriter.writeScalar(value); }$/;"	f	class:SkOrderedWriteBuffer
writeScalar	core/SkWriter32.h	/^    void writeScalar(SkScalar value) {$/;"	f	class:SkWriter32
writeString	core/SkOrderedWriteBuffer.h	/^    virtual void writeString(const char* str, size_t len = (size_t)-1) { fWriter.writeString(str, len); }$/;"	f	class:SkOrderedWriteBuffer
writeTexturePixels	gpu/GrContext.h	/^    void writeTexturePixels(GrTexture* texture,$/;"	f	class:GrContext
writeToStream	core/SkOrderedWriteBuffer.h	/^    virtual bool writeToStream(SkWStream* stream) { return fWriter.writeToStream(stream); }$/;"	f	class:SkOrderedWriteBuffer
x	SkRect.h	/^    SkScalar    x() const { return fLeft; }$/;"	f	struct:SkRect
x	SkRect.h	/^    int x() const { return fLeft; }$/;"	f	struct:SkIRect
x	core/SkPoint.h	/^    SkScalar x() const { return fX; }$/;"	f	struct:SkPoint
x	core/SkPoint.h	/^    int32_t x() const { return fX; }$/;"	f	struct:SkIPoint
x	core/SkRect.h	/^    SkScalar    x() const { return fLeft; }$/;"	f	struct:SkRect
x	core/SkRect.h	/^    int x() const { return fLeft; }$/;"	f	struct:SkIRect
y	SkRect.h	/^    SkScalar    y() const { return fTop; }$/;"	f	struct:SkRect
y	SkRect.h	/^    int y() const { return fTop; }$/;"	f	struct:SkIRect
y	core/SkPoint.h	/^    SkScalar y() const { return fY; }$/;"	f	struct:SkPoint
y	core/SkPoint.h	/^    int32_t y() const { return fY; }$/;"	f	struct:SkIPoint
y	core/SkRect.h	/^    SkScalar    y() const { return fTop; }$/;"	f	struct:SkRect
y	core/SkRect.h	/^    int y() const { return fTop; }$/;"	f	struct:SkIRect
~AutoFinish	gpu/GrTextContext.h	/^inline GrTextContext::AutoFinish::~AutoFinish() {$/;"	f	class:GrTextContext::AutoFinish
~AutoRenderTarget	gpu/GrContext.h	/^        ~AutoRenderTarget() {$/;"	f	class:GrContext::AutoRenderTarget
~AutoValidateClip	core/SkCanvas.h	/^        ~AutoValidateClip() { fCanvas->validateClip(); }$/;"	f	class:SkCanvas::AutoValidateClip
~GrAutoMatrix	gpu/GrContext.h	/^    ~GrAutoMatrix() {$/;"	f	class:GrAutoMatrix
~GrAutoScratchTexture	gpu/GrContext.h	/^    ~GrAutoScratchTexture() {$/;"	f	class:GrAutoScratchTexture
~GrAutoTPtrValueRestore	gpu/GrTemplates.h	/^    ~GrAutoTPtrValueRestore() {$/;"	f	class:GrAutoTPtrValueRestore
~GrClipIterator	gpu/GrClipIterator.h	/^    virtual ~GrClipIterator() {}$/;"	f	class:GrClipIterator
~GrContextFactory	gpu/GrContextFactory.h	/^    ~GrContextFactory() {$/;"	f	class:GrContextFactory
~GrInstanceCounter	gpu/GrInstanceCounter.h	/^    ~GrInstanceCounter() {$/;"	f	class:GrInstanceCounter
~GrPaint	gpu/GrPaint.h	/^    ~GrPaint() {$/;"	f	class:GrPaint
~GrSamplerState	gpu/GrSamplerState.h	/^    ~GrSamplerState() {$/;"	f	class:GrSamplerState
~GrTextContext	gpu/GrTextContext.h	/^    virtual ~GrTextContext() {}$/;"	f	class:GrTextContext
~Item	views/SkOSMenu.h	/^        ~Item() { delete fEvent; }$/;"	f	class:SkOSMenu::Item
~Proxy	core/SkImageFilter.h	/^        virtual ~Proxy() {};$/;"	f	class:SkImageFilter::Proxy
~RLEPixels	SkBitmap.cpp	/^SkBitmap::RLEPixels::~RLEPixels() {$/;"	f	class:SkBitmap::RLEPixels
~SkAutoCanvasRestore	core/SkCanvas.h	/^    ~SkAutoCanvasRestore() {$/;"	f	class:SkAutoCanvasRestore
~SkAutoDataUnref	core/SkData.h	/^    ~SkAutoDataUnref() {$/;"	f	class:SkAutoDataUnref
~SkAutoDescriptor	core/SkDescriptor.h	/^    ~SkAutoDescriptor()$/;"	f	class:SkAutoDescriptor
~SkAutoFlipUpdate	images/SkFlipPixelRef.h	/^    ~SkAutoFlipUpdate() {$/;"	f	class:SkAutoFlipUpdate
~SkAutoFree	SkTypes.h	/^    ~SkAutoFree() { sk_free(fPtr); }$/;"	f	class:SkAutoFree
~SkAutoFree	core/SkTypes.h	/^    ~SkAutoFree() { sk_free(fPtr); }$/;"	f	class:SkAutoFree
~SkAutoGraphics	core/SkGraphics.h	/^    ~SkAutoGraphics() {$/;"	f	class:SkAutoGraphics
~SkAutoLockColors	SkBitmap.h	/^    ~SkAutoLockColors() {$/;"	f	class:SkAutoLockColors
~SkAutoLockColors	core/SkBitmap.h	/^    ~SkAutoLockColors() {$/;"	f	class:SkAutoLockColors
~SkAutoLockPixels	SkBitmap.h	/^    ~SkAutoLockPixels() {$/;"	f	class:SkAutoLockPixels
~SkAutoLockPixels	core/SkBitmap.h	/^    ~SkAutoLockPixels() {$/;"	f	class:SkAutoLockPixels
~SkAutoMalloc	SkTypes.h	/^    ~SkAutoMalloc() {$/;"	f	class:SkAutoMalloc
~SkAutoMalloc	core/SkTypes.h	/^    ~SkAutoMalloc() {$/;"	f	class:SkAutoMalloc
~SkAutoMaskFreeImage	core/SkMask.h	/^    ~SkAutoMaskFreeImage() {$/;"	f	class:SkAutoMaskFreeImage
~SkAutoMutexAcquire	core/SkThread.h	/^    ~SkAutoMutexAcquire() {$/;"	f	class:SkAutoMutexAcquire
~SkAutoPictureRecord	core/SkPicture.h	/^    ~SkAutoPictureRecord() {$/;"	f	class:SkAutoPictureRecord
~SkAutoRef	core/SkRefCnt.h	/^    ~SkAutoRef() { SkSafeUnref(fObj); }$/;"	f	class:SkAutoRef
~SkAutoSMalloc	SkTypes.h	/^    ~SkAutoSMalloc() {$/;"	f	class:SkAutoSMalloc
~SkAutoSMalloc	core/SkTypes.h	/^    ~SkAutoSMalloc() {$/;"	f	class:SkAutoSMalloc
~SkAutoSTArray	core/SkTemplates.h	/^    ~SkAutoSTArray() {$/;"	f	class:SkAutoSTArray
~SkAutoSTMalloc	core/SkTemplates.h	/^    ~SkAutoSTMalloc() {$/;"	f	class:SkAutoSTMalloc
~SkAutoTArray	core/SkTemplates.h	/^    ~SkAutoTArray() {$/;"	f	class:SkAutoTArray
~SkAutoTCallIProc	core/SkTemplates.h	/^    ~SkAutoTCallIProc() { if (fObj) P(fObj); }$/;"	f	class:SkAutoTCallIProc
~SkAutoTCallVProc	core/SkTemplates.h	/^    ~SkAutoTCallVProc() { if (fObj) P(fObj); }$/;"	f	class:SkAutoTCallVProc
~SkAutoTDelete	core/SkTemplates.h	/^    ~SkAutoTDelete() { if (fDeleteWhenDone) delete fObj; }$/;"	f	class:SkAutoTDelete
~SkAutoTDeleteArray	core/SkTemplates.h	/^    ~SkAutoTDeleteArray() { delete[] fArray; }$/;"	f	class:SkAutoTDeleteArray
~SkAutoTMalloc	core/SkTemplates.h	/^    ~SkAutoTMalloc() {$/;"	f	class:SkAutoTMalloc
~SkAutoTUnref	core/SkRefCnt.h	/^    ~SkAutoTUnref() { SkSafeUnref(fObj); }$/;"	f	class:SkAutoTUnref
~SkAutoTime	core/SkTime.h	/^    ~SkAutoTime()$/;"	f	class:SkAutoTime
~SkAutoTrace	core/SkUtils.h	/^    ~SkAutoTrace() {$/;"	f	class:SkAutoTrace
~SkBitmap	SkBitmap.cpp	/^SkBitmap::~SkBitmap() {$/;"	f	class:SkBitmap
~SkFlattenableReadBuffer	core/SkFlattenable.h	/^    virtual ~SkFlattenableReadBuffer() {}$/;"	f	class:SkFlattenableReadBuffer
~SkOSWindow	views/SkOSWindow_Android.h	/^    ~SkOSWindow() {}$/;"	f	class:SkOSWindow
~SkOrderedWriteBuffer	core/SkOrderedWriteBuffer.h	/^    virtual ~SkOrderedWriteBuffer() {}$/;"	f	class:SkOrderedWriteBuffer
~SkRefCnt	core/SkRefCnt.h	/^    virtual ~SkRefCnt() {$/;"	f	class:SkRefCnt
~SkRefPtr	core/SkRefCnt.h	/^    ~SkRefPtr() { SkSafeUnref(fObj); }$/;"	f	class:SkRefPtr
~SkTArray	core/SkTArray.h	/^    virtual ~SkTArray() {$/;"	f	class:SkTArray
~SkTDArray	core/SkTDArray.h	/^    ~SkTDArray() {$/;"	f	class:SkTDArray
~SkTDStack	core/SkTDStack.h	/^    ~SkTDStack() {$/;"	f	class:SkTDStack
~SkTLazy	core/SkTLazy.h	/^    ~SkTLazy() {$/;"	f	class:SkTLazy
~SkTRefCnt	effects/SkGroupShape.h	/^    ~SkTRefCnt() { SkASSERT(1 == fRefCnt); }$/;"	f	class:SkTRefCnt
~SkTScopedComPtr	utils/win/SkTScopedComPtr.h	/^    ~SkTScopedComPtr() {$/;"	f	class:SkTScopedComPtr
~SkTScopedPtr	core/SkTScopedPtr.h	/^    ~SkTScopedPtr() {$/;"	f	class:SkTScopedPtr
~SkUTF16_Str	core/SkOSFile.h	/^    ~SkUTF16_Str()$/;"	f	class:SkUTF16_Str
~SkWeakRefCnt	core/SkWeakRefCnt.h	/^    virtual ~SkWeakRefCnt() {$/;"	f	class:SkWeakRefCnt
~Timeline	animator/SkAnimator.h	/^        virtual ~Timeline() {}$/;"	f	class:SkAnimator::Timeline
